#line 2 "Scanner.cpp"

#line 4 "Scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 107
#define YY_END_OF_BUFFER 108
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[455] =
    {   0,
        0,    0,  108,  107,  106,   70,   83,   79,   80,   68,
       66,   84,   67,   69,  107,   85,   73,   71,   74,  105,
      105,  105,  104,  105,  105,  104,  105,  104,  105,  105,
      105,  104,  105,  105,  105,  104,  105,  105,  105,  105,
       81,   82,  106,   77,   78,   76,   72,   75,  105,  105,
      105,  105,   49,  105,  105,  105,  105,  105,  105,  105,
      104,  105,  104,   10,  105,  105,  105,  105,  105,  105,
      104,   17,  105,   19,   57,  105,  105,  105,  105,  105,
      105,  105,   28,   59,  105,   30,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,   40,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,    2,
      105,    3,  105,  105,  105,  105,  105,  105,  105,  105,
      104,  105,  105,    9,  105,  105,   13,  105,  105,  105,
      105,  105,   14,  105,  104,  105,  105,  105,  105,  105,
      105,  105,  105,   24,   25,   26,  105,  105,   60,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  102,   37,
      105,   38,  105,  105,  105,  105,   65,  105,  105,  105,
      105,   45,  105,  105,  105,   48,  105,  105,  105,  105,
      105,   92,  105,    5,   95,  105,  105,  105,  104,  105,
      105,  105,   12,   98,  105,  105,  100,  105,  105,   16,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,   96,  105,  105,  105,
      105,   36,  105,  105,  105,   39,  105,   41,   42,   44,
       43,  105,   47,   93,  105,  105,   99,    4,  105,  105,
       50,    6,  105,  104,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   91,  105,  105,   23,  105,
      105,  105,  105,  105,  105,  105,  105,  105,   62,  105,
      105,  105,  105,  105,  105,  105,  105,   46,  105,  105,
      105,  105,  105,  104,  105,  105,   11,   52,  105,  105,
       55,  105,  105,  105,  105,   21,  105,  105,  105,  105,

      105,   27,  105,   31,  105,  105,  105,  103,  105,   35,
      105,  105,  105,  101,  105,  105,  105,   97,  105,  105,
      104,  105,  105,   53,  105,  105,  105,  105,  105,   86,
      105,   58,   90,  105,  105,  105,   33,  105,  105,  105,
      105,  105,  105,  105,    1,   87,  105,  104,  105,  105,
      105,   15,  105,  105,  105,  105,   94,   29,  105,   61,
      105,  105,   88,   89,  105,  105,  105,  104,    8,  105,
      105,  105,   20,  105,   22,   32,  105,  105,   64,  105,
        7,  104,  105,  105,  105,  105,  105,  105,  105,  104,
      105,  105,  105,  105,   34,  105,  105,  104,  105,   54,

      105,  105,  105,  105,  104,   51,  105,  105,  105,  105,
      104,   18,   56,   63,  105,  104,  105,  104,  105,  104,
      105,  104,  105,  104,  105,  104,  105,  104,  105,  104,
      105,  104,  105,  104,  105,  104,  105,  104,  105,  104,
      105,  104,  105,  104,  105,  104,  105,  104,  105,  104,
      105,  104,  104,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    3,    1,    4,    5,
        6,    7,    8,    9,   10,    1,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,   15,   16,   17,
       18,   19,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,    1,   47,    1,   36,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   36,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    2,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static const flex_int16_t yy_base[487] =
    {   0,
        0,    0,  753, 1408,  663, 1408, 1408, 1408, 1408, 1408,
      638, 1408, 1408, 1408,  536, 1408,   55, 1408,  363,   54,
       52,   74,  114,   50,   50,  100,    0,  157,   79,   48,
       98,  202,  110,  119,  145,  246,  155,   68,  174,   63,
     1408, 1408,  353, 1408, 1408, 1408, 1408, 1408,    0,  108,
       98,  114,   99,  129,  130,  140,  161,  155,  166,  154,
      253,  165,  297,  203,  194,  210,  225,  223,  221,  163,
      256,    0,  243,  301,    0,  265,  278,  272,  288,  282,
      225,  287,    0,    0,  294,    0,  264,  304,  308,  315,
      344,  319,  346,  325,  297,  350,  348,  305,  312,  340,

      345,  356,  351,  362,  354,  358,  361,    0,  357,    0,
      379,    0,  373,  372,  380,  383,  387,  380,  383,  385,
      407,  389,  393,    0,  403,  413,    0,  406,  416,  408,
      419,  427,    0,  427,  453,  421,  430,  406,  427,  443,
      436,  422,  436,    0,    0,    0,  450,  441,    0,  454,
      463,  453,  462,  460,  463,  473,  465,  475,    0,    0,
      466,    0,  470,  478,  475,  486,    0,  487,  475,  478,
      489,    0,  492,  504,  509,    0,    0,  502,  491,  504,
      516,    0,  514,    0,    0,  506,  506,  509,  524,  509,
      525,  516,    0,    0,  521,  527,    0,  526,  527,  566,

      543,  532,  546,  546,  339,  561,  552,  568,  571,  579,
      583,  582,  584,  540,  585,  586,    0,  560,  573,  594,
      578,    0,  580,  590,  590,    0,  606,    0,    0,    0,
        0,  606,    0,    0,    0,  593,    0,    0,  615,  608,
        0,    0,  603,  627,  622,  614,  614,  613,  618,  636,
      631,  630,  639,  648,  647,    0,  649,  649,    0,  640,
      649,  651,  649,  652,  663,  671,  677,  663,    0,  675,
      666,  666,  669,  680,  681,  685,  689,    0,    0,  677,
      684,  699,  698,  718,  684,  685,    0,    0,  690,  684,
        0,  687,  707,  695,  704,    0,  701,  722,  710,  719,

      723,    0,  728,    0,  724,  734,  729,    0,  737,    0,
      751,  742,  743,    0,  737,    0,  755,    0,  751,  747,
      783,  754,  768,    0,  773,  763,  764,  774,  772,    0,
      780,    0,    0,  785,  777,  778,    0,  775,  789,  799,
      788,  790,  811,    0,    0,    0,  798,  824,  798,  801,
      804,    0,  805,  810,  810,  824,    0,    0,  829,    0,
      817,  826,    0,    0,  829,    0,  830,  869,    0,  843,
      844,  853,    0,  854,    0,    0,  855,  840,    0,    0,
        0,  887,  863,  854,  846,  848,  865,  870,    0,  916,
      877,  871,  881,  890,    0,  891,    0,  934,  900,    0,

      894,  896,  900,    0,  953,    0,  903,  930,  939,    0,
      971,    0,    0,    0,    0,  990,    0, 1008,    0, 1027,
        0, 1045,    0, 1064,    0, 1082,    0, 1101,    0, 1119,
        0, 1138,    0, 1156,    0, 1175,    0, 1193,    0, 1212,
        0, 1230,    0, 1249,    0, 1267,    0, 1286,    0, 1304,
     1408, 1323, 1341, 1408,  335,  310,  298,  294,  291,  287,
      255,  251,  250,  247,  246,  244,  241,  236,  226,  210,
      205,  161,  159,  155,  148,  143,  142,  100,   98,   96,
       93,   87,   83,   78,   77,   75
    } ;

static const flex_int16_t yy_def[487] =
    {   0,
      454,    1,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  455,
      455,  455,  455,  455,  455,   23,  455,   23,  455,  455,
      455,   28,  455,  455,  455,   23,  455,  455,  455,  455,
      454,  454,  454,  454,  454,  454,  454,  454,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,   63,  456,  456,  456,  456,  456,  456,
       63,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,   63,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,

      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  465,  465,
      465,  465,  465,  465,  465,  465,  466,  466,  466,  466,

      466,  466,  466,  467,  467,  467,  467,  467,  467,  468,
      468,  468,  468,  468,  469,  469,  470,  470,  471,  471,
      472,  472,  473,  473,  474,  474,  475,  475,  476,  476,
      477,  477,  478,  478,  479,  479,  480,  480,  481,  481,
      482,  482,  483,  483,  484,  484,  485,  485,  486,  486,
      454,  454,  454,    0,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454
    } ;

static const flex_int16_t yy_nxt[1481] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,    4,    4,    4,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   40,   27,   27,   41,   42,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   27,   27,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       27,   27,   46,   47,   50,   54,  451,   68,  449,  447,
       65,   79,   66,   69,  445,   55,   51,  103,  443,   70,
       52,   53,   67,   57,  441,   56,  107,  439,   76,  437,

       58,  435,   50,   54,   59,   68,   77,   60,   65,   79,
       66,   69,   78,   55,   51,  103,   70,   52,   53,   67,
      110,   57,   56,   49,  107,   80,   76,   61,   58,   88,
      112,   81,   59,   71,   77,   60,   61,   62,   90,   61,
       78,   63,   91,  433,  431,  109,   89,   64,  110,  429,
      111,   49,   61,   80,  113,   61,  427,   88,  112,   81,
      425,   71,  423,  114,   61,   62,   90,   61,   92,   63,
       91,   93,  109,   89,  118,   64,   94,  111,  115,   61,
       49,   72,  113,   95,   61,  119,  120,  100,   73,   74,
       61,  114,  101,  102,   75,  134,   92,  116,  117,   93,

      104,  105,  118,  122,   94,  115,  421,  106,   49,   72,
       95,  419,   61,  119,  120,  100,   73,   74,   61,  101,
      102,   75,   82,  134,  116,  117,   83,  417,  104,  105,
      122,  126,  127,   49,   84,  106,   85,  415,   86,   49,
      108,   87,  410,  108,  125,  404,  129,  397,  389,  128,
       82,  380,  366,  131,   83,  132,  344,  133,  126,  130,
      127,   49,   84,  146,   85,   86,   49,  108,   87,   49,
      108,  125,   96,   61,  129,  121,  128,  136,  121,   97,
      121,  131,   98,  132,  133,  141,  121,  130,  316,   99,
      146,  121,  279,  108,  135,  235,  108,   49,  142,  177,

       96,   61,  149,  121,  143,  136,  121,   97,  121,   98,
      144,  108,  145,  141,  121,  147,   99,  148,  121,  121,
      108,  135,  121,  108,  121,  150,  142,  137,  138,  149,
      121,  139,  143,  164,  123,  121,   49,  124,  144,  140,
      145,  151,  152,  147,  163,  148,  168,  121,  167,  158,
      121,  256,  121,  150,   43,  137,  138,  159,  121,  139,
      164,  123,  121,  153,  124,  154,  140,  169,  170,  151,
      152,  155,  163,  165,  168,  167,  160,  158,  156,  161,
       48,  157,  162,  171,  159,  108,  166,  172,  108,  173,
      178,  153,  174,  154,  175,  169,  170,  176,  179,  155,

      180,  165,  181,  182,  160,  183,  156,  161,  157,  162,
      184,  171,  108,  166,  172,  108,  185,  173,  178,  174,
      186,  175,  187,  188,  176,  190,  179,  191,  180,  189,
      181,  182,  189,  183,  189,  192,  193,  194,  184,  195,
      189,  196,  197,  185,  203,  189,  198,  186,  199,  187,
      188,  201,  190,  202,  204,  191,  205,  189,  208,  207,
      189,  209,  189,  192,  193,  194,  206,  195,  189,  196,
      197,  203,  189,  210,  198,  189,  199,  211,  189,  201,
      189,  202,  204,  212,  213,  208,  200,  207,  214,  209,
      216,  189,  217,  218,  206,  219,  220,  215,  221,  222,

      224,  210,  223,  189,  211,  225,  189,  226,  189,  227,
      228,  212,  213,  229,  200,  230,  214,  216,  189,  231,
      217,  218,  232,  219,  220,  215,  221,  222,  224,  223,
      233,  234,  236,  225,  237,  226,  238,  227,  228,  239,
      229,  240,  230,  241,  242,  243,  244,  231,  245,  244,
      232,  244,  246,   45,  247,  248,  250,  244,  233,  234,
      236,  237,  244,  249,  238,  251,  252,  239,  253,  240,
      241,  242,  243,  254,  244,  245,  267,  244,  255,  244,
      246,  247,  259,  248,  250,  244,  257,  260,  244,  244,
      249,  244,  251,  244,  252,  253,  270,  258,  261,  244,

      263,  254,  264,  267,  244,  265,  255,  266,  268,  269,
      259,  271,  262,  272,  257,  260,  244,  273,  274,  244,
      275,  244,  276,  270,  258,  277,  261,  244,  263,  278,
      264,  244,  280,  265,  281,  266,  268,  269,  271,  262,
      282,  272,  283,  285,  273,  274,  286,  287,  275,  284,
      276,  288,  284,  277,  284,   44,  289,  278,  292,  280,
      284,  293,  281,  290,   43,  284,  294,  295,  282,  283,
      296,  285,  297,  298,  286,  287,  299,  284,  288,  291,
      284,  300,  284,  289,  301,  304,  292,  302,  284,  293,
      303,  290,  284,  305,  294,  295,  306,  308,  296,  307,

      297,  298,  309,  299,  310,  311,  291,  312,  313,  300,
      314,  315,  301,  304,  302,  317,  318,  303,  319,  320,
      326,  305,  322,  323,  306,  308,  307,  324,  325,  309,
      327,  310,  311,  328,  329,  312,  313,  330,  314,  315,
      321,  331,  317,  321,  318,  321,  319,  320,  326,  322,
      323,  321,  454,  332,  324,  325,  321,  333,  327,  334,
      328,  335,  329,  336,  330,  337,  454,  338,  321,  331,
      339,  321,  340,  321,  341,  342,  454,  343,  345,  321,
      332,  346,  454,  321,  333,  347,  334,  349,  454,  335,
      336,  350,  351,  337,  338,  352,  353,  354,  339,  355,

      340,  356,  341,  342,  343,  348,  345,  357,  348,  346,
      348,  361,  347,  358,  359,  349,  348,  454,  360,  350,
      351,  348,  362,  352,  353,  354,  363,  355,  364,  356,
      365,  367,  373,  348,  369,  357,  348,  370,  348,  361,
      358,  359,  371,  372,  348,  360,  368,  375,  348,  368,
      362,  368,  376,  363,  374,  364,  377,  368,  365,  367,
      373,  369,  368,  378,  370,  379,  381,  383,  454,  371,
      372,  384,  385,  386,  368,  375,  387,  368,  388,  368,
      376,  374,  391,  377,  393,  368,  394,  392,  395,  368,
      378,  382,  379,  381,  382,  383,  382,  454,  399,  384,

      385,  386,  382,  400,  387,  388,  396,  382,  401,  390,
      391,  393,  390,  394,  390,  392,  395,  402,  403,  382,
      390,  454,  382,  406,  382,  390,  399,  407,  454,  408,
      382,  400,  409,  396,  382,  412,  401,  390,  398,  454,
      390,  398,  390,  398,  454,  402,  403,  454,  390,  398,
      454,  406,  390,  454,  398,  407,  405,  408,  454,  405,
      409,  405,  413,  412,  414,  454,  398,  405,  454,  398,
      454,  398,  405,  454,  454,  411,  454,  398,  411,  454,
      411,  398,  454,  454,  405,  454,  411,  405,  454,  405,
      413,  411,  414,  416,  454,  405,  416,  454,  416,  405,

      454,  454,  454,  411,  416,  454,  411,  454,  411,  416,
      454,  454,  418,  454,  411,  418,  454,  418,  411,  454,
      454,  416,  454,  418,  416,  454,  416,  454,  418,  454,
      420,  454,  416,  420,  454,  420,  416,  454,  454,  454,
      418,  420,  454,  418,  454,  418,  420,  454,  454,  422,
      454,  418,  422,  454,  422,  418,  454,  454,  420,  454,
      422,  420,  454,  420,  454,  422,  454,  424,  454,  420,
      424,  454,  424,  420,  454,  454,  454,  422,  424,  454,
      422,  454,  422,  424,  454,  454,  426,  454,  422,  426,
      454,  426,  422,  454,  454,  424,  454,  426,  424,  454,

      424,  454,  426,  454,  428,  454,  424,  428,  454,  428,
      424,  454,  454,  454,  426,  428,  454,  426,  454,  426,
      428,  454,  454,  430,  454,  426,  430,  454,  430,  426,
      454,  454,  428,  454,  430,  428,  454,  428,  454,  430,
      454,  432,  454,  428,  432,  454,  432,  428,  454,  454,
      454,  430,  432,  454,  430,  454,  430,  432,  454,  454,
      434,  454,  430,  434,  454,  434,  430,  454,  454,  432,
      454,  434,  432,  454,  432,  454,  434,  454,  436,  454,
      432,  436,  454,  436,  432,  454,  454,  454,  434,  436,
      454,  434,  454,  434,  436,  454,  454,  438,  454,  434,

      438,  454,  438,  434,  454,  454,  436,  454,  438,  436,
      454,  436,  454,  438,  454,  440,  454,  436,  440,  454,
      440,  436,  454,  454,  454,  438,  440,  454,  438,  454,
      438,  440,  454,  454,  442,  454,  438,  442,  454,  442,
      438,  454,  454,  440,  454,  442,  440,  454,  440,  454,
      442,  454,  444,  454,  440,  444,  454,  444,  440,  454,
      454,  454,  442,  444,  454,  442,  454,  442,  444,  454,
      454,  446,  454,  442,  446,  454,  446,  442,  454,  454,
      444,  454,  446,  444,  454,  444,  454,  446,  454,  448,
      454,  444,  448,  454,  448,  444,  454,  454,  454,  446,

      448,  454,  446,  454,  446,  448,  454,  454,  450,  454,
      446,  450,  454,  450,  446,  454,  454,  448,  454,  450,
      448,  454,  448,  454,  450,  454,  452,  454,  448,  452,
      454,  452,  448,  454,  454,  454,  450,  452,  454,  450,
      454,  450,  452,  454,  454,  453,  454,  450,  453,  454,
      453,  450,  454,  454,  452,  454,  453,  452,  454,  452,
      454,  453,  454,  453,  454,  452,  453,  454,  453,  452,
      454,  454,  454,  453,  453,  454,  453,  454,  453,  453,
      454,  454,  454,  454,  453,  454,  454,  454,  453,  454,
      454,  453,  454,  454,  453,  454,  453,  454,  454,  454,

      454,  454,  453,  454,  454,  454,  453,    3,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454
    } ;

static const flex_int16_t yy_chk[1481] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   17,   17,   20,   21,  486,   25,  485,  484,
       24,   30,   24,   25,  483,   21,   20,   38,  482,   25,
       20,   20,   24,   22,  481,   21,   40,  480,   29,  479,

       22,  478,   20,   21,   22,   25,   29,   22,   24,   30,
       24,   25,   29,   21,   20,   38,   25,   20,   20,   24,
       51,   22,   21,   26,   40,   31,   29,   26,   22,   33,
       53,   31,   22,   26,   29,   22,   23,   23,   34,   23,
       29,   23,   34,  477,  476,   50,   33,   23,   51,  475,
       52,   26,   23,   31,   54,   26,  474,   33,   53,   31,
      473,   26,  472,   55,   23,   23,   34,   23,   35,   23,
       34,   35,   50,   33,   58,   23,   35,   52,   56,   23,
       28,   28,   54,   35,   28,   59,   60,   37,   28,   28,
       28,   55,   37,   37,   28,   70,   35,   57,   57,   35,

       39,   39,   58,   62,   35,   56,  471,   39,   28,   28,
       35,  470,   28,   59,   60,   37,   28,   28,   28,   37,
       37,   28,   32,   70,   57,   57,   32,  469,   39,   39,
       62,   65,   66,   32,   32,   39,   32,  468,   32,   32,
       64,   32,  467,   64,   64,  466,   67,  465,  464,   66,
       32,  463,  462,   68,   32,   68,  461,   69,   65,   67,
       66,   32,   32,   81,   32,   32,   32,   64,   32,   36,
       64,   64,   36,   36,   67,   61,   66,   73,   61,   36,
       61,   68,   36,   68,   69,   76,   61,   67,  460,   36,
       81,   61,  459,   71,   71,  458,   71,   36,   77,  457,

       36,   36,   87,   61,   78,   73,   61,   36,   61,   36,
       79,  456,   80,   76,   61,   82,   36,   85,   61,   63,
       71,   71,   63,   71,   63,   88,   77,   74,   74,   87,
       63,   74,   78,   95,   63,   63,  455,   63,   79,   74,
       80,   89,   90,   82,   94,   85,   99,   63,   98,   92,
       63,  205,   63,   88,   43,   74,   74,   92,   63,   74,
       95,   63,   63,   91,   63,   91,   74,  100,  101,   89,
       90,   91,   94,   96,   99,   98,   93,   92,   91,   93,
       19,   91,   93,  102,   92,   97,   96,  103,   97,  104,
      109,   91,  105,   91,  106,  100,  101,  107,  111,   91,

      113,   96,  114,  115,   93,  116,   91,   93,   91,   93,
      117,  102,   97,   96,  103,   97,  118,  104,  109,  105,
      119,  106,  120,  120,  107,  122,  111,  123,  113,  121,
      114,  115,  121,  116,  121,  125,  126,  128,  117,  129,
      121,  130,  131,  118,  138,  121,  132,  119,  134,  120,
      120,  136,  122,  137,  139,  123,  140,  121,  142,  141,
      121,  143,  121,  125,  126,  128,  140,  129,  121,  130,
      131,  138,  121,  147,  132,  135,  134,  148,  135,  136,
      135,  137,  139,  150,  151,  142,  135,  141,  151,  143,
      152,  135,  153,  154,  140,  155,  156,  151,  157,  158,

      163,  147,  161,  135,  148,  164,  135,  165,  135,  166,
      168,  150,  151,  169,  135,  170,  151,  152,  135,  171,
      153,  154,  173,  155,  156,  151,  157,  158,  163,  161,
      174,  175,  178,  164,  179,  165,  180,  166,  168,  181,
      169,  183,  170,  186,  187,  188,  189,  171,  190,  189,
      173,  189,  191,   15,  192,  195,  198,  189,  174,  175,
      178,  179,  189,  196,  180,  199,  201,  181,  202,  183,
      186,  187,  188,  203,  189,  190,  214,  189,  204,  189,
      191,  192,  207,  195,  198,  189,  206,  208,  200,  189,
      196,  200,  199,  200,  201,  202,  218,  206,  209,  200,

      210,  203,  211,  214,  200,  212,  204,  213,  215,  216,
      207,  219,  209,  220,  206,  208,  200,  221,  223,  200,
      224,  200,  225,  218,  206,  227,  209,  200,  210,  232,
      211,  200,  236,  212,  239,  213,  215,  216,  219,  209,
      240,  220,  243,  245,  221,  223,  246,  247,  224,  244,
      225,  248,  244,  227,  244,   11,  249,  232,  251,  236,
      244,  252,  239,  250,    5,  244,  253,  254,  240,  243,
      255,  245,  257,  258,  246,  247,  260,  244,  248,  250,
      244,  261,  244,  249,  262,  265,  251,  263,  244,  252,
      264,  250,  244,  266,  253,  254,  267,  270,  255,  268,

      257,  258,  271,  260,  272,  273,  250,  274,  275,  261,
      276,  277,  262,  265,  263,  280,  281,  264,  282,  283,
      292,  266,  285,  286,  267,  270,  268,  289,  290,  271,
      293,  272,  273,  294,  295,  274,  275,  297,  276,  277,
      284,  298,  280,  284,  281,  284,  282,  283,  292,  285,
      286,  284,    3,  299,  289,  290,  284,  300,  293,  301,
      294,  303,  295,  305,  297,  306,    0,  307,  284,  298,
      309,  284,  311,  284,  312,  313,    0,  315,  317,  284,
      299,  319,    0,  284,  300,  320,  301,  322,    0,  303,
      305,  323,  325,  306,  307,  326,  327,  328,  309,  329,

      311,  331,  312,  313,  315,  321,  317,  334,  321,  319,
      321,  339,  320,  335,  336,  322,  321,    0,  338,  323,
      325,  321,  340,  326,  327,  328,  341,  329,  342,  331,
      343,  347,  354,  321,  349,  334,  321,  350,  321,  339,
      335,  336,  351,  353,  321,  338,  348,  356,  321,  348,
      340,  348,  359,  341,  355,  342,  361,  348,  343,  347,
      354,  349,  348,  362,  350,  365,  367,  370,    0,  351,
      353,  371,  372,  374,  348,  356,  377,  348,  378,  348,
      359,  355,  383,  361,  385,  348,  386,  384,  387,  348,
      362,  368,  365,  367,  368,  370,  368,    0,  391,  371,

      372,  374,  368,  392,  377,  378,  388,  368,  393,  382,
      383,  385,  382,  386,  382,  384,  387,  394,  396,  368,
      382,    0,  368,  399,  368,  382,  391,  401,    0,  402,
      368,  392,  403,  388,  368,  407,  393,  382,  390,    0,
      382,  390,  382,  390,    0,  394,  396,    0,  382,  390,
        0,  399,  382,    0,  390,  401,  398,  402,    0,  398,
      403,  398,  408,  407,  409,    0,  390,  398,    0,  390,
        0,  390,  398,    0,    0,  405,    0,  390,  405,    0,
      405,  390,    0,    0,  398,    0,  405,  398,    0,  398,
      408,  405,  409,  411,    0,  398,  411,    0,  411,  398,

        0,    0,    0,  405,  411,    0,  405,    0,  405,  411,
        0,    0,  416,    0,  405,  416,    0,  416,  405,    0,
        0,  411,    0,  416,  411,    0,  411,    0,  416,    0,
      418,    0,  411,  418,    0,  418,  411,    0,    0,    0,
      416,  418,    0,  416,    0,  416,  418,    0,    0,  420,
        0,  416,  420,    0,  420,  416,    0,    0,  418,    0,
      420,  418,    0,  418,    0,  420,    0,  422,    0,  418,
      422,    0,  422,  418,    0,    0,    0,  420,  422,    0,
      420,    0,  420,  422,    0,    0,  424,    0,  420,  424,
        0,  424,  420,    0,    0,  422,    0,  424,  422,    0,

      422,    0,  424,    0,  426,    0,  422,  426,    0,  426,
      422,    0,    0,    0,  424,  426,    0,  424,    0,  424,
      426,    0,    0,  428,    0,  424,  428,    0,  428,  424,
        0,    0,  426,    0,  428,  426,    0,  426,    0,  428,
        0,  430,    0,  426,  430,    0,  430,  426,    0,    0,
        0,  428,  430,    0,  428,    0,  428,  430,    0,    0,
      432,    0,  428,  432,    0,  432,  428,    0,    0,  430,
        0,  432,  430,    0,  430,    0,  432,    0,  434,    0,
      430,  434,    0,  434,  430,    0,    0,    0,  432,  434,
        0,  432,    0,  432,  434,    0,    0,  436,    0,  432,

      436,    0,  436,  432,    0,    0,  434,    0,  436,  434,
        0,  434,    0,  436,    0,  438,    0,  434,  438,    0,
      438,  434,    0,    0,    0,  436,  438,    0,  436,    0,
      436,  438,    0,    0,  440,    0,  436,  440,    0,  440,
      436,    0,    0,  438,    0,  440,  438,    0,  438,    0,
      440,    0,  442,    0,  438,  442,    0,  442,  438,    0,
        0,    0,  440,  442,    0,  440,    0,  440,  442,    0,
        0,  444,    0,  440,  444,    0,  444,  440,    0,    0,
      442,    0,  444,  442,    0,  442,    0,  444,    0,  446,
        0,  442,  446,    0,  446,  442,    0,    0,    0,  444,

      446,    0,  444,    0,  444,  446,    0,    0,  448,    0,
      444,  448,    0,  448,  444,    0,    0,  446,    0,  448,
      446,    0,  446,    0,  448,    0,  450,    0,  446,  450,
        0,  450,  446,    0,    0,    0,  448,  450,    0,  448,
        0,  448,  450,    0,    0,  452,    0,  448,  452,    0,
      452,  448,    0,    0,  450,    0,  452,  450,    0,  450,
        0,  452,    0,  453,    0,  450,  453,    0,  453,  450,
        0,    0,    0,  452,  453,    0,  452,    0,  452,  453,
        0,    0,    0,    0,  452,    0,    0,    0,  452,    0,
        0,  453,    0,    0,  453,    0,  453,    0,    0,    0,

        0,    0,  453,    0,    0,    0,  453,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[108] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexico.l"
#line 2 "lexico.l"
#include <stdio.h>
#include "Token.h"
#include <stdlib.h>

using namespace std;

extern string* pStr;
extern void GetToken(string lexema, Token_type tipo, int linea);
#line 917 "Scanner.cpp"
/*PASCAL RESEVED WORDS*/
/*Object Reserved Words*/
/*   -- END OF RSVW --    */
/*Arithmetic Operators*/
/*  -- Relational Operators -- */
/* -- END OF OPRT --*/
/*SINTAX SYMBOLS*/
/*  -- END OF SYNTX -- */
/* DATA TYPES  */
/* -- END OF DATA TYPES  --*/
#line 928 "Scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 170 "lexico.l"


#line 1063 "Scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 455 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1408 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 172 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 173 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 175 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 176 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 177 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 178 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);      
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 179 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 180 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 181 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 182 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 183 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 184 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 185 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 188 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 189 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 190 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 191 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 192 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 193 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 194 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 195 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 196 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 197 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 198 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 199 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 200 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 202 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 203 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 204 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 205 "lexico.l"
GetToken(yytext,RSVWORD,yylineno); 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 206 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 207 "lexico.l"
GetToken(yytext,RSVWORD,yylineno); 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 208 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 210 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 211 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 212 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 214 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 215 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 218 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 219 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 220 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 221 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 222 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 223 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 224 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 225 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 226 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 227 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 230 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);  
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 231 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 232 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 233 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 234 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 236 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 237 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 238 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 239 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 241 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 242 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 243 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 244 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 246 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 247 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 248 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 249 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 253 "lexico.l"
GetToken(yytext,OPRT,yylineno);         
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 254 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 255 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 256 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 257 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 258 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 259 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 260 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 261 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 262 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 263 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 264 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 265 "lexico.l"
GetToken(yytext,OPRT,yylineno);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 269 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 270 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 271 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 272 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 273 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 274 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 275 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 278 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);   
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 279 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 280 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 281 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 282 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 283 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 284 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 285 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 286 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 288 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 289 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 290 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 291 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 293 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 294 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 295 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 296 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 297 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 300 "lexico.l"
GetToken(yytext,INTEGER,yylineno);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 301 "lexico.l"
GetToken(yytext,IDENTIFIER,yylineno);
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 302 "lexico.l"
GetToken(yytext,EMPTYSPC,yylineno);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 303 "lexico.l"
ECHO;
	YY_BREAK
#line 1666 "Scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 455 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 455 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 454);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 303 "lexico.l"



