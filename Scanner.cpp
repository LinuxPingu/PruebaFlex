#line 2 "Scanner.cpp"

#line 4 "Scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 101
#define YY_END_OF_BUFFER 102
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[534] =
    {   0,
        0,    0,  102,  101,   97,   98,  101,   66,   72,   68,
       69,   66,   73,   93,  101,   74,   66,   66,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   70,
       71,   97,   98,    0,   99,    0,   66,    0,    0,    0,
        0,   94,    0,    0,    0,   96,   96,   96,   96,   49,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   10,
       96,   96,   96,   96,   96,   96,   96,   17,   96,   19,
       57,   96,   96,   96,   96,   96,   96,   96,   28,   59,
       96,   30,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   40,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,    0,    0,    0,    0,    0,    0,    0,
        0,   67,   67,   95,   96,   96,    2,   96,    3,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,    9,
       96,   96,   13,   96,   96,   96,   96,   96,   14,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   24,
       25,   26,   96,   96,   60,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   91,   37,   96,   38,   96,   96,
       96,   96,   65,   96,   96,   96,   96,   45,   96,   96,
       96,   48,    0,    0,   67,    0,    0,    0,    0,    0,

        0,    0,    0,   67,   96,   96,   96,   96,   96,   81,
       96,    5,   84,   96,   96,   96,   96,   96,   96,   12,
       87,   96,   96,   89,   96,   96,   16,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   85,   96,   96,   96,   96,   36,   96,
       96,   96,   39,   96,   41,   42,   44,   43,   96,   47,
       82,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   67,   67,   96,   96,   88,    4,   96,   96,   50,
        6,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   80,   96,   96,   23,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   62,   96,   96,   96,
       96,   96,   96,   96,   96,   46,    0,    0,    0,    0,
        0,    0,  100,    0,   67,   96,   96,   96,   96,   96,
       96,   96,   11,   52,   96,   96,   55,   96,   96,   96,
       96,   21,   96,   96,   96,   96,   96,   27,   96,   31,
       96,   96,   96,   92,   96,   35,   96,   96,   96,   90,
       96,    0,    0,   67,   96,   96,   86,   96,   96,   96,
       96,   53,   96,   96,   96,   96,   96,   75,   96,   58,
       79,   96,   96,   96,   33,   96,   96,   96,   96,   96,
       96,    0,   67,   96,    1,   76,   96,   96,   96,   96,

       15,   96,   96,   96,   96,   83,   29,   96,   61,   96,
       96,   77,   78,   96,    0,   67,   96,   96,    8,   96,
       96,   96,   20,   96,   22,   32,   96,   96,   64,    0,
       67,   96,    7,   96,   96,   96,   96,   96,   96,    0,
       67,   96,   96,   96,   96,   96,   34,   96,    0,   67,
       96,   96,   54,   96,   96,   96,    0,   67,   96,   51,
       96,   96,   96,    0,   67,   96,   18,   56,   63,    0,
       67,   96,    0,   67,   96,    0,   67,   96,    0,   67,
       96,    0,   67,   96,    0,   67,   96,    0,   67,   96,
        0,   67,   96,    0,   67,   96,    0,   67,   96,    0,

       67,   96,    0,   67,   96,    0,   67,   96,    0,   67,
       96,    0,   67,   96,    0,   67,   96,    0,   67,   96,
        0,   67,   96,    0,   67,   96,    0,   67,    0,   67,
        0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   16,   15,   17,   15,   15,   15,   18,   19,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,    1,   50,    1,   39,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   39,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    4,    1,    1,    5,    5,
        1,    5,    1,    5,    2,    2,    2,    5,    6,    5,
        5,    5,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[638] =
    {   0,
        0,    0,  224, 9341,  220,  217,  214, 9341,  208, 9341,
     9341,  191, 9341,   74,  189, 9341,   56,  183,   95,  162,
      214,   75,  262,   96,   91,  131,  310,  164,  161,  166,
      361,  216,  227,  405,  267,  351,  268,  379,  266, 9341,
     9341,  190,  187,  177,  350,  173, 9341,  471,  243,  480,
       65,    0,  148,  496,  504,  521,  542,  609,  662,  728,
      790,  846,  910,  978,  354,  410,  166,  508,  517,  525,
       58,  313,  549,  572,  244,  531,  584,  447,  619, 1017,
      601,  621,  625,  654,  685,  694,  703,  638,  656,  691,
      714,  726,  738,  748,  777,  782, 1064,  812,  835,  850,

      757,  858,  794,  867,  898,  902,  917,  909,  837,  914,
      953,  907,  961,  439, 1009,  124, 1048, 1076,  697,  140,
      136, 1131, 1098,  137, 1152, 1173, 1187, 1237, 1209, 1287,
     1345, 1406, 1460, 1513, 1567, 1633, 1700,  964, 1030,  966,
     1184, 1087,  968, 1193, 1195,  975, 1243, 1135, 1175, 1253,
     1235, 1283, 1293, 1199, 1301, 1341, 1344, 1333, 1245, 1335,
     1353, 1388, 1390, 1399, 1395, 1442, 1460, 1408, 1496, 1451,
     1506, 1525, 1541, 1556, 1549, 1554, 1559, 1561, 1598, 1617,
     1620, 1622, 1627, 1638, 1629, 1631, 1682, 1662, 1685, 1687,
     1707, 1694, 1324,  133, 1541,  123, 1768, 1777, 1793,  313,

      100, 1796, 1817, 1834, 1848, 1869, 1930, 2003, 2066, 1890,
     2120, 1904, 1944, 2178, 2245, 2313, 2379, 2448, 2506, 1958,
     1979, 2574, 2639, 2024, 2705, 2766, 2038, 2834, 2888, 2954,
     3012, 2080, 3075,  465, 1963, 2078,  580, 2076, 1054, 1888,
      707, 2024, 2099, 1131, 1324, 2107, 2138, 1717, 1385, 2115,
     1579, 2157, 1890, 2178, 2091, 2173, 2175, 2177, 2182, 2191,
     2212, 1825, 2268,   93, 2276, 2284, 2304,  107,  102, 2095,
       91,  449, 2327, 2349, 3141, 2393, 2407, 3210, 3260, 2421,
     2462, 3323, 3392, 3444, 3507, 3571, 3639, 3707,  101, 1814,
      126,  522, 1963,  812, 2313, 2447, 1091, 1465, 2455, 2373,

     2491, 2492, 2478, 2515, 2414, 2523, 1928, 2546, 2540, 2595,
     2571, 2179, 2377, 2572, 2596, 2616, 2360,   97,  101,   79,
      122,  333, 9341,  175, 2671, 2726, 3780, 3848, 3911, 3961,
     4013, 4081, 2740, 2780, 4149, 4216, 2801, 4290, 4354, 4408,
     4476, 2848, 4537, 4603, 4653, 4726, 4794, 2862, 4860, 2902,
     4924, 4993, 5055, 2924, 5123, 2968, 5187, 5239, 5302, 2982,
     5365, 1264,  268, 3033, 3047, 5435, 3061, 5489, 5550, 5618,
     5682, 3089, 5736, 5786, 5849, 5912, 5966, 3115, 6024, 3155,
     3169, 6076, 6129, 6195, 3183, 6261, 6334, 6387, 6441, 6509,
     6577,  342, 3232, 3246, 3281, 3295, 6627, 6691, 6757, 6823,

     3309, 6891, 6959, 7012, 7086, 3337, 3351, 7140, 3365, 7194,
     7263, 3406, 3420, 7330,  389, 3465, 3479, 7396, 3493, 7462,
     7517, 7575, 3521, 7625, 3543, 3557, 7675, 7727, 3585,  456,
     3606, 3653, 3674, 7795, 7845, 7909, 7977, 8045, 8099,  488,
     3721, 3735, 8165, 8217, 8280, 8338, 3758, 8396,  527, 3794,
     3815, 8454, 3869, 8508, 8572, 8636,  536, 3883, 3897, 3933,
     8699, 8762, 8825,  584, 3947, 3975, 3989, 4027, 4048,  636,
     4095, 4116,  656, 4163, 4177,  689, 4191, 4230,  698, 4251,
     4265,  708, 4304, 4326,  749, 4340, 4368,  758, 4382, 4422,
      784, 4443, 4497,  807, 4511, 4551,  818, 4573, 4625,  819,

     4639, 4667,  838, 4681, 4702,  863, 4740, 4761,  868, 4808,
     4830,  887, 4874, 4896,  890, 4910, 4938,  891, 4952, 4966,
      927, 5015, 5029,  984, 5069, 5090,  995, 5137, 1036, 5159,
     1037, 1047, 9341, 8882, 8888, 8893, 8897, 8900, 8905, 8911,
     8916, 8920, 8924, 8927, 8931, 8936, 8942, 8947, 8952, 8956,
     8960, 8965, 8969, 8973, 8978, 8982, 8986, 8991, 8995, 8999,
     9004, 9008, 9012, 9017, 9021, 9025, 9030, 9034, 9038, 9043,
     9047, 9051, 9056, 9060, 9064, 9069, 9073, 9077, 9082, 9086,
     9090, 9095, 9099, 9103, 9108, 9112, 9116, 9121, 9125, 9129,
     9134, 9138, 9142, 9147, 9151, 9155, 9160, 9164, 9168, 9173,

     9177, 9181, 9186, 9190, 9194, 9199, 9203, 9207, 9212, 9216,
     9220, 9225, 9229, 9233, 9238, 9242, 9246, 9251, 9255, 9259,
     9264, 9268, 9272, 9277, 9281, 9285, 9290, 9294, 9298, 9303,
     9307, 9311, 9316, 9320, 9325, 9329, 9334
    } ;

static const flex_int16_t yy_def[638] =
    {   0,
      533,    1,  533,  533,  533,  533,  534,  533,  535,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  536,  536,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       27,   20,   20,   20,   20,   27,   20,   20,   20,  533,
      533,  533,  533,  534,  533,  535,  533,  533,  537,  537,
      533,   14,  533,  537,  537,  538,  538,  538,  538,  538,
      538,  538,  538,  538,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  537,  537,  533,  537,  537,  537,  539,
      540,  533,  541,   14,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  537,  539,  533,  540,  533,  543,  543,  533,

      533,  543,  543,  544,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  543,  543,  533,  543,  543,  543,  546,  547,  533,
      548,  122,  549,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,

      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  543,  546,  533,  547,
      533,  533,  533,  551,  552,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  533,  554,  555,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  557,  558,  559,  559,  559,  559,  559,  559,  559,

      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  560,  561,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  563,
      564,  565,  565,  565,  565,  565,  565,  565,  565,  566,
      567,  568,  568,  568,  568,  568,  568,  568,  569,  570,
      571,  571,  571,  571,  571,  571,  572,  573,  574,  574,
      574,  574,  574,  575,  576,  577,  577,  577,  577,  578,
      579,  580,  581,  582,  583,  584,  585,  586,  587,  588,
      589,  590,  591,  592,  593,  594,  595,  596,  597,  598,
      599,  600,  601,  602,  603,  604,  605,  606,  607,  608,

      609,  610,  611,  612,  613,  614,  615,  616,  617,  618,
      619,  620,  621,  622,  623,  624,  625,  626,  627,  628,
      629,  630,  631,  632,  633,  533,  634,  635,  636,  533,
      637,  533,    0,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533
    } ;

static const flex_int16_t yy_nxt[9417] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    8,   12,
       13,    8,    4,    8,   14,   14,   14,   15,   16,   17,
        8,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   26,   26,   28,   29,   30,   31,   32,   26,   33,
       34,   35,   36,   37,   38,   39,   26,   26,   40,   41,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   26,
       26,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   26,   26,   48,   47,   47,   49,  124,
      124,  124,   49,   50,  319,   49,   51,   49,   52,   52,
       52,   53,  321,   54,   49,   55,   48,  125,  142,   49,

      319,   68,  321,   49,   50,   69,   49,  319,   49,  323,
      319,   70,   53,  262,   54,   49,   55,   56,   57,  323,
      198,   56,   56,  321,  125,  142,   74,   77,  195,   68,
       58,  338,   75,   69,   59,   60,  195,   56,   76,   70,
      323,  195,   56,  195,  114,   56,   57,  326,   56,  533,
       56,  124,  124,  124,   74,   77,  340,   56,   58,  338,
       75,   59,   60,   48,   56,   76,   49,   56,   49,   56,
       49,   50,  326,   49,  326,   49,  321,   56,   45,   53,
       45,   54,   49,   55,  340,   56,   82,   56,   61,   43,
       56,   42,   56,  323,   83,   56,   86,   85,   62,  326,

       84,  137,   87,   47,   56,  125,  125,   56,   63,   47,
       56,   47,   56,   45,   82,   56,   61,   45,   56,   43,
       56,   42,   83,  533,   86,   85,   62,  533,   84,  137,
       87,  533,  125,  125,   56,   63,   64,   56,   94,   56,
       56,  533,   56,   65,  119,  533,  120,   66,  121,   96,
       67,  533,   56,   97,  533,   95,  533,  122,  122,  122,
       56,  533,   56,   56,   64,  533,   94,  533,   56,  321,
       56,   65,  533,   56,  533,   66,  533,   96,   67,  533,
       56,   97,   95,  149,  125,  533,  323,   56,   56,   56,
      109,   56,   56,   56,   56,   71,  102,   72,   56,  533,

       56,  533,  113,  103,   56,  533,  104,   73,   56,  533,
      149,  125,   56,  105,   56,  533,   56,  533,  109,  533,
       56,   56,   56,   71,  102,   72,   56,  272,  272,  272,
      113,  103,   56,  104,   73,   56,   56,   78,  143,   56,
      105,   56,  533,  321,   79,   80,   56,  362,  362,  362,
       81,   48,  125,  125,   49,  144,   56,  533,   49,   50,
      323,   49,  533,   49,   56,   78,  143,   53,  533,   54,
       49,   55,   79,   80,   56,  533,  135,   81,   56,  125,
      125,  533,  144,   56,   88,   56,  106,  533,   89,  533,
      321,  107,  108,  125,  125,   56,   90,  533,   91,  533,

       92,   56,  533,   93,  135,   56,   56,  323,  110,  111,
      533,  533,   88,   56,  106,  112,   89,  533,  107,  108,
      125,  125,  533,   56,   90,   56,   91,   92,   56,  533,
       93,   98,  136,   56,   99,  533,  110,  111,  533,  100,
      193,   56,  120,  112,  121,  533,  101,  533,  533,  125,
      125,   56,   56,  122,  122,  122,  533,  321,  533,   98,
      136,  533,   99,  272,  272,  272,  533,  100,  533,   56,
      533,  533,   48,  101,  323,  114,  125,  125,   56,  114,
      115,  119,  114,  120,  114,  121,  125,  125,  116,  321,
      117,  114,  118,  274,  122,  122,  122,  119,  297,  120,

       49,  121,  533,  533,  274,  119,  323,  120,  533,  121,
      122,  122,  122,  125,  125,  533,   49,   49,  122,  122,
      122,  274,   48,  533,   49,   49,  297,  533,  321,   49,
       50,  274,   49,  533,   49,  533,  533,  321,   53,  533,
       54,   49,   55,   48,  341,  323,   49,  125,  125,  138,
       49,   50,  326,   49,  323,   49,  125,  139,  533,   53,
      140,   54,   49,   55,  125,  125,  150,  533,  326,  141,
      125,  125,  341,  145,  125,  125,  138,  533,  533,  533,
      326,  533,  126,  125,  139,  321,  146,  140,  125,  125,
      533,  125,  125,  533,  150,  326,  141,  125,  125,  533,

      533,  145,  323,  533,  301,  147,  533,  148,  274,  126,
       48,  125,  125,   49,  146,  125,  125,   49,   50,  274,
       49,  533,   49,  125,  125,  151,   53,  533,   54,   49,
       55,  533,  301,  147,  127,  148,  274,  321,  125,  125,
      125,  125,  533,  533,  157,  533,  274,  533,  158,  533,
      125,  125,  151,  533,  323,  533,  152,  321,  125,  125,
      125,  125,  127,   48,  125,  125,   49,  125,  125,  163,
       49,   50,  157,   49,  323,   49,  158,  125,  125,   53,
      533,   54,   49,   55,  152,  125,  125,  125,  125,  159,
      321,  125,  125,  125,  125,  125,  125,  163,  119,  321,

      120,  128,  121,  533,  125,  125,  533,  323,  533,  321,
      160,  122,  122,  122,  533,  533,  323,  159,  533,  533,
      125,  125,  125,  125,  125,  125,  323,  161,  128,   48,
      125,  125,   49,  125,  125,  274,   49,   50,  160,   49,
      164,   49,  125,  125,  162,   53,  305,   54,   49,   55,
      321,  125,  125,  125,  125,  161,  533,  125,  125,  321,
      125,  125,  129,  274,  533,  125,  125,  323,  164,  125,
      125,  162,  166,  305,  533,  533,  323,  125,  125,  165,
      125,  125,  533,  533,  533,  321,  533,  125,  125,  533,
      129,   48,  125,  125,   49,  533,  180,  125,   49,   50,

      166,   49,  323,   49,  125,  125,  165,   53,  321,   54,
       49,   55,  168,  167,  125,  125,  125,  125,  130,  321,
      321,  125,  125,  180,  125,  323,  533,  533,  533,  533,
      533,  533,  533,  125,  125,  533,  323,  323,  533,  321,
      168,  167,  326,  125,  125,  174,  130,   48,  125,  125,
       49,  125,  125,  175,   49,   50,  323,   49,  326,   49,
      125,  125,  533,   53,  321,   54,   49,   55,  176,  321,
      326,  177,  179,  174,  178,  125,  188,  125,  125,  125,
      175,  323,  131,  533,  181,  326,  323,  533,  321,  125,
      125,  321,  321,  533,  533,  533,  176,  182,  125,  177,

      179,  178,  125,  188,  125,  323,  125,  125,  323,  323,
      131,   48,  181,  183,   49,  533,  125,  125,   49,   50,
      533,   49,  533,   49,  182,  125,  533,   53,  321,   54,
       49,   55,  185,  125,  125,  184,  533,  125,  125,  187,
      183,  125,  125,  186,  189,  323,  191,  125,  125,  125,
      533,  132,  533,  125,  125,  533,  125,  125,  533,  533,
      185,  533,  533,  184,  125,  125,  533,  187,  125,  125,
      533,  186,  189,  191,  125,  125,  125,  533,  132,   48,
      125,  125,   49,  125,  125,  321,   49,   50,  533,   49,
      533,   49,  125,  125,  190,   53,  321,   54,   49,   55,

      192,  125,  323,  217,  205,  205,  205,  205,  205,  205,
      193,  223,  120,  323,  121,  205,  205,  133,  134,  125,
      125,  190,  533,  122,  122,  122,  533,  192,  125,  114,
      217,  205,  205,  205,  205,  205,  205,  321,  321,  223,
      533,  533,  205,  205,  133,  134,  153,  154,  321,  193,
      155,  120,  533,  121,  323,  323,  125,  125,  156,  533,
      533,  533,  122,  122,  122,  323,  533,  218,  114,  114,
      205,  205,  533,  533,  153,  154,  533,  193,  155,  120,
      303,  121,  274,  125,  125,  156,  169,  533,  170,  533,
      122,  122,  122,  274,  171,  218,  114,  205,  205,  197,

      533,  172,  198,  125,  173,  533,  198,  199,  303,  198,
      274,  198,  533,  220,  169,  201,  170,  202,  198,  203,
      274,  326,  171,  533,  533,  533,  533,  205,  205,  172,
      125,  173,  197,  533,  533,  198,  533,  326,  533,  198,
      199,  220,  198,  200,  198,  122,  122,  122,  201,  326,
      202,  198,  203,   48,  205,  205,   49,  225,  533,  274,
       49,   50,  533,   49,  326,   49,  533,  533,  533,   53,
      274,   54,   49,   55,   48,  205,  205,   49,  533,  533,
      533,   49,   50,  533,   49,  225,   49,  274,   48,  533,
       53,   49,   54,   49,   55,   49,   50,  274,   49,  533,

       49,  533,  205,  205,   53,  533,   54,   49,   55,  206,
       48,  533,  533,   49,  533,  205,  205,   49,   50,  219,
       49,  222,   49,  533,  205,  205,   53,  221,   54,   49,
       55,  533,  533,  205,  205,  205,  205,  206,   48,  205,
      230,   49,  205,  205,  533,   49,   50,  219,   49,  222,
       49,  205,  205,  533,   53,  221,   54,   49,   55,  207,
      205,  205,  205,  205,  533,  321,  205,  230,  533,  224,
      533,  227,  533,  236,  533,  205,  205,  226,  362,  362,
      362,  533,  323,  205,  205,  205,  205,  207,   48,  533,
      533,   49,  533,  205,  205,   49,   50,  224,   49,  227,

       49,  236,  205,  205,   53,  226,   54,   49,   55,  533,
      205,  205,  205,  205,  533,  533,  228,  208,  533,  229,
      205,  205,  533,  205,  205,  193,  533,  120,  533,  121,
      533,  231,  533,  205,  205,  533,  533,  533,  122,  122,
      122,  205,  205,  533,  228,  208,   48,  229,  533,   49,
      205,  205,  274,   49,   50,  533,   49,  232,   49,  231,
      205,  205,   53,  308,   54,   49,   55,  233,  205,  205,
      234,  533,  235,  205,  205,  205,  205,  533,  209,  533,
      274,  205,  205,  533,  205,  205,  533,  533,  533,  533,
      308,  533,  533,  205,  205,  233,  533,  533,  234,  235,

      205,  205,  205,  205,  533,  533,  209,   48,  205,  205,
       49,  205,  205,  274,   49,   50,  237,   49,  533,   49,
      205,  205,  533,   53,  274,   54,   49,   55,  205,  205,
      205,  205,  210,  533,  533,  205,  205,  533,  238,  205,
      205,  274,  533,  533,  237,  533,  533,  533,  243,  205,
      533,  274,  533,  533,  533,  205,  205,  205,  205,  533,
      210,   48,  205,  205,   49,  238,  205,  205,   49,   50,
      533,   49,  533,   49,  239,  243,  205,   53,  533,   54,
       49,   55,  205,  205,  240,  211,  533,  245,  241,  533,
      533,  205,  205,  533,  533,  326,  533,  242,  533,  533,

      205,  205,  239,  533,  345,  533,  533,  533,  533,  205,
      205,  326,  240,  211,   48,  245,  241,   49,  205,  205,
      533,   49,   50,  326,   49,  242,   49,  205,  205,  244,
       53,  345,   54,   49,   55,  533,  205,  205,  326,  212,
      533,  246,  197,  533,  533,  198,  205,  205,  533,  198,
      199,  247,  198,  533,  198,  533,  533,  244,  201,  533,
      202,  198,  203,  205,  205,  205,  205,  212,   48,  246,
      533,   49,  533,  205,  205,   49,   50,  248,   49,  247,
       49,  205,  205,  249,   53,  533,   54,   49,   55,  205,
      205,  533,  205,  205,  205,  205,  205,  205,  250,  205,

      205,  205,  205,  533,  533,  248,  213,  274,  205,  205,
      533,  249,  313,  533,  533,  533,  205,  205,  274,  533,
      533,  205,  205,  205,  205,  250,  205,  205,  205,  205,
      533,  251,  533,  213,   48,  274,  533,   49,  205,  205,
      313,   49,   50,  533,   49,  274,   49,  252,  254,  533,
       53,  533,   54,   49,   55,  253,  533,  205,  205,  251,
      205,  205,  205,  205,  255,  205,  205,  205,  205,  205,
      256,  257,  205,  214,  533,  252,  254,  533,  205,  205,
      533,  533,  533,  253,  205,  205,  533,  205,  205,  205,
      205,  533,  255,  533,  205,  205,  205,  256,  257,  205,

      214,   48,  205,  205,   49,  205,  205,  533,   49,   50,
      533,   49,  533,   49,  533,  258,  260,   53,  259,   54,
       49,   55,  205,  205,  533,  205,  205,  205,  205,  205,
      205,  533,  261,  533,  205,  205,  533,  533,  533,  533,
      215,  216,  533,  258,  260,  274,  259,  205,  205,  205,
      205,  533,  205,  205,  205,  205,  274,  533,  533,  311,
      261,  205,  205,  533,  533,  533,  533,  215,  216,  197,
      533,  533,  262,  274,  205,  205,  262,  263,  267,  262,
      268,  262,  269,  274,  533,  264,  311,  265,  262,  266,
      533,  270,  270,  270,  267,  533,  268,  267,  269,  268,

      533,  269,  533,  533,  533,  533,  533,  270,  270,  270,
      270,  270,  270,  198,  533,  533,  198,  198,  267,  533,
      268,  533,  269,  533,  533,  533,  317,  533,  268,  533,
      269,  270,  270,  270,  533,  197,  533,  198,  198,  270,
      270,  270,  198,  199,  326,  198,  533,  198,  339,   48,
      533,  201,   49,  202,  198,  203,   49,   50,  533,   49,
      326,   49,  533,  533,  533,   53,  533,   54,   49,   55,
       48,  533,  326,   49,  533,  533,  339,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  326,   54,   49,
       55,   48,  533,  533,   49,  533,  533,  533,   49,   50,

      533,   49,  275,   49,  533,   48,  533,   53,   49,   54,
       49,   55,   49,   50,  304,   49,  274,   49,  274,  533,
      533,   53,  533,   54,   49,   55,  533,  274,  533,  274,
      275,   48,  533,  533,   49,  533,  533,  533,   49,   50,
      533,   49,  304,   49,  274,   48,  274,   53,   49,   54,
       49,   55,   49,   50,  274,   49,  274,   49,  326,   48,
      533,   53,   49,   54,   49,   55,   49,   50,  533,   49,
      533,   49,  533,  533,  326,   53,  276,   54,   49,   55,
       48,  533,  533,   49,  533,  298,  326,   49,   50,  342,
       49,  274,   49,  326,  533,  533,   53,  533,   54,   49,

       55,  326,  274,  276,   48,  533,  533,   49,  533,  326,
      533,   49,   50,  298,   49,  533,   49,  342,  533,  274,
       53,  326,   54,   49,   55,   48,  533,  533,   49,  274,
      533,  533,   49,   50,  533,   49,  326,   49,  277,   48,
      533,   53,   49,   54,   49,   55,   49,   50,  533,   49,
      306,   49,  274,  533,  533,   53,  533,   54,   49,   55,
      533,  533,  533,  274,  533,  533,  277,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  306,   49,
      274,   48,  533,   53,   49,   54,   49,   55,   49,   50,
      274,   49,  278,   49,  533,  294,  321,   53,  302,   54,

       49,   55,  533,  533,  274,  533,  274,  322,  299,  270,
      270,  270,  533,  323,  533,  274,  533,  274,  533,  274,
      278,   48,  300,  533,   49,  307,  302,  274,   49,   50,
      274,   49,  274,   49,  274,  274,  299,   53,  274,   54,
       49,   55,  274,  274,  274,  533,  274,  274,  309,  300,
      279,  533,  533,  307,  274,  274,  312,  274,  533,  533,
      310,  533,  533,  274,  533,  274,  274,  533,  533,  533,
      533,  274,  533,  274,  533,  309,  533,  274,  279,   48,
      533,  274,   49,  312,  533,  274,   49,   50,  310,   49,
      533,   49,  314,  533,  274,   53,  274,   54,   49,   55,

      315,  274,  533,  274,  274,  274,  274,  533,  316,  358,
      274,  533,  274,  274,  274,  533,  274,  274,  280,  274,
      314,  274,  533,  274,  533,  326,  533,  533,  315,  274,
      274,  274,  533,  274,  274,  533,  316,  358,  274,  274,
      274,  274,  533,  274,  274,  280,   48,  274,  274,   49,
      533,  274,  326,   49,   50,  533,   49,  274,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  274,  317,
      533,  268,  533,  269,  533,  533,  533,  317,  274,  268,
      533,  269,  270,  270,  270,  317,  281,  268,  262,  269,
      270,  270,  270,  533,  533,  533,  262,  262,  270,  270,

      270,  533,  533,  533,  262,  267,  533,  268,  533,  269,
      533,  533,  533,  281,   48,  533,  533,   49,  270,  270,
      270,   49,   50,  533,   49,  533,   49,  533,  197,  533,
       53,  198,   54,   49,   55,  198,  199,  533,  198,  343,
      198,  533,  533,  326,  201,  533,  202,  198,  203,  533,
       48,  533,  282,   49,  533,  533,  533,   49,   50,  326,
       49,  317,   49,  268,  533,  269,   53,  343,   54,   49,
       55,  326,  533,  533,  270,  270,  270,  533,  533,  282,
       48,  533,  533,   49,  533,  533,  326,   49,   50,  533,
       49,  533,   49,  533,   48,  533,   53,   49,   54,   49,

       55,   49,   50,  326,   49,  533,   49,  359,   48,  347,
       53,   49,   54,   49,   55,   49,   50,  533,   49,  326,
       49,  283,   48,  326,   53,   49,   54,   49,   55,   49,
       50,  326,   49,  533,   49,  359,  352,  347,   53,  533,
       54,   49,   55,  533,  326,  533,  326,  533,  283,   48,
      326,  533,   49,  533,  533,  533,   49,   50,  533,   49,
      326,   49,  533,   48,  352,   53,   49,   54,   49,   55,
       49,   50,  326,   49,  344,   49,  533,  326,  284,   53,
      533,   54,   49,   55,  533,  326,  533,  326,  533,  533,
      346,  533,  533,  326,  533,  533,  533,  533,  533,  533,

      533,  326,  344,  350,  533,  326,  284,   48,  326,  533,
       49,  533,  533,  326,   49,   50,  533,   49,  346,   49,
      326,  326,  326,   53,  326,   54,   49,   55,  326,  533,
      533,  350,  348,  349,  533,  533,  326,  326,  326,  533,
      351,  533,  533,  533,  533,  326,  533,  285,  533,  326,
      326,  326,  533,  326,  533,  533,  533,  533,  533,  348,
      349,  326,  353,  533,  326,  326,  533,  533,  351,  326,
      326,  354,  533,  326,  285,   48,  326,  533,   49,  355,
      533,  326,   49,   50,  533,   49,  326,   49,  326,  353,
      533,   53,  326,   54,   49,   55,  326,  533,  326,  354,

      360,  326,  326,  533,  326,  533,  355,  533,  533,  533,
      357,  286,  533,  326,  533,  533,  533,  326,  326,  326,
      533,  361,  533,  533,  533,  326,  326,  533,  360,  326,
      326,  533,  533,  533,  533,  533,  356,  357,  533,  286,
       48,  326,  326,   49,  326,  326,  326,   49,   50,  361,
       49,  533,   49,  326,  326,  533,   53,  533,   54,   49,
       55,  533,  326,  356,  533,  533,  533,  533,  326,  326,
      533,  533,  197,  533,  326,  198,  533,  533,  287,  198,
      199,  533,  198,  533,  198,  533,  533,  533,  201,  326,
      202,  198,  203,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  287,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  288,   49,
      533,   48,  533,   53,   49,   54,   49,   55,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,  533,  533,  533,  533,  288,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,   48,  533,   53,   49,   54,   49,   55,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,

       49,   55,   48,  533,  533,   49,  533,  289,  533,   49,
       50,  533,   49,  533,   49,  533,  533,  533,   53,  533,
       54,   49,   55,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  289,   48,  533,  533,   49,  533,
      533,  533,   49,   50,  533,   49,  533,   49,  533,   48,
      533,   53,   49,   54,   49,   55,   49,   50,  533,   49,
      290,   49,  533,   48,  533,   53,   49,   54,   49,   55,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  533,  533,  533,  533,  290,   48,
      533,  533,   49,  533,  533,  533,   49,   50,  533,   49,

      533,   49,  533,   48,  533,   53,   49,   54,   49,   55,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  533,   48,  533,  291,   49,  533,
      533,  533,   49,   50,  533,   49,  533,   49,  533,  533,
      533,   53,  533,   54,   49,   55,  533,  533,  533,  533,
      533,  533,  533,  533,  291,   48,  533,  533,   49,  533,
      533,  533,   49,   50,  533,   49,  533,   49,  533,   48,
      533,   53,   49,   54,   49,   55,   49,   50,  533,   49,
      533,   49,  533,   48,  292,   53,   49,   54,   49,   55,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,

      533,   54,   49,   55,  533,  533,  533,  533,  533,  533,
      533,  533,  292,   48,  533,  533,   49,  533,  533,  533,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  197,  533,  533,  198,  533,  533,
      533,  198,  199,  533,  198,  533,  198,  293,   48,  533,
      201,   49,  202,  198,  203,   49,   50,  533,   49,  533,
       49,  533,   48,  533,   53,   49,   54,   49,   55,   49,
       50,  533,   49,  533,   49,  293,   48,  533,   53,   49,
       54,   49,   55,   49,   50,  533,   49,  533,   49,  533,
       48,  533,   53,   49,   54,   49,   55,   49,   50,  533,

       49,  533,   49,  295,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  296,  533,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  295,   53,  533,   54,   49,   55,  533,  533,  533,
      533,  296,   48,  533,  533,   49,  533,  533,  533,   49,
       50,  533,   49,  533,   49,  533,   48,  533,   53,   49,
       54,   49,   55,   49,   50,  533,   49,  533,   49,  533,
       48,  533,   53,   49,   54,   49,   55,   49,   50,  533,
       49,  533,   49,  327,   48,  533,   53,   49,   54,   49,
       55,   49,   50,  533,   49,  533,   49,  533,  533,  533,

       53,  533,   54,   49,   55,  533,  533,  533,  533,  533,
      327,   48,  533,  533,   49,  533,  533,  533,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,  328,  197,  533,  533,  198,  533,  533,  533,
      198,  199,  533,  198,  533,  198,  533,   48,  533,  201,
       49,  202,  198,  203,   49,   50,  533,   49,  533,   49,
      328,   48,  533,   53,   49,   54,   49,   55,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,   48,  533,  533,   49,  533,  533,  533,   49,
       50,  533,   49,  533,   49,  329,   48,  533,   53,   49,

       54,   49,   55,   49,   50,  533,   49,  533,   49,  533,
       48,  533,   53,   49,   54,   49,   55,   49,   50,  533,
       49,  533,   49,  329,   48,  533,   53,   49,   54,   49,
       55,   49,   50,  533,   49,  533,   49,  533,   48,  533,
       53,   49,   54,   49,   55,   49,   50,  533,   49,  533,
       49,  533,   48,  533,   53,   49,   54,   49,   55,   49,
       50,  533,   49,  533,   49,  330,   48,  533,   53,   49,
       54,   49,   55,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  533,
      533,  533,  330,   48,  533,  533,   49,  533,  533,  533,

       49,   50,  533,   49,  533,   49,  533,   48,  533,   53,
       49,   54,   49,   55,   49,   50,  331,   49,  533,   49,
      533,   48,  533,   53,   49,   54,   49,   55,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,  533,  533,  331,   48,  533,  533,   49,  533,
      533,  533,   49,   50,  533,   49,  533,   49,  533,  533,
      533,   53,  533,   54,   49,   55,  197,  533,  533,  198,
      533,  533,  533,  198,  199,  533,  198,  533,  198,  332,
       48,  533,  201,   49,  202,  198,  203,   49,   50,  533,
       49,  533,   49,  533,   48,  533,   53,   49,   54,   49,

       55,   49,   50,  533,   49,  533,   49,  332,   48,  533,
       53,   49,   54,   49,   55,   49,   50,  533,   49,  533,
       49,  533,   48,  533,   53,   49,   54,   49,   55,   49,
       50,  533,   49,  533,   49,  533,  533,  533,   53,  533,
       54,   49,   55,  333,   48,  533,  533,   49,  533,  533,
      533,   49,   50,  533,   49,  533,   49,  533,   48,  533,
       53,   49,   54,   49,   55,   49,   50,  533,   49,  533,
       49,  333,   48,  533,   53,   49,   54,   49,   55,   49,
       50,  533,   49,  533,   49,  533,   48,  533,   53,   49,
       54,   49,   55,   49,   50,  533,   49,  533,   49,  533,

      533,  533,   53,  533,   54,   49,   55,  197,  533,  533,
      198,  533,  334,  533,  198,  199,  533,  198,  533,  198,
      533,  533,  533,  201,  533,  202,  198,  203,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  334,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,   48,  533,   53,   49,   54,   49,
       55,   49,   50,  533,   49,  533,   49,  533,  533,  533,
       53,  533,   54,   49,   55,   48,  533,  533,   49,  533,
      335,  533,   49,   50,  533,   49,  533,   49,  533,  533,
      533,   53,  533,   54,   49,   55,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  335,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,
       49,  533,  197,  533,   53,  198,   54,   49,   55,  198,
      199,  533,  198,  533,  198,  533,   48,  336,  201,   49,
      202,  198,  203,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  337,   54,   49,   55,  533,  533,   48,
      533,  533,   49,  533,  533,  336,   49,   50,  533,   49,
      533,   49,  533,  533,  533,   53,  533,   54,   49,   55,
      337,   48,  533,  533,   49,  533,  533,  533,   49,   50,
      533,   49,  533,   49,  533,  197,  533,   53,  198,   54,

       49,   55,  198,  199,  533,  198,  533,  198,  533,  533,
      533,  201,  533,  202,  198,  203,   48,  533,  533,   49,
      533,  366,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  366,   48,
      533,  533,   49,  533,  533,  533,   49,   50,  533,   49,
      533,   49,  533,  533,  533,   53,  533,   54,   49,   55,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  367,  197,  533,   53,  198,   54,   49,
       55,  198,  199,  533,  198,  533,  198,  533,   48,  533,

      201,   49,  202,  198,  203,   49,   50,  533,   49,  533,
       49,  367,   48,  533,   53,   49,   54,   49,   55,   49,
       50,  533,   49,  533,   49,  533,  533,  533,   53,  533,
       54,   49,   55,  368,   48,  533,  533,   49,  533,  533,
      533,   49,   50,  533,   49,  533,   49,  533,  197,  533,
       53,  198,   54,   49,   55,  198,  199,  533,  198,  533,
      198,  368,   48,  533,  201,   49,  202,  198,  203,   49,
       50,  533,   49,  533,   49,  533,   48,  533,   53,   49,
       54,   49,   55,   49,   50,  369,   49,  533,   49,  533,
       48,  533,   53,   49,   54,   49,   55,   49,   50,  533,

       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  369,   48,  533,  533,   49,  533,  533,
      533,   49,   50,  533,   49,  533,   49,  533,   48,  533,
       53,   49,   54,   49,   55,   49,   50,  533,   49,  533,
       49,  533,  533,  533,   53,  533,   54,   49,   55,   48,
      533,  533,   49,  533,  370,  533,   49,   50,  533,   49,
      533,   49,  533,  533,  533,   53,  533,   54,   49,   55,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  370,   48,  533,  533,   49,  533,  533,  533,   49,
       50,  533,   49,  533,   49,  533,  197,  533,   53,  198,

       54,   49,   55,  198,  199,  533,  198,  533,  198,  533,
      533,  533,  201,  533,  202,  198,  203,   48,  533,  533,
       49,  533,  371,  533,   49,   50,  533,   49,  533,   49,
      533,  533,  533,   53,  533,   54,   49,   55,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  371,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,  197,  533,   53,  198,   54,   49,
       55,  198,  199,  533,  198,  533,  198,  533,   48,  533,
      201,   49,  202,  198,  203,   49,   50,  533,   49,  372,
       49,  533,  197,  533,   53,  198,   54,   49,   55,  198,

      199,  533,  198,  533,  198,  533,  533,  533,  201,  533,
      202,  198,  203,  533,  533,  533,  372,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,   48,  533,   53,   49,   54,   49,   55,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,  197,  533,  533,  198,  533,  533,  533,  198,
      199,  533,  198,  373,  198,  533,   48,  533,  201,   49,
      202,  198,  203,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  533,
      373,   48,  533,  533,   49,  533,  533,  533,   49,   50,

      533,   49,  533,   49,  533,  197,  533,   53,  198,   54,
       49,   55,  198,  199,  533,  198,  533,  198,  533,  533,
      533,  201,  533,  202,  198,  203,  374,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  197,  533,   53,  198,   54,   49,   55,  198,  199,
      533,  198,  533,  198,  374,   48,  533,  201,   49,  202,
      198,  203,   49,   50,  533,   49,  533,   49,  533,   48,
      533,   53,   49,   54,   49,   55,   49,   50,  533,   49,
      375,   49,  533,  197,  533,   53,  198,   54,   49,   55,
      198,  199,  533,  198,  533,  198,  533,  533,  533,  201,

      533,  202,  198,  203,  533,  533,  533,  533,  375,   48,
      533,  533,   49,  533,  533,  533,   49,   50,  533,   49,
      533,   49,  533,   48,  533,   53,   49,   54,   49,   55,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  197,  533,  533,  198,  533,  376,
      533,  198,  199,  533,  198,  533,  198,  533,  533,  533,
      201,  533,  202,  198,  203,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  376,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  533,  533,   53,  533,   54,   49,   55,   48,  533,

      533,   49,  533,  533,  533,   49,   50,  533,   49,  377,
       49,  533,  197,  533,   53,  198,   54,   49,   55,  198,
      199,  533,  198,  533,  198,  533,  533,  533,  201,  533,
      202,  198,  203,  533,  533,  533,  533,  377,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,
       49,  533,   48,  533,   53,   49,   54,   49,   55,   49,
       50,  533,   49,  533,   49,  533,  533,  533,   53,  533,
       54,   49,   55,  533,  197,  533,  378,  198,  533,  533,
      533,  198,  199,  533,  198,  533,  198,  533,  533,  533,
      201,  533,  202,  198,  203,  533,  533,  533,  533,  533,

      533,  533,  533,  378,   48,  533,  533,   49,  533,  533,
      533,   49,   50,  533,   49,  533,   49,  533,  533,  533,
       53,  533,   54,   49,   55,  379,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      197,  533,   53,  198,   54,   49,   55,  198,  199,  533,
      198,  533,  198,  379,   48,  533,  201,   49,  202,  198,
      203,   49,   50,  533,   49,  533,   49,  533,   48,  533,
       53,   49,   54,   49,   55,   49,   50,  533,   49,  533,
       49,  533,  197,  533,   53,  198,   54,   49,   55,  198,
      199,  533,  198,  533,  198,  533,  533,  533,  201,  380,

      202,  198,  203,   48,  533,  533,   49,  533,  533,  533,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  533,  533,  380,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  197,  533,   53,  198,   54,   49,   55,  198,  199,
      533,  198,  533,  198,  533,  533,  533,  201,  533,  202,
      198,  203,   48,  533,  533,   49,  533,  381,  533,   49,
       50,  533,   49,  533,   49,  533,  533,  533,   53,  533,
       54,   49,   55,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  381,   48,  533,  533,   49,  533,

      533,  533,   49,   50,  533,   49,  533,   49,  533,  197,
      533,   53,  198,   54,   49,   55,  198,  199,  533,  198,
      533,  198,  533,  533,  533,  201,  533,  202,  198,  203,
      533,   48,  533,  382,   49,  533,  533,  533,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,  533,  533,  533,  533,  533,  533,  533,  533,
      382,   48,  533,  533,   49,  533,  533,  533,   49,   50,
      533,   49,  533,   49,  533,  197,  533,   53,  198,   54,
       49,   55,  198,  199,  533,  198,  533,  198,  533,  533,
      533,  201,  533,  202,  198,  203,  383,   48,  533,  533,

       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  197,  533,   53,  198,   54,   49,   55,  198,  199,
      533,  198,  533,  198,  383,   48,  533,  201,   49,  202,
      198,  203,   49,   50,  533,   49,  533,   49,  533,   48,
      533,   53,   49,   54,   49,   55,   49,   50,  533,   49,
      533,   49,  533,  197,  533,   53,  198,   54,   49,   55,
      198,  199,  533,  198,  533,  198,  384,   48,  533,  201,
       49,  202,  198,  203,   49,   50,  533,   49,  533,   49,
      533,  533,  533,   53,  533,   54,   49,   55,  533,  533,
      533,  533,  533,  384,   48,  533,  533,   49,  533,  533,

      533,   49,   50,  533,   49,  533,   49,  533,  533,  533,
       53,  533,   54,   49,   55,  533,  197,  533,  533,  198,
      533,  533,  533,  198,  199,  533,  198,  385,  198,  533,
       48,  533,  201,   49,  202,  198,  203,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  533,  385,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      197,  533,   53,  198,   54,   49,   55,  198,  199,  533,
      198,  533,  198,  533,  533,  533,  201,  533,  202,  198,
      203,   48,  533,  533,   49,  533,  386,  533,   49,   50,

      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  386,   48,  533,  533,   49,  533,  533,
      533,   49,   50,  533,   49,  533,   49,  533,  197,  533,
       53,  198,   54,   49,   55,  198,  199,  533,  198,  533,
      198,  533,  533,  533,  201,  533,  202,  198,  203,  387,
      197,  533,  533,  198,  533,  533,  533,  198,  199,  533,
      198,  533,  198,  533,  533,  533,  201,  533,  202,  198,
      203,  533,  533,  533,  533,  533,  533,  387,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,

       49,  533,  533,  533,   53,  533,   54,   49,   55,  533,
      533,  388,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  388,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  389,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  389,   48,  533,  533,   49,  533,  533,  533,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  390,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  390,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  391,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  391,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  533,
      533,  395,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  395,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,

       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  396,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      396,   48,  533,  533,   49,  533,  533,  533,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  397,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  397,   48,
      533,  533,   49,  533,  533,  533,   49,   50,  533,   49,
      533,   49,  533,  533,  533,   53,  533,   54,   49,   55,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  398,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  398,   48,  533,  533,   49,  533,  533,  533,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,

      533,   54,   49,   55,  533,  533,  533,  533,  399,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  399,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  533,  533,   53,  533,   54,   49,   55,  400,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  400,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,

      533,  533,  533,   53,  533,   54,   49,   55,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  401,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  401,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  402,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  402,   48,  533,  533,   49,  533,  533,  533,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  533,  533,  533,  533,  403,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  403,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  533,  533,   53,  533,   54,   49,   55,  533,  533,
      533,  533,  533,  533,  533,  533,  404,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  404,   48,  533,  533,   49,  533,
      533,  533,   49,   50,  533,   49,  533,   49,  533,  533,
      533,   53,  533,   54,   49,   55,  533,  533,  405,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  405,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  533,  533,   53,  533,   54,   49,   55,  533,  533,

      533,  406,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  406,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  407,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  407,   48,  533,  533,   49,

      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  408,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  408,   48,  533,  533,   49,  533,  533,  533,   49,
       50,  533,   49,  533,   49,  533,  533,  533,   53,  533,
       54,   49,   55,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  409,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  409,   48,  533,  533,   49,  533,
      533,  533,   49,   50,  533,   49,  533,   49,  533,  533,
      533,   53,  533,   54,   49,   55,  533,  533,  533,  410,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  410,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,

       49,  533,  533,  533,   53,  533,   54,   49,   55,  533,
      533,  533,  533,  411,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  411,   48,  533,  533,   49,  533,  533,  533,   49,
       50,  533,   49,  533,   49,  533,  533,  533,   53,  533,
       54,   49,   55,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  412,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  412,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      413,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  413,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,
       49,  533,  533,  533,   53,  533,   54,   49,   55,  414,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  414,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,
       49,  533,  533,  533,   53,  533,   54,   49,   55,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  418,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  418,   48,  533,  533,   49,  533,  533,  533,   49,

       50,  533,   49,  533,   49,  533,  533,  533,   53,  533,
       54,   49,   55,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      419,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  419,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,
       49,  533,  533,  533,   53,  533,   54,   49,   55,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  420,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  420,   48,  533,  533,   49,  533,  533,
      533,   49,   50,  533,   49,  533,   49,  533,  533,  533,
       53,  533,   54,   49,   55,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  421,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  421,   48,  533,  533,   49,  533,  533,  533,   49,

       50,  533,   49,  533,   49,  533,  533,  533,   53,  533,
       54,   49,   55,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  422,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  422,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  423,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  423,   48,  533,  533,   49,  533,  533,  533,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  424,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  424,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,

      533,  533,  533,   53,  533,   54,   49,   55,  533,  533,
      533,  533,  425,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      425,   48,  533,  533,   49,  533,  533,  533,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,  533,  533,  533,  533,  426,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  426,   48,  533,  533,   49,  533,

      533,  533,   49,   50,  533,   49,  533,   49,  533,  533,
      533,   53,  533,   54,   49,   55,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  427,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  427,   48,  533,  533,   49,  533,  533,
      533,   49,   50,  533,   49,  533,   49,  533,  533,  533,
       53,  533,   54,   49,   55,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  428,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      428,   48,  533,  533,   49,  533,  533,  533,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,
       49,   55,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  429,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  429,   48,  533,  533,

       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  533,  533,   53,  533,   54,   49,   55,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  433,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  433,   48,  533,  533,   49,  533,  533,  533,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  533,  533,  533,  533,  533,  434,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  434,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,
       49,  533,  533,  533,   53,  533,   54,   49,   55,  533,
      533,  533,  533,  533,  533,  533,  533,  435,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  435,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  436,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  436,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  437,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  437,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  438,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  438,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,
       49,  533,  533,  533,   53,  533,   54,   49,   55,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  439,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  439,   48,  533,  533,   49,

      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  443,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  443,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  444,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  444,
       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      445,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  445,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,
       49,  533,  533,  533,   53,  533,   54,   49,   55,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  446,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  446,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  533,
      533,  447,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  447,

       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  448,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  448,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  452,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  452,   48,  533,
      533,   49,  533,  533,  533,   49,   50,  533,   49,  533,
       49,  533,  533,  533,   53,  533,   54,   49,   55,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  453,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      453,   48,  533,  533,   49,  533,  533,  533,   49,   50,
      533,   49,  533,   49,  533,  533,  533,   53,  533,   54,

       49,   55,  533,  533,  533,  533,  533,  533,  533,  533,
      454,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  454,   48,
      533,  533,   49,  533,  533,  533,   49,   50,  533,   49,
      533,   49,  533,  533,  533,   53,  533,   54,   49,   55,
      533,  533,  533,  533,  533,  533,  533,  533,  455,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  455,   48,  533,  533,

       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  533,  533,   53,  533,   54,   49,   55,  533,  533,
      533,  533,  533,  533,  533,  533,  456,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  456,   48,  533,  533,   49,  533,
      533,  533,   49,   50,  533,   49,  533,   49,  533,  533,
      533,   53,  533,   54,   49,   55,  533,  533,  533,  533,
      460,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  460,   48,
      533,  533,   49,  533,  533,  533,   49,   50,  533,   49,
      533,   49,  533,  533,  533,   53,  533,   54,   49,   55,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  461,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  461,   48,  533,  533,   49,  533,  533,  533,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  462,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  462,   48,  533,  533,
       49,  533,  533,  533,   49,   50,  533,   49,  533,   49,
      533,  533,  533,   53,  533,   54,   49,   55,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  463,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  463,

       48,  533,  533,   49,  533,  533,  533,   49,   50,  533,
       49,  533,   49,  533,  533,  533,   53,  533,   54,   49,
       55,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  467,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  467,   48,  533,  533,   49,  533,  533,  533,
       49,   50,  533,   49,  533,   49,  533,  533,  533,   53,
      533,   54,   49,   55,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  468,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  468,   48,  533,  533,   49,
      533,  533,  533,   49,   50,  533,   49,  533,   49,  533,
      533,  533,   53,  533,   54,   49,   55,  533,  533,  533,
      533,  533,  533,  469,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  469,   44,   44,  533,   44,   44,   44,   46,   46,
      533,   46,   46,   46,   56,  533,  533,   56,  123,  533,

      123,  125,  533,  533,  125,  194,  194,  533,  194,  194,
      194,  196,  196,  533,  196,  196,  196,  204,  533,  533,
      204,  205,  533,  533,  205,  271,  533,  271,  273,  533,
      533,  273,  274,  533,  533,  274,  318,  318,  533,  318,
      318,  318,  320,  320,  533,  320,  320,  320,  324,  533,
      533,  533,  324,  325,  533,  533,  325,  326,  533,  533,
      326,  363,  533,  533,  533,  363,  364,  533,  533,  364,
      365,  533,  533,  365,  392,  533,  533,  533,  392,  393,
      533,  533,  393,  394,  533,  533,  394,  415,  533,  533,
      533,  415,  416,  533,  533,  416,  417,  533,  533,  417,

      430,  533,  533,  533,  430,  431,  533,  533,  431,  432,
      533,  533,  432,  440,  533,  533,  533,  440,  441,  533,
      533,  441,  442,  533,  533,  442,  449,  533,  533,  533,
      449,  450,  533,  533,  450,  451,  533,  533,  451,  457,
      533,  533,  533,  457,  458,  533,  533,  458,  459,  533,
      533,  459,  464,  533,  533,  533,  464,  465,  533,  533,
      465,  466,  533,  533,  466,  470,  533,  533,  533,  470,
      471,  533,  533,  471,  472,  533,  533,  472,  473,  533,
      533,  533,  473,  474,  533,  533,  474,  475,  533,  533,
      475,  476,  533,  533,  533,  476,  477,  533,  533,  477,

      478,  533,  533,  478,  479,  533,  533,  533,  479,  480,
      533,  533,  480,  481,  533,  533,  481,  482,  533,  533,
      533,  482,  483,  533,  533,  483,  484,  533,  533,  484,
      485,  533,  533,  533,  485,  486,  533,  533,  486,  487,
      533,  533,  487,  488,  533,  533,  533,  488,  489,  533,
      533,  489,  490,  533,  533,  490,  491,  533,  533,  533,
      491,  492,  533,  533,  492,  493,  533,  533,  493,  494,
      533,  533,  533,  494,  495,  533,  533,  495,  496,  533,
      533,  496,  497,  533,  533,  533,  497,  498,  533,  533,
      498,  499,  533,  533,  499,  500,  533,  533,  533,  500,

      501,  533,  533,  501,  502,  533,  533,  502,  503,  533,
      533,  533,  503,  504,  533,  533,  504,  505,  533,  533,
      505,  506,  533,  533,  533,  506,  507,  533,  533,  507,
      508,  533,  533,  508,  509,  533,  533,  533,  509,  510,
      533,  533,  510,  511,  533,  533,  511,  512,  533,  533,
      533,  512,  513,  533,  533,  513,  514,  533,  533,  514,
      515,  533,  533,  533,  515,  516,  533,  533,  516,  517,
      533,  533,  517,  518,  533,  533,  533,  518,  519,  533,
      533,  519,  520,  533,  533,  520,  521,  533,  533,  533,
      521,  522,  533,  533,  522,  523,  533,  533,  523,  524,

      533,  533,  533,  524,  525,  533,  533,  525,  526,  533,
      533,  526,  527,  533,  533,  533,  527,  528,  533,  533,
      528,  529,  533,  533,  533,  529,  530,  533,  533,  530,
      531,  533,  533,  533,  531,  532,  533,  533,  533,  532,
        3,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533
    } ;

static const flex_int16_t yy_chk[9417] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   14,   17,   17,   14,   51,
       51,   51,   14,   14,  320,   14,   14,   14,   14,   14,
       14,   14,  271,   14,   14,   14,   19,   71,   71,   19,

      318,   22,  319,   19,   19,   22,   19,  269,   19,  271,
      268,   22,   19,  264,   19,   19,   19,   25,   19,  319,
      201,   22,   24,  321,   71,   71,   24,   25,  196,   22,
       19,  289,   24,   22,   19,   19,  194,   25,   24,   22,
      321,  121,   24,  120,  116,   25,   19,  289,   22,  124,
       24,  124,  124,  124,   24,   25,  291,   26,   19,  289,
       24,   19,   19,   20,   25,   24,   20,   26,   53,   24,
       20,   20,  291,   20,  289,   20,  324,   26,   46,   20,
       44,   20,   20,   20,  291,   26,   28,   29,   20,   43,
       28,   42,   30,  324,   28,   26,   30,   29,   20,  291,

       28,   67,   30,   18,   26,   67,   67,   29,   20,   15,
       28,   12,   30,    9,   28,   29,   20,    7,   28,    6,
       30,    5,   28,    3,   30,   29,   20,    0,   28,   67,
       30,    0,   67,   67,   29,   20,   21,   28,   32,   30,
       21,    0,   32,   21,   49,    0,   49,   21,   49,   33,
       21,    0,   32,   33,    0,   32,    0,   49,   49,   49,
       21,    0,   32,   33,   21,    0,   32,    0,   21,  363,
       32,   21,    0,   33,    0,   21,    0,   33,   21,    0,
       32,   33,   32,   75,   75,    0,  363,   21,   23,   32,
       37,   33,   39,   35,   37,   23,   35,   23,   23,    0,

       33,    0,   39,   35,   37,    0,   35,   23,   23,    0,
       75,   75,   39,   35,   37,    0,   23,    0,   37,    0,
       39,   35,   37,   23,   35,   23,   23,  200,  200,  200,
       39,   35,   37,   35,   23,   23,   27,   27,   72,   39,
       35,   37,    0,  392,   27,   27,   27,  322,  322,  322,
       27,   45,   72,   72,   45,   72,   27,    0,   45,   45,
      392,   45,    0,   45,   27,   27,   72,   45,    0,   45,
       45,   45,   27,   27,   27,    0,   65,   27,   36,   72,
       72,    0,   72,   27,   31,   36,   36,    0,   31,    0,
      415,   36,   36,   65,   65,   31,   31,    0,   31,    0,

       31,   31,    0,   31,   65,   38,   36,  415,   38,   38,
        0,    0,   31,   36,   36,   38,   31,    0,   36,   36,
       65,   65,    0,   31,   31,   38,   31,   31,   31,    0,
       31,   34,   66,   38,   34,    0,   38,   38,    0,   34,
      114,   34,  114,   38,  114,    0,   34,    0,    0,   66,
       66,   34,   38,  114,  114,  114,    0,  430,    0,   34,
       66,  272,   34,  272,  272,  272,    0,   34,    0,   34,
        0,    0,   48,   34,  430,   48,   66,   66,   34,   48,
       48,   50,   48,   50,   48,   50,   78,   78,   48,  440,
       48,   48,   48,  234,   50,   50,   50,   54,  234,   54,

       50,   54,    0,    0,  234,   55,  440,   55,    0,   55,
       54,   54,   54,   78,   78,    0,   54,   54,   55,   55,
       55,  234,   56,    0,   55,   56,  234,    0,  449,   56,
       56,  234,   56,    0,   56,    0,    0,  457,   56,    0,
       56,   56,   56,   57,  292,  449,   57,   68,   68,   68,
       57,   57,  292,   57,  457,   57,   69,   69,    0,   57,
       69,   57,   57,   57,   70,   70,   76,    0,  292,   70,
       76,   76,  292,   73,   68,   68,   68,    0,    0,    0,
      292,    0,   57,   69,   69,  464,   73,   69,   73,   73,
        0,   70,   70,    0,   76,  292,   70,   76,   76,    0,

        0,   73,  464,    0,  237,   74,    0,   74,  237,   57,
       58,   74,   74,   58,   73,   73,   73,   58,   58,  237,
       58,    0,   58,   77,   77,   77,   58,    0,   58,   58,
       58,    0,  237,   74,   58,   74,  237,  470,   74,   74,
       81,   81,    0,    0,   82,    0,  237,    0,   83,    0,
       77,   77,   77,    0,  470,    0,   79,  473,   79,   79,
       82,   82,   58,   59,   83,   83,   59,   81,   81,   88,
       59,   59,   82,   59,  473,   59,   83,   88,   88,   59,
        0,   59,   59,   59,   79,   79,   79,   82,   82,   84,
      476,   83,   83,   84,   84,   89,   89,   88,  119,  479,

      119,   59,  119,    0,   88,   88,    0,  476,    0,  482,
       85,  119,  119,  119,    0,    0,  479,   84,    0,    0,
       84,   84,   89,   89,   85,   85,  482,   86,   59,   60,
       90,   90,   60,   86,   86,  241,   60,   60,   85,   60,
       91,   60,   87,   87,   87,   60,  241,   60,   60,   60,
      485,   85,   85,   91,   91,   86,    0,   90,   90,  488,
       86,   86,   60,  241,    0,   92,   92,  485,   91,   87,
       87,   87,   94,  241,    0,    0,  488,   93,   93,   93,
       91,   91,    0,    0,    0,  491,    0,   94,   94,    0,
       60,   61,   92,   92,   61,    0,  101,  101,   61,   61,

       94,   61,  491,   61,   93,   93,   93,   61,  494,   61,
       61,   61,   96,   95,   94,   94,   95,   95,   61,  497,
      500,   96,   96,  101,  101,  494,    0,    0,    0,    0,
        0,    0,    0,  103,  103,    0,  497,  500,    0,  503,
       96,   95,  294,   95,   95,   98,   61,   62,   96,   96,
       62,   98,   98,   98,   62,   62,  503,   62,  294,   62,
      103,  103,    0,   62,  506,   62,   62,   62,   99,  509,
      294,   99,  100,   98,   99,   99,  109,  109,   98,   98,
       98,  506,   62,    0,  102,  294,  509,    0,  512,  100,
      100,  515,  518,    0,    0,    0,   99,  102,  102,   99,

      100,   99,   99,  109,  109,  512,  104,  104,  515,  518,
       62,   63,  102,  104,   63,    0,  100,  100,   63,   63,
        0,   63,    0,   63,  102,  102,    0,   63,  521,   63,
       63,   63,  106,  104,  104,  105,    0,  105,  105,  108,
      104,  106,  106,  107,  110,  521,  112,  112,  108,  108,
        0,   63,    0,  110,  110,    0,  107,  107,    0,    0,
      106,    0,    0,  105,  105,  105,    0,  108,  106,  106,
        0,  107,  110,  112,  112,  108,  108,    0,   63,   64,
      110,  110,   64,  107,  107,  524,   64,   64,    0,   64,
        0,   64,  111,  111,  111,   64,  527,   64,   64,   64,

      113,  113,  524,  138,  138,  138,  140,  140,  143,  143,
      115,  146,  115,  527,  115,  146,  146,   64,   64,  111,
      111,  111,    0,  115,  115,  115,    0,  113,  113,  115,
      138,  138,  138,  140,  140,  143,  143,  529,  531,  146,
        0,    0,  146,  146,   64,   64,   80,   80,  532,  117,
       80,  117,    0,  117,  529,  531,   80,   80,   80,    0,
        0,    0,  117,  117,  117,  532,    0,  139,  117,  117,
      139,  139,    0,    0,   80,   80,    0,  118,   80,  118,
      239,  118,  239,   80,   80,   80,   97,    0,   97,    0,
      118,  118,  118,  239,   97,  139,  118,  139,  139,  123,

        0,   97,  123,   97,   97,    0,  123,  123,  239,  123,
      239,  123,    0,  142,   97,  123,   97,  123,  123,  123,
      239,  297,   97,    0,    0,    0,    0,  142,  142,   97,
       97,   97,  122,    0,    0,  122,    0,  297,    0,  122,
      122,  142,  122,  122,  122,  122,  122,  122,  122,  297,
      122,  122,  122,  125,  142,  142,  125,  148,    0,  244,
      125,  125,    0,  125,  297,  125,    0,    0,    0,  125,
      244,  125,  125,  125,  126,  148,  148,  126,    0,    0,
        0,  126,  126,    0,  126,  148,  126,  244,  127,    0,
      126,  127,  126,  126,  126,  127,  127,  244,  127,    0,

      127,    0,  148,  148,  127,    0,  127,  127,  127,  126,
      129,    0,    0,  129,    0,  149,  149,  129,  129,  141,
      129,  145,  129,    0,  141,  141,  129,  144,  129,  129,
      129,    0,    0,  144,  144,  145,  145,  126,  128,  154,
      154,  128,  149,  149,    0,  128,  128,  141,  128,  145,
      128,  141,  141,    0,  128,  144,  128,  128,  128,  128,
      144,  144,  145,  145,    0,  362,  154,  154,    0,  147,
        0,  151,    0,  159,    0,  151,  151,  150,  362,  362,
      362,    0,  362,  147,  147,  159,  159,  128,  130,    0,
        0,  130,    0,  150,  150,  130,  130,  147,  130,  151,

      130,  159,  151,  151,  130,  150,  130,  130,  130,    0,
      147,  147,  159,  159,    0,    0,  152,  130,    0,  153,
      150,  150,    0,  152,  152,  193,    0,  193,    0,  193,
        0,  155,    0,  153,  153,    0,    0,    0,  193,  193,
      193,  155,  155,    0,  152,  130,  131,  153,    0,  131,
      152,  152,  245,  131,  131,    0,  131,  156,  131,  155,
      153,  153,  131,  245,  131,  131,  131,  156,  155,  155,
      157,    0,  158,  158,  158,  160,  160,    0,  131,    0,
      245,  156,  156,    0,  157,  157,    0,    0,    0,    0,
      245,    0,    0,  161,  161,  156,    0,    0,  157,  158,

      158,  158,  160,  160,    0,    0,  131,  132,  156,  156,
      132,  157,  157,  249,  132,  132,  163,  132,    0,  132,
      161,  161,    0,  132,  249,  132,  132,  132,  162,  162,
      163,  163,  132,    0,    0,  165,  165,    0,  164,  164,
      164,  249,    0,    0,  163,    0,    0,    0,  168,  168,
        0,  249,    0,    0,    0,  162,  162,  163,  163,    0,
      132,  133,  165,  165,  133,  164,  164,  164,  133,  133,
        0,  133,    0,  133,  166,  168,  168,  133,    0,  133,
      133,  133,  166,  166,  167,  133,    0,  170,  167,    0,
        0,  170,  170,    0,    0,  298,    0,  167,    0,    0,

      167,  167,  166,    0,  298,    0,    0,    0,    0,  166,
      166,  298,  167,  133,  134,  170,  167,  134,  170,  170,
        0,  134,  134,  298,  134,  167,  134,  167,  167,  169,
      134,  298,  134,  134,  134,    0,  169,  169,  298,  134,
        0,  171,  195,    0,    0,  195,  171,  171,    0,  195,
      195,  172,  195,    0,  195,    0,    0,  169,  195,    0,
      195,  195,  195,  169,  169,  172,  172,  134,  135,  171,
        0,  135,    0,  171,  171,  135,  135,  173,  135,  172,
      135,  173,  173,  174,  135,    0,  135,  135,  135,  175,
      175,    0,  172,  172,  176,  176,  174,  174,  177,  177,

      177,  178,  178,    0,    0,  173,  135,  251,  173,  173,
        0,  174,  251,    0,    0,    0,  175,  175,  251,    0,
        0,  176,  176,  174,  174,  177,  177,  177,  178,  178,
        0,  179,    0,  135,  136,  251,    0,  136,  179,  179,
      251,  136,  136,    0,  136,  251,  136,  180,  182,    0,
      136,    0,  136,  136,  136,  181,    0,  180,  180,  179,
      181,  181,  182,  182,  184,  179,  179,  183,  183,  185,
      185,  186,  186,  136,    0,  180,  182,    0,  184,  184,
        0,    0,    0,  181,  180,  180,    0,  181,  181,  182,
      182,    0,  184,    0,  183,  183,  185,  185,  186,  186,

      136,  137,  188,  188,  137,  184,  184,    0,  137,  137,
        0,  137,    0,  137,    0,  187,  190,  137,  189,  137,
      137,  137,  187,  187,    0,  189,  189,  190,  190,  188,
      188,    0,  191,    0,  192,  192,    0,    0,    0,    0,
      137,  137,    0,  187,  190,  248,  189,  191,  191,  187,
      187,    0,  189,  189,  190,  190,  248,    0,    0,  248,
      191,  192,  192,    0,    0,    0,    0,  137,  137,  197,
        0,    0,  197,  248,  191,  191,  197,  197,  198,  197,
      198,  197,  198,  248,    0,  197,  248,  197,  197,  197,
        0,  198,  198,  198,  199,    0,  199,  202,  199,  202,

        0,  202,    0,    0,    0,    0,    0,  199,  199,  199,
      202,  202,  202,  199,    0,    0,  202,  202,  203,    0,
      203,    0,  203,    0,    0,    0,  262,    0,  262,    0,
      262,  203,  203,  203,    0,  204,    0,  203,  204,  262,
      262,  262,  204,  204,  290,  204,    0,  204,  290,  205,
        0,  204,  205,  204,  204,  204,  205,  205,    0,  205,
      290,  205,    0,    0,    0,  205,    0,  205,  205,  205,
      206,    0,  290,  206,    0,    0,  290,  206,  206,    0,
      206,    0,  206,    0,    0,    0,  206,  290,  206,  206,
      206,  210,    0,    0,  210,    0,    0,    0,  210,  210,

        0,  210,  206,  210,    0,  212,    0,  210,  212,  210,
      210,  210,  212,  212,  240,  212,  240,  212,  253,    0,
        0,  212,    0,  212,  212,  212,    0,  240,    0,  253,
      206,  207,    0,    0,  207,    0,    0,    0,  207,  207,
        0,  207,  240,  207,  240,  213,  253,  207,  213,  207,
      207,  207,  213,  213,  240,  213,  253,  213,  307,  220,
        0,  213,  220,  213,  213,  213,  220,  220,    0,  220,
        0,  220,    0,    0,  307,  220,  207,  220,  220,  220,
      221,    0,    0,  221,    0,  235,  307,  221,  221,  293,
      221,  235,  221,  293,    0,    0,  221,    0,  221,  221,

      221,  307,  235,  207,  208,    0,    0,  208,    0,  293,
        0,  208,  208,  235,  208,    0,  208,  293,    0,  235,
      208,  293,  208,  208,  208,  224,    0,    0,  224,  235,
        0,    0,  224,  224,    0,  224,  293,  224,  208,  227,
        0,  224,  227,  224,  224,  224,  227,  227,    0,  227,
      242,  227,  242,    0,    0,  227,    0,  227,  227,  227,
        0,    0,    0,  242,    0,    0,  208,  209,    0,    0,
      209,    0,    0,    0,  209,  209,    0,  209,  242,  209,
      242,  232,    0,  209,  232,  209,  209,  209,  232,  232,
      242,  232,  209,  232,    0,  232,  270,  232,  238,  232,

      232,  232,    0,    0,  238,    0,  236,  270,  236,  270,
      270,  270,    0,  270,    0,  238,    0,  236,    0,  255,
      209,  211,  236,    0,  211,  243,  238,  243,  211,  211,
      255,  211,  238,  211,  236,  246,  236,  211,  243,  211,
      211,  211,  238,  250,  236,    0,  246,  255,  246,  236,
      211,    0,    0,  243,  250,  243,  250,  255,    0,    0,
      247,    0,    0,  246,    0,  243,  247,    0,    0,    0,
        0,  250,    0,  246,    0,  246,    0,  247,  211,  214,
        0,  250,  214,  250,    0,  252,  214,  214,  247,  214,
        0,  214,  252,    0,  247,  214,  252,  214,  214,  214,

      254,  256,    0,  257,  247,  258,  254,    0,  259,  312,
      259,    0,  256,  252,  257,    0,  258,  254,  214,  260,
      252,  259,    0,  252,    0,  312,    0,    0,  254,  256,
      260,  257,    0,  258,  254,    0,  259,  312,  259,  256,
      261,  257,    0,  258,  254,  214,  215,  260,  259,  215,
        0,  261,  312,  215,  215,    0,  215,  260,  215,    0,
        0,    0,  215,    0,  215,  215,  215,    0,  261,  263,
        0,  263,    0,  263,    0,    0,    0,  265,  261,  265,
        0,  265,  263,  263,  263,  266,  215,  266,  263,  266,
      265,  265,  265,    0,    0,    0,  265,  265,  266,  266,

      266,    0,    0,    0,  266,  267,    0,  267,    0,  267,
        0,    0,    0,  215,  216,    0,    0,  216,  267,  267,
      267,  216,  216,    0,  216,    0,  216,    0,  273,    0,
      216,  273,  216,  216,  216,  273,  273,    0,  273,  295,
      273,    0,    0,  295,  273,    0,  273,  273,  273,    0,
      274,    0,  216,  274,    0,    0,    0,  274,  274,  295,
      274,  317,  274,  317,    0,  317,  274,  295,  274,  274,
      274,  295,    0,    0,  317,  317,  317,    0,    0,  216,
      217,    0,    0,  217,    0,    0,  295,  217,  217,    0,
      217,    0,  217,    0,  276,    0,  217,  276,  217,  217,

      217,  276,  276,  300,  276,    0,  276,  313,  277,  300,
      276,  277,  276,  276,  276,  277,  277,    0,  277,  300,
      277,  217,  280,  313,  277,  280,  277,  277,  277,  280,
      280,  300,  280,    0,  280,  313,  305,  300,  280,    0,
      280,  280,  280,    0,  305,    0,  300,    0,  217,  218,
      313,    0,  218,    0,    0,    0,  218,  218,    0,  218,
      305,  218,    0,  281,  305,  218,  281,  218,  218,  218,
      281,  281,  305,  281,  296,  281,    0,  296,  218,  281,
        0,  281,  281,  281,    0,  299,    0,  305,    0,    0,
      299,    0,    0,  296,    0,    0,    0,    0,    0,    0,

        0,  299,  296,  303,    0,  296,  218,  219,  303,    0,
      219,    0,    0,  299,  219,  219,    0,  219,  299,  219,
      296,  301,  302,  219,  303,  219,  219,  219,  299,    0,
        0,  303,  301,  302,    0,    0,  303,  301,  302,    0,
      304,    0,    0,    0,    0,  304,    0,  219,    0,  301,
      302,  303,    0,  306,    0,    0,    0,    0,    0,  301,
      302,  304,  306,    0,  301,  302,    0,    0,  304,  306,
      309,  308,    0,  304,  219,  222,  308,    0,  222,  309,
        0,  306,  222,  222,    0,  222,  309,  222,  304,  306,
        0,  222,  308,  222,  222,  222,  306,    0,  309,  308,

      314,  311,  314,    0,  308,    0,  309,    0,    0,    0,
      311,  222,    0,  309,    0,    0,    0,  311,  314,  308,
        0,  315,    0,    0,    0,  310,  315,    0,  314,  311,
      314,    0,    0,    0,    0,    0,  310,  311,    0,  222,
      223,  310,  315,  223,  311,  314,  316,  223,  223,  315,
      223,    0,  223,  310,  315,    0,  223,    0,  223,  223,
      223,    0,  316,  310,    0,    0,    0,    0,  310,  315,
        0,    0,  325,    0,  316,  325,    0,    0,  223,  325,
      325,    0,  325,    0,  325,    0,    0,    0,  325,  316,
      325,  325,  325,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  223,  225,    0,    0,  225,
        0,    0,    0,  225,  225,    0,  225,    0,  225,    0,
        0,    0,  225,    0,  225,  225,  225,  326,    0,    0,
      326,    0,    0,    0,  326,  326,    0,  326,  225,  326,
        0,  333,    0,  326,  333,  326,  326,  326,  333,  333,
        0,  333,    0,  333,    0,    0,    0,  333,    0,  333,
      333,  333,    0,    0,    0,    0,  225,  226,    0,    0,
      226,    0,    0,    0,  226,  226,    0,  226,    0,  226,
        0,  334,    0,  226,  334,  226,  226,  226,  334,  334,
        0,  334,    0,  334,    0,    0,    0,  334,    0,  334,

      334,  334,  337,    0,    0,  337,    0,  226,    0,  337,
      337,    0,  337,    0,  337,    0,    0,    0,  337,    0,
      337,  337,  337,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  226,  228,    0,    0,  228,    0,
        0,    0,  228,  228,    0,  228,    0,  228,    0,  342,
        0,  228,  342,  228,  228,  228,  342,  342,    0,  342,
      228,  342,    0,  348,    0,  342,  348,  342,  342,  342,
      348,  348,    0,  348,    0,  348,    0,    0,    0,  348,
        0,  348,  348,  348,    0,    0,    0,    0,  228,  229,
        0,    0,  229,    0,    0,    0,  229,  229,    0,  229,

        0,  229,    0,  350,    0,  229,  350,  229,  229,  229,
      350,  350,    0,  350,    0,  350,    0,    0,    0,  350,
        0,  350,  350,  350,    0,  354,    0,  229,  354,    0,
        0,    0,  354,  354,    0,  354,    0,  354,    0,    0,
        0,  354,    0,  354,  354,  354,    0,    0,    0,    0,
        0,    0,    0,    0,  229,  230,    0,    0,  230,    0,
        0,    0,  230,  230,    0,  230,    0,  230,    0,  356,
        0,  230,  356,  230,  230,  230,  356,  356,    0,  356,
        0,  356,    0,  360,  230,  356,  360,  356,  356,  356,
      360,  360,    0,  360,    0,  360,    0,    0,    0,  360,

        0,  360,  360,  360,    0,    0,    0,    0,    0,    0,
        0,    0,  230,  231,    0,    0,  231,    0,    0,    0,
      231,  231,    0,  231,    0,  231,    0,    0,    0,  231,
        0,  231,  231,  231,  364,    0,    0,  364,    0,    0,
        0,  364,  364,    0,  364,    0,  364,  231,  365,    0,
      364,  365,  364,  364,  364,  365,  365,    0,  365,    0,
      365,    0,  367,    0,  365,  367,  365,  365,  365,  367,
      367,    0,  367,    0,  367,  231,  233,    0,  367,  233,
      367,  367,  367,  233,  233,    0,  233,    0,  233,    0,
      372,    0,  233,  372,  233,  233,  233,  372,  372,    0,

      372,    0,  372,  233,    0,    0,  372,    0,  372,  372,
      372,    0,    0,    0,  233,    0,  378,    0,    0,  378,
        0,    0,    0,  378,  378,    0,  378,    0,  378,    0,
        0,  233,  378,    0,  378,  378,  378,    0,    0,    0,
        0,  233,  275,    0,    0,  275,    0,    0,    0,  275,
      275,    0,  275,    0,  275,    0,  380,    0,  275,  380,
      275,  275,  275,  380,  380,    0,  380,    0,  380,    0,
      381,    0,  380,  381,  380,  380,  380,  381,  381,    0,
      381,    0,  381,  275,  385,    0,  381,  385,  381,  381,
      381,  385,  385,    0,  385,    0,  385,    0,    0,    0,

      385,    0,  385,  385,  385,    0,    0,    0,    0,    0,
      275,  278,    0,    0,  278,    0,    0,    0,  278,  278,
        0,  278,    0,  278,    0,    0,    0,  278,    0,  278,
      278,  278,  278,  393,    0,    0,  393,    0,    0,    0,
      393,  393,    0,  393,    0,  393,    0,  394,    0,  393,
      394,  393,  393,  393,  394,  394,    0,  394,    0,  394,
      278,  279,    0,  394,  279,  394,  394,  394,  279,  279,
        0,  279,    0,  279,    0,    0,    0,  279,    0,  279,
      279,  279,  395,    0,    0,  395,    0,    0,    0,  395,
      395,    0,  395,    0,  395,  279,  396,    0,  395,  396,

      395,  395,  395,  396,  396,    0,  396,    0,  396,    0,
      401,    0,  396,  401,  396,  396,  396,  401,  401,    0,
      401,    0,  401,  279,  282,    0,  401,  282,  401,  401,
      401,  282,  282,    0,  282,    0,  282,    0,  406,    0,
      282,  406,  282,  282,  282,  406,  406,    0,  406,    0,
      406,    0,  407,    0,  406,  407,  406,  406,  406,  407,
      407,    0,  407,    0,  407,  282,  409,    0,  407,  409,
      407,  407,  407,  409,  409,    0,  409,    0,  409,    0,
        0,    0,  409,    0,  409,  409,  409,    0,    0,    0,
        0,    0,  282,  283,    0,    0,  283,    0,    0,    0,

      283,  283,    0,  283,    0,  283,    0,  412,    0,  283,
      412,  283,  283,  283,  412,  412,  283,  412,    0,  412,
        0,  413,    0,  412,  413,  412,  412,  412,  413,  413,
        0,  413,    0,  413,    0,    0,    0,  413,    0,  413,
      413,  413,    0,    0,  283,  284,    0,    0,  284,    0,
        0,    0,  284,  284,    0,  284,    0,  284,    0,    0,
        0,  284,    0,  284,  284,  284,  416,    0,    0,  416,
        0,    0,    0,  416,  416,    0,  416,    0,  416,  284,
      417,    0,  416,  417,  416,  416,  416,  417,  417,    0,
      417,    0,  417,    0,  419,    0,  417,  419,  417,  417,

      417,  419,  419,    0,  419,    0,  419,  284,  285,    0,
      419,  285,  419,  419,  419,  285,  285,    0,  285,    0,
      285,    0,  423,    0,  285,  423,  285,  285,  285,  423,
      423,    0,  423,    0,  423,    0,    0,    0,  423,    0,
      423,  423,  423,  285,  425,    0,    0,  425,    0,    0,
        0,  425,  425,    0,  425,    0,  425,    0,  426,    0,
      425,  426,  425,  425,  425,  426,  426,    0,  426,    0,
      426,  285,  286,    0,  426,  286,  426,  426,  426,  286,
      286,    0,  286,    0,  286,    0,  429,    0,  286,  429,
      286,  286,  286,  429,  429,    0,  429,    0,  429,    0,

        0,    0,  429,    0,  429,  429,  429,  431,    0,    0,
      431,    0,  286,    0,  431,  431,    0,  431,    0,  431,
        0,    0,    0,  431,    0,  431,  431,  431,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  286,
      287,    0,    0,  287,    0,    0,    0,  287,  287,    0,
      287,    0,  287,    0,  432,    0,  287,  432,  287,  287,
      287,  432,  432,    0,  432,    0,  432,    0,    0,    0,
      432,    0,  432,  432,  432,  433,    0,    0,  433,    0,
      287,    0,  433,  433,    0,  433,    0,  433,    0,    0,
        0,  433,    0,  433,  433,  433,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  287,  288,    0,
        0,  288,    0,    0,    0,  288,  288,    0,  288,    0,
      288,    0,  441,    0,  288,  441,  288,  288,  288,  441,
      441,    0,  441,    0,  441,    0,  442,  288,  441,  442,
      441,  441,  441,  442,  442,    0,  442,    0,  442,    0,
        0,    0,  442,  288,  442,  442,  442,    0,    0,  447,
        0,    0,  447,    0,    0,  288,  447,  447,    0,  447,
        0,  447,    0,    0,    0,  447,    0,  447,  447,  447,
      288,  327,    0,    0,  327,    0,    0,    0,  327,  327,
        0,  327,    0,  327,    0,  450,    0,  327,  450,  327,

      327,  327,  450,  450,    0,  450,    0,  450,    0,    0,
        0,  450,    0,  450,  450,  450,  451,    0,    0,  451,
        0,  327,    0,  451,  451,    0,  451,    0,  451,    0,
        0,    0,  451,    0,  451,  451,  451,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  327,  328,
        0,    0,  328,    0,    0,    0,  328,  328,    0,  328,
        0,  328,    0,    0,    0,  328,    0,  328,  328,  328,
      453,    0,    0,  453,    0,    0,    0,  453,  453,    0,
      453,    0,  453,  328,  458,    0,  453,  458,  453,  453,
      453,  458,  458,    0,  458,    0,  458,    0,  459,    0,

      458,  459,  458,  458,  458,  459,  459,    0,  459,    0,
      459,  328,  329,    0,  459,  329,  459,  459,  459,  329,
      329,    0,  329,    0,  329,    0,    0,    0,  329,    0,
      329,  329,  329,  329,  460,    0,    0,  460,    0,    0,
        0,  460,  460,    0,  460,    0,  460,    0,  465,    0,
      460,  465,  460,  460,  460,  465,  465,    0,  465,    0,
      465,  329,  330,    0,  465,  330,  465,  465,  465,  330,
      330,    0,  330,    0,  330,    0,  466,    0,  330,  466,
      330,  330,  330,  466,  466,  330,  466,    0,  466,    0,
      467,    0,  466,  467,  466,  466,  466,  467,  467,    0,

      467,    0,  467,    0,    0,    0,  467,    0,  467,  467,
      467,    0,    0,  330,  331,    0,    0,  331,    0,    0,
        0,  331,  331,    0,  331,    0,  331,    0,  468,    0,
      331,  468,  331,  331,  331,  468,  468,    0,  468,    0,
      468,    0,    0,    0,  468,    0,  468,  468,  468,  469,
        0,    0,  469,    0,  331,    0,  469,  469,    0,  469,
        0,  469,    0,    0,    0,  469,    0,  469,  469,  469,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  331,  332,    0,    0,  332,    0,    0,    0,  332,
      332,    0,  332,    0,  332,    0,  471,    0,  332,  471,

      332,  332,  332,  471,  471,    0,  471,    0,  471,    0,
        0,    0,  471,    0,  471,  471,  471,  472,    0,    0,
      472,    0,  332,    0,  472,  472,    0,  472,    0,  472,
        0,    0,    0,  472,    0,  472,  472,  472,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  332,
      335,    0,    0,  335,    0,    0,    0,  335,  335,    0,
      335,    0,  335,    0,  474,    0,  335,  474,  335,  335,
      335,  474,  474,    0,  474,    0,  474,    0,  475,    0,
      474,  475,  474,  474,  474,  475,  475,    0,  475,  335,
      475,    0,  477,    0,  475,  477,  475,  475,  475,  477,

      477,    0,  477,    0,  477,    0,    0,    0,  477,    0,
      477,  477,  477,    0,    0,    0,  335,  336,    0,    0,
      336,    0,    0,    0,  336,  336,    0,  336,    0,  336,
        0,  478,    0,  336,  478,  336,  336,  336,  478,  478,
        0,  478,    0,  478,    0,    0,    0,  478,    0,  478,
      478,  478,  480,    0,    0,  480,    0,    0,    0,  480,
      480,    0,  480,  336,  480,    0,  481,    0,  480,  481,
      480,  480,  480,  481,  481,    0,  481,    0,  481,    0,
        0,    0,  481,    0,  481,  481,  481,    0,    0,    0,
      336,  338,    0,    0,  338,    0,    0,    0,  338,  338,

        0,  338,    0,  338,    0,  483,    0,  338,  483,  338,
      338,  338,  483,  483,    0,  483,    0,  483,    0,    0,
        0,  483,    0,  483,  483,  483,  338,  484,    0,    0,
      484,    0,    0,    0,  484,  484,    0,  484,    0,  484,
        0,  486,    0,  484,  486,  484,  484,  484,  486,  486,
        0,  486,    0,  486,  338,  339,    0,  486,  339,  486,
      486,  486,  339,  339,    0,  339,    0,  339,    0,  487,
        0,  339,  487,  339,  339,  339,  487,  487,    0,  487,
      339,  487,    0,  489,    0,  487,  489,  487,  487,  487,
      489,  489,    0,  489,    0,  489,    0,    0,    0,  489,

        0,  489,  489,  489,    0,    0,    0,    0,  339,  340,
        0,    0,  340,    0,    0,    0,  340,  340,    0,  340,
        0,  340,    0,  490,    0,  340,  490,  340,  340,  340,
      490,  490,    0,  490,    0,  490,    0,    0,    0,  490,
        0,  490,  490,  490,  492,    0,    0,  492,    0,  340,
        0,  492,  492,    0,  492,    0,  492,    0,    0,    0,
      492,    0,  492,  492,  492,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  340,  341,    0,    0,
      341,    0,    0,    0,  341,  341,    0,  341,    0,  341,
        0,    0,    0,  341,    0,  341,  341,  341,  493,    0,

        0,  493,    0,    0,    0,  493,  493,    0,  493,  341,
      493,    0,  495,    0,  493,  495,  493,  493,  493,  495,
      495,    0,  495,    0,  495,    0,    0,    0,  495,    0,
      495,  495,  495,    0,    0,    0,    0,  341,  343,    0,
        0,  343,    0,    0,    0,  343,  343,    0,  343,    0,
      343,    0,  496,    0,  343,  496,  343,  343,  343,  496,
      496,    0,  496,    0,  496,    0,    0,    0,  496,    0,
      496,  496,  496,    0,  498,    0,  343,  498,    0,    0,
        0,  498,  498,    0,  498,    0,  498,    0,    0,    0,
      498,    0,  498,  498,  498,    0,    0,    0,    0,    0,

        0,    0,    0,  343,  344,    0,    0,  344,    0,    0,
        0,  344,  344,    0,  344,    0,  344,    0,    0,    0,
      344,    0,  344,  344,  344,  344,  499,    0,    0,  499,
        0,    0,    0,  499,  499,    0,  499,    0,  499,    0,
      501,    0,  499,  501,  499,  499,  499,  501,  501,    0,
      501,    0,  501,  344,  345,    0,  501,  345,  501,  501,
      501,  345,  345,    0,  345,    0,  345,    0,  502,    0,
      345,  502,  345,  345,  345,  502,  502,    0,  502,    0,
      502,    0,  504,    0,  502,  504,  502,  502,  502,  504,
      504,    0,  504,    0,  504,    0,    0,    0,  504,  345,

      504,  504,  504,  505,    0,    0,  505,    0,    0,    0,
      505,  505,    0,  505,    0,  505,    0,    0,    0,  505,
        0,  505,  505,  505,    0,    0,  345,  346,    0,    0,
      346,    0,    0,    0,  346,  346,    0,  346,    0,  346,
        0,  507,    0,  346,  507,  346,  346,  346,  507,  507,
        0,  507,    0,  507,    0,    0,    0,  507,    0,  507,
      507,  507,  508,    0,    0,  508,    0,  346,    0,  508,
      508,    0,  508,    0,  508,    0,    0,    0,  508,    0,
      508,  508,  508,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  346,  347,    0,    0,  347,    0,

        0,    0,  347,  347,    0,  347,    0,  347,    0,  510,
        0,  347,  510,  347,  347,  347,  510,  510,    0,  510,
        0,  510,    0,    0,    0,  510,    0,  510,  510,  510,
        0,  511,    0,  347,  511,    0,    0,    0,  511,  511,
        0,  511,    0,  511,    0,    0,    0,  511,    0,  511,
      511,  511,    0,    0,    0,    0,    0,    0,    0,    0,
      347,  349,    0,    0,  349,    0,    0,    0,  349,  349,
        0,  349,    0,  349,    0,  513,    0,  349,  513,  349,
      349,  349,  513,  513,    0,  513,    0,  513,    0,    0,
        0,  513,    0,  513,  513,  513,  349,  514,    0,    0,

      514,    0,    0,    0,  514,  514,    0,  514,    0,  514,
        0,  516,    0,  514,  516,  514,  514,  514,  516,  516,
        0,  516,    0,  516,  349,  351,    0,  516,  351,  516,
      516,  516,  351,  351,    0,  351,    0,  351,    0,  517,
        0,  351,  517,  351,  351,  351,  517,  517,    0,  517,
        0,  517,    0,  519,    0,  517,  519,  517,  517,  517,
      519,  519,    0,  519,    0,  519,  351,  520,    0,  519,
      520,  519,  519,  519,  520,  520,    0,  520,    0,  520,
        0,    0,    0,  520,    0,  520,  520,  520,    0,    0,
        0,    0,    0,  351,  352,    0,    0,  352,    0,    0,

        0,  352,  352,    0,  352,    0,  352,    0,    0,    0,
      352,    0,  352,  352,  352,    0,  522,    0,    0,  522,
        0,    0,    0,  522,  522,    0,  522,  352,  522,    0,
      523,    0,  522,  523,  522,  522,  522,  523,  523,    0,
      523,    0,  523,    0,    0,    0,  523,    0,  523,  523,
      523,    0,    0,    0,    0,  352,  353,    0,    0,  353,
        0,    0,    0,  353,  353,    0,  353,    0,  353,    0,
      525,    0,  353,  525,  353,  353,  353,  525,  525,    0,
      525,    0,  525,    0,    0,    0,  525,    0,  525,  525,
      525,  526,    0,    0,  526,    0,  353,    0,  526,  526,

        0,  526,    0,  526,    0,    0,    0,  526,    0,  526,
      526,  526,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  353,  355,    0,    0,  355,    0,    0,
        0,  355,  355,    0,  355,    0,  355,    0,  528,    0,
      355,  528,  355,  355,  355,  528,  528,    0,  528,    0,
      528,    0,    0,    0,  528,    0,  528,  528,  528,  355,
      530,    0,    0,  530,    0,    0,    0,  530,  530,    0,
      530,    0,  530,    0,    0,    0,  530,    0,  530,  530,
      530,    0,    0,    0,    0,    0,    0,  355,  357,    0,
        0,  357,    0,    0,    0,  357,  357,    0,  357,    0,

      357,    0,    0,    0,  357,    0,  357,  357,  357,    0,
        0,  357,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  357,
      358,    0,    0,  358,    0,    0,    0,  358,  358,    0,
      358,    0,  358,    0,    0,    0,  358,    0,  358,  358,
      358,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  358,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  358,  359,    0,    0,  359,    0,    0,    0,
      359,  359,    0,  359,    0,  359,    0,    0,    0,  359,
        0,  359,  359,  359,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  359,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  359,  361,    0,    0,  361,
        0,    0,    0,  361,  361,    0,  361,    0,  361,    0,
        0,    0,  361,    0,  361,  361,  361,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  361,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  361,  366,    0,    0,  366,
        0,    0,    0,  366,  366,    0,  366,    0,  366,    0,
        0,    0,  366,    0,  366,  366,  366,    0,    0,    0,
        0,  366,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  366,
      368,    0,    0,  368,    0,    0,    0,  368,  368,    0,

      368,    0,  368,    0,    0,    0,  368,    0,  368,  368,
      368,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  368,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      368,  369,    0,    0,  369,    0,    0,    0,  369,  369,
        0,  369,    0,  369,    0,    0,    0,  369,    0,  369,
      369,  369,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  369,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  369,  370,
        0,    0,  370,    0,    0,    0,  370,  370,    0,  370,
        0,  370,    0,    0,    0,  370,    0,  370,  370,  370,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  370,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  370,  371,    0,    0,  371,    0,    0,    0,
      371,  371,    0,  371,    0,  371,    0,    0,    0,  371,

        0,  371,  371,  371,    0,    0,    0,    0,  371,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  371,  373,    0,    0,
      373,    0,    0,    0,  373,  373,    0,  373,    0,  373,
        0,    0,    0,  373,    0,  373,  373,  373,  373,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  373,  374,    0,    0,
      374,    0,    0,    0,  374,  374,    0,  374,    0,  374,

        0,    0,    0,  374,    0,  374,  374,  374,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  374,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  374,
      375,    0,    0,  375,    0,    0,    0,  375,  375,    0,
      375,    0,  375,    0,    0,    0,  375,    0,  375,  375,
      375,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  375,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  375,  376,    0,    0,  376,    0,    0,    0,
      376,  376,    0,  376,    0,  376,    0,    0,    0,  376,
        0,  376,  376,  376,    0,    0,    0,    0,  376,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  376,  377,    0,    0,
      377,    0,    0,    0,  377,  377,    0,  377,    0,  377,
        0,    0,    0,  377,    0,  377,  377,  377,    0,    0,
        0,    0,    0,    0,    0,    0,  377,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  377,  379,    0,    0,  379,    0,
        0,    0,  379,  379,    0,  379,    0,  379,    0,    0,
        0,  379,    0,  379,  379,  379,    0,    0,  379,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  379,  382,    0,    0,
      382,    0,    0,    0,  382,  382,    0,  382,    0,  382,
        0,    0,    0,  382,    0,  382,  382,  382,    0,    0,

        0,  382,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  382,
      383,    0,    0,  383,    0,    0,    0,  383,  383,    0,
      383,    0,  383,    0,    0,    0,  383,    0,  383,  383,
      383,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  383,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  383,  384,    0,    0,  384,

        0,    0,    0,  384,  384,    0,  384,    0,  384,    0,
        0,    0,  384,    0,  384,  384,  384,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  384,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  384,  386,    0,    0,  386,    0,    0,    0,  386,
      386,    0,  386,    0,  386,    0,    0,    0,  386,    0,
      386,  386,  386,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  386,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  386,  387,    0,    0,  387,    0,
        0,    0,  387,  387,    0,  387,    0,  387,    0,    0,
        0,  387,    0,  387,  387,  387,    0,    0,    0,  387,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  387,  388,    0,
        0,  388,    0,    0,    0,  388,  388,    0,  388,    0,

      388,    0,    0,    0,  388,    0,  388,  388,  388,    0,
        0,    0,    0,  388,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  388,  389,    0,    0,  389,    0,    0,    0,  389,
      389,    0,  389,    0,  389,    0,    0,    0,  389,    0,
      389,  389,  389,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  389,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  389,
      390,    0,    0,  390,    0,    0,    0,  390,  390,    0,
      390,    0,  390,    0,    0,    0,  390,    0,  390,  390,
      390,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      390,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  390,  391,    0,
        0,  391,    0,    0,    0,  391,  391,    0,  391,    0,
      391,    0,    0,    0,  391,    0,  391,  391,  391,  391,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  391,  397,    0,
        0,  397,    0,    0,    0,  397,  397,    0,  397,    0,
      397,    0,    0,    0,  397,    0,  397,  397,  397,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  397,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  397,  398,    0,    0,  398,    0,    0,    0,  398,

      398,    0,  398,    0,  398,    0,    0,    0,  398,    0,
      398,  398,  398,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      398,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  398,  399,    0,
        0,  399,    0,    0,    0,  399,  399,    0,  399,    0,
      399,    0,    0,    0,  399,    0,  399,  399,  399,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  399,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  399,  400,    0,    0,  400,    0,    0,
        0,  400,  400,    0,  400,    0,  400,    0,    0,    0,
      400,    0,  400,  400,  400,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  400,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  400,  402,    0,    0,  402,    0,    0,    0,  402,

      402,    0,  402,    0,  402,    0,    0,    0,  402,    0,
      402,  402,  402,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  402,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  402,
      403,    0,    0,  403,    0,    0,    0,  403,  403,    0,
      403,    0,  403,    0,    0,    0,  403,    0,  403,  403,
      403,    0,    0,    0,  403,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  403,  404,    0,    0,  404,    0,    0,    0,
      404,  404,    0,  404,    0,  404,    0,    0,    0,  404,
        0,  404,  404,  404,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  404,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  404,  405,    0,    0,
      405,    0,    0,    0,  405,  405,    0,  405,    0,  405,

        0,    0,    0,  405,    0,  405,  405,  405,    0,    0,
        0,    0,  405,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      405,  408,    0,    0,  408,    0,    0,    0,  408,  408,
        0,  408,    0,  408,    0,    0,    0,  408,    0,  408,
      408,  408,    0,    0,    0,    0,  408,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  408,  410,    0,    0,  410,    0,

        0,    0,  410,  410,    0,  410,    0,  410,    0,    0,
        0,  410,    0,  410,  410,  410,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  410,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  410,  411,    0,    0,  411,    0,    0,
        0,  411,  411,    0,  411,    0,  411,    0,    0,    0,
      411,    0,  411,  411,  411,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  411,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      411,  414,    0,    0,  414,    0,    0,    0,  414,  414,
        0,  414,    0,  414,    0,    0,    0,  414,    0,  414,
      414,  414,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  414,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  414,  418,    0,    0,

      418,    0,    0,    0,  418,  418,    0,  418,    0,  418,
        0,    0,    0,  418,    0,  418,  418,  418,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  418,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  418,  420,    0,    0,  420,    0,    0,    0,
      420,  420,    0,  420,    0,  420,    0,    0,    0,  420,
        0,  420,  420,  420,    0,    0,    0,    0,    0,  420,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  420,  421,    0,
        0,  421,    0,    0,    0,  421,  421,    0,  421,    0,
      421,    0,    0,    0,  421,    0,  421,  421,  421,    0,
        0,    0,    0,    0,    0,    0,    0,  421,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  421,  422,    0,    0,  422,
        0,    0,    0,  422,  422,    0,  422,    0,  422,    0,
        0,    0,  422,    0,  422,  422,  422,  422,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  422,  424,    0,    0,  424,
        0,    0,    0,  424,  424,    0,  424,    0,  424,    0,
        0,    0,  424,    0,  424,  424,  424,  424,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  424,  427,    0,    0,  427,
        0,    0,    0,  427,  427,    0,  427,    0,  427,    0,
        0,    0,  427,    0,  427,  427,  427,    0,    0,  427,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  427,  428,    0,
        0,  428,    0,    0,    0,  428,  428,    0,  428,    0,
      428,    0,    0,    0,  428,    0,  428,  428,  428,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  428,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  428,  434,    0,    0,  434,

        0,    0,    0,  434,  434,    0,  434,    0,  434,    0,
        0,    0,  434,    0,  434,  434,  434,  434,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  434,  435,    0,    0,  435,
        0,    0,    0,  435,  435,    0,  435,    0,  435,    0,
        0,    0,  435,    0,  435,  435,  435,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  435,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  435,
      436,    0,    0,  436,    0,    0,    0,  436,  436,    0,
      436,    0,  436,    0,    0,    0,  436,    0,  436,  436,
      436,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      436,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  436,  437,    0,
        0,  437,    0,    0,    0,  437,  437,    0,  437,    0,
      437,    0,    0,    0,  437,    0,  437,  437,  437,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  437,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  437,  438,    0,    0,  438,
        0,    0,    0,  438,  438,    0,  438,    0,  438,    0,
        0,    0,  438,    0,  438,  438,  438,    0,    0,    0,
        0,  438,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  438,

      439,    0,    0,  439,    0,    0,    0,  439,  439,    0,
      439,    0,  439,    0,    0,    0,  439,    0,  439,  439,
      439,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  439,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  439,  443,    0,    0,  443,
        0,    0,    0,  443,  443,    0,  443,    0,  443,    0,
        0,    0,  443,    0,  443,  443,  443,    0,    0,  443,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  443,  444,    0,
        0,  444,    0,    0,    0,  444,  444,    0,  444,    0,
      444,    0,    0,    0,  444,    0,  444,  444,  444,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  444,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      444,  445,    0,    0,  445,    0,    0,    0,  445,  445,
        0,  445,    0,  445,    0,    0,    0,  445,    0,  445,

      445,  445,    0,    0,    0,    0,    0,    0,    0,    0,
      445,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  445,  446,
        0,    0,  446,    0,    0,    0,  446,  446,    0,  446,
        0,  446,    0,    0,    0,  446,    0,  446,  446,  446,
        0,    0,    0,    0,    0,    0,    0,    0,  446,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  446,  448,    0,    0,

      448,    0,    0,    0,  448,  448,    0,  448,    0,  448,
        0,    0,    0,  448,    0,  448,  448,  448,    0,    0,
        0,    0,    0,    0,    0,    0,  448,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  448,  452,    0,    0,  452,    0,
        0,    0,  452,  452,    0,  452,    0,  452,    0,    0,
        0,  452,    0,  452,  452,  452,    0,    0,    0,    0,
      452,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  452,  454,
        0,    0,  454,    0,    0,    0,  454,  454,    0,  454,
        0,  454,    0,    0,    0,  454,    0,  454,  454,  454,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  454,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  454,  455,    0,    0,  455,    0,    0,    0,
      455,  455,    0,  455,    0,  455,    0,    0,    0,  455,
        0,  455,  455,  455,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  455,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  455,  456,    0,    0,
      456,    0,    0,    0,  456,  456,    0,  456,    0,  456,
        0,    0,    0,  456,    0,  456,  456,  456,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  456,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  456,

      461,    0,    0,  461,    0,    0,    0,  461,  461,    0,
      461,    0,  461,    0,    0,    0,  461,    0,  461,  461,
      461,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  461,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  461,  462,    0,    0,  462,    0,    0,    0,
      462,  462,    0,  462,    0,  462,    0,    0,    0,  462,
        0,  462,  462,  462,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  462,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  462,  463,    0,    0,  463,
        0,    0,    0,  463,  463,    0,  463,    0,  463,    0,
        0,    0,  463,    0,  463,  463,  463,    0,    0,    0,
        0,    0,    0,  463,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  463,  534,  534,    0,  534,  534,  534,  535,  535,
        0,  535,  535,  535,  536,    0,    0,  536,  537,    0,

      537,  538,    0,    0,  538,  539,  539,    0,  539,  539,
      539,  540,  540,    0,  540,  540,  540,  541,    0,    0,
      541,  542,    0,    0,  542,  543,    0,  543,  544,    0,
        0,  544,  545,    0,    0,  545,  546,  546,    0,  546,
      546,  546,  547,  547,    0,  547,  547,  547,  548,    0,
        0,    0,  548,  549,    0,    0,  549,  550,    0,    0,
      550,  551,    0,    0,    0,  551,  552,    0,    0,  552,
      553,    0,    0,  553,  554,    0,    0,    0,  554,  555,
        0,    0,  555,  556,    0,    0,  556,  557,    0,    0,
        0,  557,  558,    0,    0,  558,  559,    0,    0,  559,

      560,    0,    0,    0,  560,  561,    0,    0,  561,  562,
        0,    0,  562,  563,    0,    0,    0,  563,  564,    0,
        0,  564,  565,    0,    0,  565,  566,    0,    0,    0,
      566,  567,    0,    0,  567,  568,    0,    0,  568,  569,
        0,    0,    0,  569,  570,    0,    0,  570,  571,    0,
        0,  571,  572,    0,    0,    0,  572,  573,    0,    0,
      573,  574,    0,    0,  574,  575,    0,    0,    0,  575,
      576,    0,    0,  576,  577,    0,    0,  577,  578,    0,
        0,    0,  578,  579,    0,    0,  579,  580,    0,    0,
      580,  581,    0,    0,    0,  581,  582,    0,    0,  582,

      583,    0,    0,  583,  584,    0,    0,    0,  584,  585,
        0,    0,  585,  586,    0,    0,  586,  587,    0,    0,
        0,  587,  588,    0,    0,  588,  589,    0,    0,  589,
      590,    0,    0,    0,  590,  591,    0,    0,  591,  592,
        0,    0,  592,  593,    0,    0,    0,  593,  594,    0,
        0,  594,  595,    0,    0,  595,  596,    0,    0,    0,
      596,  597,    0,    0,  597,  598,    0,    0,  598,  599,
        0,    0,    0,  599,  600,    0,    0,  600,  601,    0,
        0,  601,  602,    0,    0,    0,  602,  603,    0,    0,
      603,  604,    0,    0,  604,  605,    0,    0,    0,  605,

      606,    0,    0,  606,  607,    0,    0,  607,  608,    0,
        0,    0,  608,  609,    0,    0,  609,  610,    0,    0,
      610,  611,    0,    0,    0,  611,  612,    0,    0,  612,
      613,    0,    0,  613,  614,    0,    0,    0,  614,  615,
        0,    0,  615,  616,    0,    0,  616,  617,    0,    0,
        0,  617,  618,    0,    0,  618,  619,    0,    0,  619,
      620,    0,    0,    0,  620,  621,    0,    0,  621,  622,
        0,    0,  622,  623,    0,    0,    0,  623,  624,    0,
        0,  624,  625,    0,    0,  625,  626,    0,    0,    0,
      626,  627,    0,    0,  627,  628,    0,    0,  628,  629,

        0,    0,    0,  629,  630,    0,    0,  630,  631,    0,
        0,  631,  632,    0,    0,    0,  632,  633,    0,    0,
      633,  634,    0,    0,    0,  634,  635,    0,    0,  635,
      636,    0,    0,    0,  636,  637,    0,    0,    0,  637,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[102] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexico.l"
#line 2 "lexico.l"
#include <stdio.h>
#include "Token.h"
#include <stdlib.h>

using namespace std;

extern string* pStr;
extern void GetToken(string lexema, Token_type tipo, int linea);
#line 2708 "Scanner.cpp"
/*PASCAL RESEVED WORDS*/
/*Object Reserved Words*/
/*   -- END OF RSVW --    */
/*SINTAX SYMBOLS*/
/*  -- END OF SYNTX -- */
/* DATA TYPES  */
/* -- END OF DATA TYPES  --*/
/*All Arithmetic Operators*/
/*Arithmetic Operations*/
/* -- END OF OPRT --*/
#line 2719 "Scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 164 "lexico.l"


#line 2854 "Scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 534 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9341 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 166 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 167 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 169 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 170 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 171 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 172 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);      
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 173 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 174 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 175 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 176 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 177 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 178 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 179 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 182 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 183 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 184 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 185 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 186 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 187 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 188 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 189 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 190 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 191 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 192 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 193 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 194 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 196 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 197 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 198 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 199 "lexico.l"
GetToken(yytext,RSVWORD,yylineno); 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 200 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 201 "lexico.l"
GetToken(yytext,RSVWORD,yylineno); 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 202 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 204 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 205 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 206 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 208 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 209 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 212 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 213 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 214 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 215 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 216 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 217 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 218 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 219 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 220 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 221 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 224 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);  
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 225 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 226 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 227 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 228 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 230 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 231 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 232 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 233 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 235 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 236 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 237 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 238 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 240 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 241 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 242 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 243 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 247 "lexico.l"
GetToken(yytext,OPERATOR,yylineno);         
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 248 "lexico.l"
GetToken(yytext,OPERATION,yylineno);  
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 252 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 253 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 254 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 255 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 256 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 257 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 258 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 261 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);   
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 262 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 263 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 264 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 265 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 266 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 267 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 268 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 269 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 271 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 272 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 273 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 274 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 276 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 277 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 278 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 279 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 280 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 282 "lexico.l"
GetToken(yytext,DIGIT,yylineno);                
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 283 "lexico.l"
GetToken(yytext,INTEGER,yylineno);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 284 "lexico.l"
GetToken(yytext,REAL,yylineno);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 285 "lexico.l"
GetToken(yytext,IDENTIFIER,yylineno);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 286 "lexico.l"
GetToken(yytext,EMPTYSPC,yylineno);
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 287 "lexico.l"
GetToken(yytext,LINEBRK,yylineno);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 288 "lexico.l"
GetToken(yytext,STRING,yylineno);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 291 "lexico.l"
GetToken(yytext,UsrOperations,yylineno);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 294 "lexico.l"
ECHO;
	YY_BREAK
#line 3427 "Scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 534 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 534 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 533);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 294 "lexico.l"



