#line 2 "Scanner.cpp"

#line 4 "Scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 102
#define YY_END_OF_BUFFER 103
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[697] =
    {   0,
        0,    0,  103,  102,   97,   98,  102,   66,   72,   68,
       69,   66,   73,   93,  102,   74,   66,   66,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   70,
       71,   97,    0,   98,    0,   99,    0,   66,    0,    0,
        0,    0,   94,    0,    0,    0,   96,   96,   96,   96,
       49,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       10,   96,   96,   96,   96,   96,   96,   96,   17,   96,
       19,   57,   96,   96,   96,   96,   96,   96,   96,   28,
       59,   96,   30,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   40,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   67,   67,   95,   96,   96,    2,   96,
        3,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,    9,   96,   96,   13,   96,   96,   96,   96,   96,
       14,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   24,   25,   26,   96,   96,   60,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   91,   37,   96,   38,
       96,   96,   96,   96,   65,   96,   96,   96,   96,   45,
       96,   96,   96,   48,    0,    0,    0,   67,    0,    0,

        0,    0,    0,    0,    0,    0,   67,   96,   96,   96,
       96,   96,   81,   96,    5,   84,   96,   96,   96,   96,
       96,   96,   12,   87,   96,   96,   89,   96,   96,   16,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   85,   96,   96,   96,
       96,   36,   96,   96,   96,   39,   96,   41,   42,   44,
       43,   96,   47,   82,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   67,   67,   96,   96,   88,
        4,   96,   96,   50,    6,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   80,   96,   96,

       23,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       62,   96,   96,   96,   96,   96,   96,   96,   96,   46,
        0,    0,    0,    0,    0,    0,    0,  100,    0,   67,
       96,   96,   96,   96,   96,   96,   96,   11,   52,   96,
       96,   55,   96,   96,   96,   96,   21,   96,   96,   96,
       96,   96,   27,   96,   31,   96,   96,   96,   92,   96,
       35,   96,   96,   96,   90,   96,    0,    0,    0,    0,
       67,   96,   96,   86,   96,   96,   96,   96,   53,   96,
       96,   96,   96,   96,   75,   96,   58,   79,   96,   96,
       96,   33,   96,   96,   96,   96,   96,   96,    0,    0,

       67,   96,    1,   76,   96,   96,   96,   96,   15,   96,
       96,   96,   96,   83,   29,   96,   61,   96,   96,   77,
       78,   96,    0,    0,    0,    0,    0,    0,   67,   96,
       96,    8,   96,   96,   96,   20,   96,   22,   32,   96,
       96,   64,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,   96,    7,   96,   96,   96,
       96,   96,   96,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   67,   96,   96,   96,
       96,   96,   34,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,   96,   96,   54,   96,   96,

       96,    0,    0,    0,    0,    0,   67,   96,   51,   96,
       96,   96,    0,    0,    0,    0,    0,   67,   96,   18,
       56,   63,    0,    0,    0,    0,    0,   67,   96,    0,
        0,    0,    0,    0,   67,   96,    0,    0,    0,    0,
        0,   67,   96,    0,    0,    0,    0,    0,    0,   67,
       96,    0,    0,    0,    0,    0,    0,    0,    0,   67,
       96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       67,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   67,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,   96,    0,    0,    0,    0,

      101,    0,    0,    0,    0,    0,   67,   96,    0,    0,
        0,  101,    0,  101,    0,    0,    0,   67,   96,    0,
      101,  101,  101,    0,    0,    0,   67,   96,  101,  101,
        0,    0,    0,   67,   96,  101,    0,    0,    0,   67,
       96,    0,    0,    0,   67,   96,    0,    0,    0,   67,
       96,    0,    0,    0,   67,   96,    0,    0,    0,   67,
       96,    0,    0,    0,   67,   96,    0,    0,    0,   67,
       96,    0,    0,    0,   67,    0,    0,    0,   67,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   16,   15,   17,   15,   15,   15,   18,   19,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,    1,   50,    1,   39,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   39,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    4,    1,    6,    5,    5,
        1,    5,    1,    5,    2,    2,    2,    5,    7,    5,
        5,    5,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[871] =
    {   0,
        0,    0,  736, 9789,   74,  717,  684, 9789,  679, 9789,
     9789,  655, 9789,  145,  651, 9789,   56,  622,  166,  233,
      285,   52,  333,   53,   55,   66,  381,  146,   67,   78,
      432,  172,  221,  476,  244,  285,  287,  345,  167, 9789,
     9789,   79,   58,  633,  630,  421,  619, 9789,  469,  288,
      448,   70,    0,  589,  531,  552,  507,  572,  639,  692,
      758,  820,  876,  940, 1008,  322,  345,  521,  288,  380,
      530,  418,  565,  571,  622,  559,  606,  640,  563,  658,
     1047,  651,  676,  681,  694,  697,  741,  743,  756,  706,
      746,  750,  759,  795,  803,  835,  842, 1094,  865,  903,

      888,  779,  812,  825,  879,  926,  932,  947,  938,  936,
      992,  994,  940,  944,   75,  662, 1037,  586, 1078, 1106,
      725,  591,  559, 1161, 1128,  200, 1182, 1203, 1217, 1267,
     1239, 1317, 1375, 1436, 1490, 1543, 1597, 1663, 1730, 1004,
     1060,  996, 1214, 1028, 1117, 1223, 1225, 1205, 1273, 1165,
     1255, 1291, 1310, 1330, 1313, 1332, 1363, 1398, 1361, 1366,
     1418, 1349, 1401, 1410, 1478, 1456, 1420, 1473, 1544, 1490,
     1509, 1525, 1580, 1587, 1589, 1610, 1591, 1593, 1629, 1645,
     1648, 1660, 1658, 1665, 1695, 1714, 1705, 1712, 1724, 1719,
     1734, 1737, 1759, 1748,   94, 1805,  559, 1821,  545, 1835,

     1844, 1860,  209,  519, 1863, 1884, 1901, 1915, 1936, 1997,
     2070, 2133, 1957, 2187, 1971, 2011, 2245, 2312, 2380, 2446,
     2515, 2573, 2025, 2046, 2641, 2706, 2091, 2772, 2833, 2105,
     2901, 2955, 3021, 3079, 2147, 3142,  588,  141, 2145, 1296,
      453,  509, 1084,  200, 1955, 2030,  249,  465, 1461, 2143,
     2182,  855, 2174, 1415, 2194, 1161, 2213, 1596, 1957, 2091,
     2216, 2242, 2239, 2245,  117, 1892, 2321,  487, 2341, 2344,
     2288,  488,  471,  737,  134,  246, 2366, 2394, 3208, 2416,
     2460, 3277, 3327, 2474, 2488, 3390, 3459, 3511, 3574, 3638,
     3706, 3774,  205, 1881,  292, 1121, 1529,  340, 1777, 2483,

      513, 2139, 2507, 2376, 2380, 2481, 2518, 2542, 1462, 2241,
      877, 2553, 2559, 2555, 2573, 1549, 1664, 2444, 2610, 1823,
      459, 2427,  425,  172,  421,  177,  563, 9789,  247, 2668,
     2692, 3847, 3915, 3978, 4028, 4080, 4148, 2720, 2742, 4216,
     4283, 2793, 4357, 4421, 4475, 4543, 2807, 4604, 4670, 4720,
     4793, 4861, 2847, 4927, 2868, 4991, 5060, 5122, 2915, 5190,
     2929, 5254, 5306, 5369, 2969, 5432, 2991,  128,  599,  254,
     3035, 3049, 5502, 3100, 5556, 5617, 5685, 5749, 3114, 5803,
     5853, 5916, 5979, 6033, 3128, 6091, 3156, 3182, 6143, 6196,
     6262, 3222, 6328, 6401, 6454, 6508, 6576, 6644, 2650,  263,

     3236, 3250, 3299, 3313, 6694, 6758, 6824, 6890, 3348, 6958,
     7026, 7079, 7153, 3362, 3376, 7207, 3404, 7261, 7330, 3418,
     3432, 7397, 2733,  411,  396, 7463, 3473,  281, 3487, 3532,
     7484, 3546, 7550, 7605, 7663, 3560, 7713, 3588, 3610, 7763,
     7815, 3624,  389, 3652,  372, 3673, 2751, 2816,  842,  337,
     2877, 2938, 3720,  362, 3741, 3788, 3802, 7883, 7933, 7997,
     8065, 8133, 8187, 3000, 3058,  325, 3259, 3191, 3290,  340,
      329, 1293,   89,  901, 3825,  372, 3861, 3882, 8253, 8305,
     8368, 8426, 3936, 8484, 3441,  329,   93,  311,  137,  299,
     1051,  140, 3950,  375, 3964, 4000, 8542, 4014, 8596, 8660,

     8724,  208, 1296,  267, 4042,  382, 4056, 4094, 4115, 8787,
     8850, 8913,  363,  170,  285, 4162,  438, 4183, 4230, 4244,
     4258, 4297,  173,  270,  329, 4318,  478, 4332, 4371,  356,
      389,  499, 4393,  524, 4407, 4435,  398,  512,  522, 4449,
      540, 4489, 4510,  618, 1359, 1890,  621, 4564,  650, 4578,
     4618, 2002, 2050,  411, 1055,  528,  787, 4640,  652, 4692,
     4706, 2092, 1141,  640,  646,  656,  658,  790, 4734,  829,
     4748, 4769, 1412,  739,  806,  858,  900,  967,  988,  799,
     4807,  849, 4828, 4875, 1063, 1063, 1074, 1105, 1133, 1212,
     1239,  852, 4897,  872, 4941, 4963, 1273, 1286, 1327, 1458,

     9789, 1471,  294,  981, 4977,  902, 5005, 5019, 1495, 1504,
     1536, 9789,  283,  219,  993, 5033, 1023, 5082, 5096, 1556,
      187,  183,  180, 1019, 5136, 1072, 5157, 5204,  147,  136,
     1048, 5226, 1243, 5240, 5268,   96, 1212, 5282, 1348, 5327,
     5341, 1228, 5355, 1408, 5390, 5404, 1297, 5418, 1572, 5446,
     5460, 1411, 5488, 1585, 5516, 5530, 1418, 5577, 1622, 5591,
     5631, 1463, 5652, 1648, 5699, 5721, 1466, 5735, 1674, 5763,
     5777, 1573, 5825, 1686, 5839, 1581, 5874, 1706, 5888, 1637,
     5902, 1743, 1638, 5937, 1775, 1672, 5951, 1701, 5965, 1710,
     5993, 1713, 6007, 1722, 1741, 9789, 8970, 8977, 8983, 8987,

     8990, 8995, 9002, 9008, 9012, 9016, 9019, 9023, 9028, 9035,
     9041, 9047, 9051, 9055, 9061, 9065, 9069, 9075, 9079, 9083,
     9086, 9092, 9096, 9101, 9108, 9114, 9118, 9124, 9128, 9132,
     9135, 9139, 9145, 9149, 9154, 9161, 9167, 9172, 9176, 9182,
     9186, 9190, 9195, 9199, 9205, 9209, 9213, 9218, 9222, 9228,
     9232, 9236, 9241, 9245, 9251, 9255, 9259, 9264, 9268, 9274,
     9278, 9282, 9287, 9291, 9297, 9301, 9305, 9310, 9314, 9320,
     9324, 9328, 9333, 9337, 9343, 9347, 9351, 9356, 9360, 9366,
     9370, 9374, 9379, 9383, 9389, 9393, 9397, 9402, 9406, 9412,
     9416, 9420, 9425, 9429, 9435, 9439, 9443, 9448, 9452, 9458,

     9462, 9466, 9471, 9475, 9481, 9485, 9489, 9494, 9498, 9504,
     9508, 9512, 9517, 9521, 9527, 9531, 9535, 9540, 9544, 9550,
     9554, 9558, 9563, 9567, 9573, 9577, 9581, 9586, 9590, 9596,
     9600, 9604, 9609, 9613, 9619, 9623, 9627, 9632, 9636, 9642,
     9646, 9650, 9655, 9659, 9665, 9669, 9673, 9678, 9682, 9688,
     9692, 9697, 9701, 9707, 9711, 9716, 9720, 9726, 9731, 9735,
     9741, 9746, 9750, 9755, 9759, 9764, 9768, 9773, 9777, 9782
    } ;

static const flex_int16_t yy_def[871] =
    {   0,
      696,    1,  696,  696,  696,  696,  697,  696,  698,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  699,  699,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       27,   20,   20,   20,   20,   27,   20,   20,   20,  696,
      696,  696,  696,  696,  697,  696,  698,  696,  696,  700,
      700,  696,   14,  696,  700,  700,  701,  701,  701,  701,
      701,  701,  701,  701,  701,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,  696,  700,  700,  696,  700,  700,
      700,  702,  703,  696,  704,   14,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  696,  700,  702,  696,  703,  696,

      706,  706,  696,  696,  706,  706,  707,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  696,  706,  706,  696,  706,  706,
      706,  709,  710,  696,  711,  124,  712,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  292,  292,  292,  292,  292,  292,  292,  292,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      696,  706,  709,  696,  710,  696,  696,  696,  714,  715,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  696,  696,  696,  717,
      718,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  720,  721,

      722,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  720,  724,  725,  696,  726,  727,  728,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  724,  696,  725,  696,  730,  730,  696,  696,
      730,  730,  731,  732,  733,  734,  734,  734,  734,  734,
      734,  734,  734,  730,  730,  696,  730,  730,  730,  735,
      736,  696,  737,  426,  738,  739,  740,  741,  741,  741,
      741,  741,  741,  741,  730,  735,  696,  736,  696,  696,
      696,  742,  743,  744,  745,  746,  746,  746,  746,  746,

      746,  696,  696,  747,  748,  749,  750,  751,  751,  751,
      751,  751,  696,  696,  752,  753,  754,  755,  756,  756,
      756,  756,  696,  696,  757,  758,  759,  760,  761,  696,
      696,  762,  763,  764,  765,  766,  696,  696,  767,  768,
      769,  770,  771,  696,  696,  696,  772,  773,  774,  775,
      776,  696,  696,  696,  696,  696,  777,  778,  779,  780,
      781,  696,  696,  696,  696,  696,  696,  782,  783,  784,
      785,  786,  696,  696,  696,  696,  696,  696,  696,  787,
      788,  789,  790,  791,  696,  696,  696,  696,  696,  696,
      696,  792,  793,  794,  795,  796,  696,  696,  696,  696,

      696,  696,  696,  797,  798,  799,  800,  801,  696,  696,
      696,  696,  696,  696,  802,  803,  804,  805,  806,  696,
      696,  696,  696,  807,  808,  809,  810,  811,  696,  696,
      812,  813,  814,  815,  816,  696,  817,  818,  819,  820,
      821,  822,  823,  824,  825,  826,  827,  828,  829,  830,
      831,  832,  833,  834,  835,  836,  837,  838,  839,  840,
      841,  842,  843,  844,  845,  846,  847,  848,  849,  850,
      696,  851,  852,  853,  854,  855,  856,  857,  696,  858,
      859,  860,  861,  862,  696,  863,  864,  865,  866,  867,
      868,  869,  696,  870,  696,    0,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696
    } ;

static const flex_int16_t yy_nxt[9865] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    8,   12,
       13,    8,    4,    8,   14,   14,   14,   15,   16,   17,
        8,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   26,   26,   28,   29,   30,   31,   32,   26,   33,
       34,   35,   36,   37,   38,   39,   26,   26,   40,   41,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   26,
       26,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   26,   26,   42,   48,   48,   69,   57,
       42,   57,   70,   75,  126,  126,  126,  115,   71,   76,
      489,   78,   57,   57,  489,   77,  490,  636,   57,   57,

      490,   57,   57,   86,   57,  195,   69,   57,   87,   57,
       70,   75,   57,   57,   88,  115,   71,   76,   43,   78,
       57,   57,   77,   43,   57,   57,   57,  265,   57,  368,
       57,   86,   57,  195,  399,  326,   87,  630,  489,   57,
       57,  489,   88,  321,  490,   43,   49,  490,  636,   50,
       43,   57,  328,   50,   51,  265,   50,   52,   50,   53,
       53,   53,   54,  302,   55,   50,   56,   49,   83,  278,
       50,  321,   57,  326,   50,   51,   84,   50,  326,   50,
      278,  623,   85,   54,  630,   55,   50,   56,  614,   58,
      328,  302,   57,   57,   95,  328,   83,  278,   57,  524,

       57,   59,  530,  114,   84,   60,   61,  278,   57,  513,
       85,   96,  696,   57,  126,  126,  126,   58,   57,   57,
      614,   57,   95,  276,  276,  276,   57,  524,  278,   59,
      530,  114,   60,   61,   49,  343,   57,   50,   96,  309,
       57,   50,   51,   97,   50,   57,   50,   98,  326,  514,
       54,  331,   55,   50,   56,  326,  278,   57,  696,   62,
      276,  276,  276,  343,  326,  328,  309,   57,  489,   63,
       57,   97,  328,  103,  490,   98,  514,  278,  331,   64,
      104,  328,  326,  105,  623,   57,  489,   62,  278,  121,
      106,  122,  490,  123,   57,  614,  531,   63,   57,  328,

      502,  103,  124,  124,  124,  278,   64,   65,  104,  110,
      105,   57,   57,   57,   66,  278,  487,  106,   67,   57,
      107,   68,  345,   57,  531,  108,  109,  127,  127,  140,
      489,   57,  487,   57,  487,   65,  490,  110,  331,   57,
       57,   57,   66,  487,  137,  464,   67,   57,  107,   68,
      345,   57,  108,  109,  127,  127,  140,  447,   57,   57,
       57,  127,  127,  326,  513,  331,   72,  138,   73,   57,
      331,   57,  137,  326,  111,  112,  326,  444,   74,   57,
      328,  113,  537,  326,  127,  127,  331,   57,  127,  127,
      328,   57,  444,  328,   72,  138,   73,   57,  331,   57,

      328,  444,  111,  112,  523,   74,   57,   57,   79,  113,
      537,  127,  127,  331,  444,   80,   81,   57,   57,  127,
      141,   82,   49,  142,  538,   50,  324,   57,  324,   50,
       51,  523,   50,  544,   50,   57,   79,  565,   54,  326,
       55,   50,   56,   80,   81,   57,  127,  141,   82,  121,
      142,  122,  538,  123,   57,   89,  328,  127,  144,   90,
      368,  544,  124,  124,  124,  565,   57,   91,   50,   92,
       49,   93,   57,  116,   94,  306,  324,  116,  117,  326,
      116,  278,  116,   89,  127,  144,  118,   90,  119,  116,
      120,  324,  278,  278,   57,   91,  328,   92,   93,   57,

      489,   94,   99,  306,  312,  100,  490,  266,   49,  278,
      101,   50,   57,  545,  546,   50,   51,  102,   50,  278,
       50,  278,   57,  489,   54,  326,   55,   50,   56,  490,
       99,  312,  121,  100,  122,  307,  123,  278,  101,  201,
       57,  326,  328,  331,  102,  124,  124,  124,  278,   57,
      198,   50,   50,  121,  567,  122,  139,  123,  328,  331,
      127,  127,  198,  307,  198,  278,  124,  124,  124,  127,
      127,  331,   50,   49,  143,  278,   50,  369,  369,  369,
       50,   51,  567,   50,  139,   50,  331,  127,  127,   54,
      145,   55,   50,   56,  198,  147,  127,  127,  151,  127,

      326,  143,  127,  127,  127,  127,  116,  146,  148,   50,
      127,  127,  128,  369,  369,  369,  278,  328,  145,  552,
      546,  301,  489,  147,   46,  151,  127,  278,  490,  127,
      127,  127,  127,   46,  146,   44,  148,  127,  127,  128,
       49,  152,   48,   50,  278,  127,  127,   50,   51,  301,
       50,  326,   50,  326,  278,  149,   54,  150,   55,   50,
       56,  127,  127,  196,  129,  122,  576,  123,  328,  152,
      328,   48,  127,  127,  577,   48,  124,  124,  124,  127,
      127,  153,  578,  149,   46,  150,  579,   46,  127,  127,
      127,  127,  129,   49,  576,  154,   50,  127,  127,  159,

       50,   51,  577,   50,  160,   50,  127,  127,  153,   54,
      578,   55,   50,   56,  579,  127,  127,  127,  127,   44,
      127,  127,  162,  154,  127,  127,  121,  159,  122,  161,
      123,  130,  160,  127,  127,  696,  127,  127,  326,  124,
      124,  124,  127,  127,  696,  127,  127,  127,  127,  327,
      162,  274,  274,  274,  696,  328,  696,  161,  130,   49,
      127,  127,   50,  127,  127,  586,   50,   51,  696,   50,
      696,   50,  127,  127,  163,   54,  166,   55,   50,   56,
      127,  127,  127,  127,  164,  127,  127,  165,  489,  127,
      127,  489,  131,  586,  490,  127,  127,  490,  127,  127,

      489,  696,  163,  696,  166,  696,  490,  127,  127,  127,
      127,  164,  127,  127,  696,  165,  127,  127,  182,  127,
      131,   49,  127,  127,   50,  127,  127,  168,   50,   51,
      326,   50,  587,   50,  127,  127,  167,   54,  183,   55,
       50,   56,  127,  127,  696,  182,  127,  328,  132,  696,
      326,  184,  127,  489,  696,  168,  474,  474,  474,  490,
      587,  127,  127,  167,  127,  127,  183,  328,  696,  127,
      127,  169,  170,  326,  127,  127,  132,   49,  184,  127,
       50,  127,  127,  278,   50,   51,  588,   50,  696,   50,
      328,  127,  127,   54,  278,   55,   50,   56,  176,  169,

      170,  127,  127,  326,  127,  127,  177,  331,  127,  127,
      181,  278,  133,  696,  588,  474,  474,  474,  127,  127,
      328,  278,  696,  331,  696,  185,  176,  127,  127,  696,
      589,  127,  127,  177,  696,  331,  178,  696,  181,  179,
      133,   49,  180,  127,   50,  127,  127,  696,   50,   51,
      331,   50,  185,   50,  127,  127,  696,   54,  589,   55,
       50,   56,  187,  186,  178,  127,  127,  179,  189,  180,
      127,  127,  127,  188,  696,  190,  127,  127,  127,  193,
      127,  134,  489,  194,  127,  696,  127,  127,  490,  696,
      187,  186,  127,  127,  489,  590,  189,  696,  127,  127,

      490,  188,  190,  127,  127,  127,  193,  127,  134,   49,
      194,  127,   50,  127,  127,  696,   50,   51,  591,   50,
      489,   50,  191,  590,  326,   54,  490,   55,   50,   56,
      696,  127,  127,  127,  127,  192,  208,  208,  196,  696,
      122,  328,  123,  220,  208,  208,  591,  135,  136,  489,
      191,  124,  124,  124,  223,  490,  555,  116,  127,  127,
      127,  127,  192,  208,  208,  503,  503,  503,  208,  208,
      220,  208,  208,  326,  135,  136,  155,  156,  566,  196,
      157,  122,  223,  123,  696,  696,  127,  127,  158,  597,
      328,  598,  124,  124,  124,  208,  208,  221,  116,  116,

      208,  208,  599,  696,  155,  156,  566,  196,  157,  122,
      308,  123,  278,  127,  127,  158,  171,  597,  172,  598,
      124,  124,  124,  278,  173,  221,  116,  208,  208,  200,
      599,  174,  201,  127,  175,  600,  201,  202,  308,  201,
      278,  201,  563,  346,  171,  204,  172,  205,  201,  206,
      278,  331,  173,  696,  696,  696,  696,  208,  208,  174,
      127,  175,  200,  600,  575,  201,  696,  331,  601,  201,
      202,  346,  201,  203,  201,  124,  124,  124,  204,  331,
      205,  201,  206,   49,  208,  208,   50,  228,  696,  278,
       50,   51,  575,   50,  331,   50,  601,  696,  696,   54,

      278,   55,   50,   56,   49,  208,  208,   50,  696,  696,
      696,   50,   51,  489,   50,  228,   50,  278,   49,  490,
       54,   50,   55,   50,   56,   50,   51,  278,   50,  489,
       50,  696,  208,  208,   54,  490,   55,   50,   56,  209,
       49,  226,  602,   50,  326,  208,  208,   50,   51,  222,
       50,  225,   50,  696,  208,  208,   54,  224,   55,   50,
       56,  328,  696,  208,  208,  208,  208,  209,   49,  226,
      602,   50,  208,  208,  603,   50,   51,  222,   50,  225,
       50,  208,  208,  696,   54,  224,   55,   50,   56,  210,
      208,  208,  208,  208,  489,  208,  208,  489,  489,  227,

      490,  609,  603,  490,  490,  491,  696,  472,  472,  472,
      503,  503,  503,  208,  208,  229,  610,  210,   49,  696,
      305,   50,  208,  208,  278,   50,   51,  227,   50,  609,
       50,  208,  208,  696,   54,  278,   55,   50,   56,  232,
      208,  208,  696,  229,  610,  696,  230,  211,  305,  326,
      208,  208,  278,  208,  208,  696,  696,  611,  208,  208,
      545,  553,  278,  231,  696,  696,  328,  232,  696,  696,
      208,  208,  208,  233,  230,  211,   49,  208,  208,   50,
      208,  208,  554,   50,   51,  611,   50,  237,   50,  208,
      208,  231,   54,  234,   55,   50,   56,  208,  208,  208,

      233,  208,  208,  208,  208,  238,  208,  208,  212,  326,
      554,  696,  489,  573,  235,  237,  208,  208,  490,  489,
      696,  234,  696,  696,  236,  490,  328,  696,  208,  208,
      208,  208,  238,  208,  208,  585,  212,   49,  208,  208,
       50,  208,  208,  278,   50,   51,  239,   50,  317,   50,
      208,  208,  236,   54,  278,   55,   50,   56,  208,  208,
      208,  208,  213,  585,  489,  208,  208,  489,  208,  208,
      490,  278,  696,  490,  239,  696,  317,  208,  208,  696,
      696,  278,  696,  696,  357,  208,  208,  208,  208,  278,
      213,   49,  331,  612,   50,  241,  208,  208,   50,   51,

      278,   50,  313,   50,  240,  242,  613,   54,  331,   55,
       50,   56,  357,  208,  208,  214,  696,  278,  208,  208,
      331,  612,  241,  208,  208,  620,  696,  278,  696,  313,
      246,  208,  240,  242,  613,  331,  696,  696,  696,  621,
      208,  208,  247,  214,   49,  208,  208,   50,  696,  208,
      208,   50,   51,  620,   50,  347,   50,  246,  208,  331,
       54,  248,   55,   50,   56,  208,  208,  621,  243,  215,
      247,  622,  244,  326,  489,  331,  208,  208,  696,  363,
      490,  245,  489,  347,  208,  208,  326,  331,  490,  248,
      328,  629,  208,  208,  696,  331,  243,  215,   49,  622,

      244,   50,  331,  328,  696,   50,   51,  363,   50,  245,
       50,  208,  208,  250,   54,  249,   55,   50,   56,  629,
      208,  208,  331,  326,  278,  251,  696,  208,  208,  208,
      208,  208,  208,  208,  208,  278,  216,  252,  489,  489,
      328,  250,  696,  249,  490,  490,  696,  208,  208,  326,
      208,  208,  278,  251,  208,  208,  208,  208,  208,  208,
      208,  208,  278,  216,   49,  252,  328,   50,  253,  208,
      208,   50,   51,  489,   50,  326,   50,  208,  208,  490,
       54,  254,   55,   50,   56,  208,  208,  326,  208,  208,
      255,  257,  328,  256,  364,  253,  208,  208,  208,  208,

      208,  208,  489,  217,  328,  208,  208,  326,  490,  254,
      331,  489,  208,  208,  489,  208,  208,  490,  255,  257,
      490,  256,  364,  489,  328,  208,  208,  208,  208,  490,
      217,   49,  208,  208,   50,  208,  208,  331,   50,   51,
      258,   50,  489,   50,  326,  208,  259,   54,  490,   55,
       50,   56,  260,  208,  208,  208,  696,  261,  696,  208,
      208,  328,  208,  208,  208,  208,  263,  262,  258,  696,
      218,  219,  208,  259,  208,  208,  326,  208,  208,  260,
      208,  208,  208,  696,  264,  261,  208,  208,  208,  208,
      696,  208,  208,  328,  263,  262,  696,  218,  219,  208,

      208,  208,  208,  348,  208,  208,  196,  331,  122,  696,
      123,  696,  264,  696,  696,  208,  208,  696,  696,  124,
      124,  124,  200,  331,  367,  201,  208,  208,  696,  201,
      202,  348,  201,  696,  201,  331,  200,  696,  204,  266,
      205,  201,  206,  266,  267,  271,  266,  272,  266,  273,
      331,  696,  268,  331,  269,  266,  270,  696,  274,  274,
      274,  271,  696,  272,  271,  273,  272,  696,  273,  331,
      696,  696,  696,  696,  274,  274,  274,  274,  274,  274,
      201,  331,  696,  201,  201,  271,  696,  272,  696,  273,
      696,  555,  546,  322,  696,  272,  331,  273,  274,  274,

      274,  696,  200,  696,  201,  201,  274,  274,  274,  201,
      202,  331,  201,  556,  201,  344,   49,  696,  204,   50,
      205,  201,  206,   50,   51,  696,   50,  331,   50,  696,
      696,  696,   54,  696,   55,   50,   56,   49,  696,  331,
       50,  556,  696,  344,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  331,   55,   50,   56,   49,  696,
      696,   50,  696,  696,  696,   50,   51,  696,   50,  279,
       50,  696,   49,  696,   54,   50,   55,   50,   56,   50,
       51,  310,   50,  278,   50,  278,  696,  696,   54,  696,
       55,   50,   56,  696,  278,  696,  278,  279,   49,  696,

      696,   50,  696,  552,  562,   50,   51,  696,   50,  310,
       50,  278,   49,  278,   54,   50,   55,   50,   56,   50,
       51,  278,   50,  278,   50,  554,   49,  696,   54,   50,
       55,   50,   56,   50,   51,  696,   50,  696,   50,  696,
      696,  696,   54,  280,   55,   50,   56,   49,  696,  696,
       50,  563,  553,  554,   50,   51,  311,   50,  278,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  696,  278,
      280,   49,  696,  564,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  311,  696,  278,   54,  696,   55,
       50,   56,   49,  573,  562,   50,  278,  696,  696,   50,

       51,  564,   50,  696,   50,  281,   49,  696,   54,   50,
       55,   50,   56,   50,   51,  574,   50,  696,   50,  278,
      696,  696,   54,  696,   55,   50,   56,  696,  696,  696,
      278,  696,  696,  281,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  574,   50,  696,   50,  278,   49,  696,
       54,   50,   55,   50,   56,   50,   51,  278,   50,  282,
       50,  696,  298,  696,   54,  314,   55,   50,   56,  331,
      696,  278,  696,  278,  696,  303,  696,  696,  350,  696,
      696,  696,  278,  696,  278,  331,  696,  282,   49,  304,
      696,   50,  696,  314,  696,   50,   51,  331,   50,  278,

       50,  278,  278,  303,   54,  350,   55,   50,   56,  278,
      278,  278,  331,  278,  696,  316,  304,  283,  696,  696,
      696,  278,  278,  696,  315,  696,  696,  696,  696,  318,
      278,  696,  696,  278,  696,  319,  696,  696,  278,  696,
      278,  278,  316,  696,  278,  283,   49,  696,  278,   50,
      278,  315,  278,   50,   51,  278,   50,  318,   50,  696,
      278,  696,   54,  319,   55,   50,   56,  278,  320,  278,
      278,  331,  278,  278,  696,  696,  696,  696,  278,  278,
      358,  278,  278,  696,  278,  284,  696,  331,  696,  271,
      696,  272,  696,  273,  696,  278,  320,  696,  278,  331,

      696,  278,  274,  274,  274,  278,  696,  358,  278,  696,
      696,  278,  284,   49,  331,  696,   50,  696,  696,  696,
       50,   51,  322,   50,  272,   50,  273,  696,  696,   54,
      696,   55,   50,   56,  696,  274,  274,  274,  696,  696,
      696,  266,  322,  696,  272,  322,  273,  272,  696,  273,
      696,  696,  696,  285,  696,  274,  274,  274,  274,  274,
      274,  266,  266,  696,  266,  696,  696,  200,  696,  696,
      201,  696,  696,  696,  201,  202,  696,  201,  696,  201,
      285,   49,  696,  204,   50,  205,  201,  206,   50,   51,
      696,   50,  696,   50,  696,   49,  696,   54,   50,   55,

       50,   56,   50,   51,  696,   50,  331,   50,  696,  696,
      331,   54,  352,   55,   50,   56,  696,   49,  696,  286,
       50,  353,  331,  696,   50,   51,  331,   50,  322,   50,
      272,  696,  273,   54,  331,   55,   50,   56,  331,  696,
      352,  274,  274,  274,  696,  696,  286,   49,  353,  331,
       50,  696,  696,  331,   50,   51,  696,   50,  696,   50,
      696,   49,  696,   54,   50,   55,   50,   56,   50,   51,
      696,   50,  365,   50,  331,   49,  696,   54,   50,   55,
       50,   56,   50,   51,  696,   50,  696,   50,  287,   49,
      331,   54,   50,   55,   50,   56,   50,   51,  696,   50,

      365,   50,  331,  696,  696,   54,  696,   55,   50,   56,
      349,  331,  696,  331,  696,  287,   49,  331,  696,   50,
      696,  696,  354,   50,   51,  696,   50,  331,   50,  331,
      696,  696,   54,  696,   55,   50,   56,  331,  349,  331,
      696,  331,  351,  355,  696,  288,  696,  696,  331,  354,
      696,  696,  696,  331,  331,  696,  331,  696,  696,  696,
      696,  696,  696,  696,  331,  331,  696,  356,  696,  696,
      351,  355,  331,  288,   49,  696,  331,   50,  359,  696,
      331,   50,   51,  331,   50,  331,   50,  696,  331,  331,
       54,  331,   55,   50,   56,  356,  361,  696,  360,  331,

      331,  331,  696,  331,  696,  331,  359,  696,  696,  696,
      696,  331,  362,  331,  289,  331,  696,  331,  696,  331,
      696,  696,  696,  361,  696,  360,  331,  696,  331,  696,
      696,  331,  331,  696,  696,  366,  696,  696,  696,  362,
      331,  289,   49,  696,  696,   50,  331,  696,  696,   50,
       51,  423,   50,  424,   50,  425,  331,  696,   54,  696,
       55,   50,   56,  366,  426,  426,  426,  696,  331,  200,
      696,  696,  201,  696,  696,  696,  201,  202,  290,  201,
      696,  201,  696,  331,  696,  204,  696,  205,  201,  206,
      696,  696,  696,   49,  696,  696,   50,  696,  696,  696,

       50,   51,  696,   50,  696,   50,  290,   49,  696,   54,
       50,   55,   50,   56,   50,   51,  696,   50,  696,   50,
      696,   49,  696,   54,   50,   55,   50,   56,   50,   51,
      696,   50,  696,   50,  423,  696,  424,   54,  425,   55,
       50,   56,  696,   49,  696,  291,   50,  426,  426,  426,
       50,   51,  469,   50,  470,   50,  471,  696,  696,   54,
      696,   55,   50,   56,  696,  472,  472,  472,  696,  696,
      696,  696,  291,   49,  696,  696,   50,  696,  696,  696,
       50,   51,  696,   50,  696,   50,  696,  696,  696,   54,
      696,   55,   50,   56,   49,  696,  696,   50,  696,  696,

      696,   50,   51,  696,   50,  292,   50,  696,   49,  696,
       54,   50,   55,   50,   56,   50,   51,  469,   50,  470,
       50,  471,  696,  696,   54,  696,   55,   50,   56,  696,
      472,  472,  472,  292,   49,  696,  447,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,   49,  696,
       54,   50,   55,   50,   56,   50,   51,  696,   50,  696,
       50,  696,  696,  696,   54,  696,   55,   50,   56,   49,
      696,  696,   50,  696,  293,  696,   50,   51,  469,   50,
      470,   50,  471,  696,  696,   54,  696,   55,   50,   56,
      696,  472,  472,  472,  696,  696,  696,  447,  447,  696,

      696,  293,   49,  696,  696,   50,  696,  696,  696,   50,
       51,  696,   50,  696,   50,  696,   49,  696,   54,   50,
       55,   50,   56,   50,   51,  696,   50,  294,   50,  696,
       49,  696,   54,   50,   55,   50,   56,   50,   51,  469,
       50,  470,   50,  471,  696,  696,   54,  696,   55,   50,
       56,  696,  472,  472,  472,  294,   49,  696,  447,   50,
      696,  696,  696,   50,   51,  696,   50,  696,   50,  696,
       49,  696,   54,   50,   55,   50,   56,   50,   51,  696,
       50,  696,   50,  696,  696,  696,   54,  696,   55,   50,
       56,  696,  367,  696,  295,  116,  696,  399,  696,  116,

      117,  485,  116,  470,  116,  471,  696,  696,  118,  696,
      119,  116,  120,  696,  472,  472,  472,  696,  696,  696,
      696,  295,   49,  696,  696,   50,  696,  696,  696,   50,
       51,  696,   50,  696,   50,  696,  200,  696,   54,  201,
       55,   50,   56,  201,  202,  696,  201,  696,  201,  696,
       49,  296,  204,   50,  205,  201,  206,   50,   51,  485,
       50,  470,   50,  471,  696,  696,   54,  696,   55,   50,
       56,  696,  472,  472,  472,  696,  696,  696,  464,  296,
       49,  696,  696,   50,  696,  696,  696,   50,   51,  696,
       50,  696,   50,  696,  696,  696,   54,  696,   55,   50,

       56,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  297,   49,  696,   54,   50,   55,
       50,   56,   50,   51,  696,   50,  696,   50,  696,   49,
      696,   54,   50,   55,   50,   56,   50,   51,  696,   50,
      696,   50,  297,   49,  696,   54,   50,   55,   50,   56,
       50,   51,  696,   50,  696,   50,  696,   49,  696,   54,
       50,   55,   50,   56,   50,   51,  696,   50,  696,   50,
      299,  696,  696,   54,  696,   55,   50,   56,  696,  696,
      696,  300,  696,   49,  696,  696,   50,  696,  696,  696,
       50,   51,  485,   50,  470,   50,  471,  696,  299,   54,

      696,   55,   50,   56,  696,  472,  472,  472,  300,   49,
      696,  464,   50,  696,  696,  696,   50,   51,  696,   50,
      696,   50,  696,   49,  696,   54,   50,   55,   50,   56,
       50,   51,  696,   50,  696,   50,  696,  200,  696,   54,
      201,   55,   50,   56,  201,  202,  696,  201,  696,  201,
      332,   49,  696,  204,   50,  205,  201,  206,   50,   51,
      485,   50,  470,   50,  471,  696,  696,   54,  696,   55,
       50,   56,  696,  472,  472,  472,  696,  332,   49,  464,
      464,   50,  696,  696,  696,   50,   51,  696,   50,  696,
       50,  469,  696,  470,   54,  471,   55,   50,   56,  333,

       49,  696,  696,   50,  472,  472,  472,   50,   51,  696,
       50,  696,   50,  696,   49,  696,   54,   50,   55,   50,
       56,   50,   51,  696,   50,  696,   50,  333,   49,  696,
       54,   50,   55,   50,   56,   50,   51,  696,   50,  696,
       50,  696,  696,  696,   54,  696,   55,   50,   56,   49,
      696,  696,   50,  696,  696,  696,   50,   51,  696,   50,
      696,   50,  334,   49,  696,   54,   50,   55,   50,   56,
       50,   51,  696,   50,  696,   50,  696,   49,  696,   54,
       50,   55,   50,   56,   50,   51,  696,   50,  696,   50,
      334,   49,  696,   54,   50,   55,   50,   56,   50,   51,

      696,   50,  696,   50,  696,   49,  696,   54,   50,   55,
       50,   56,   50,   51,  696,   50,  696,   50,  696,   49,
      696,   54,   50,   55,   50,   56,   50,   51,  696,   50,
      696,   50,  335,   49,  696,   54,   50,   55,   50,   56,
       50,   51,  485,   50,  470,   50,  471,  696,  696,   54,
      696,   55,   50,   56,  696,  472,  472,  472,  696,  335,
       49,  696,  696,   50,  696,  696,  696,   50,   51,  696,
       50,  696,   50,  696,  446,  696,   54,  447,   55,   50,
       56,  447,  448,  336,  447,  696,  447,  696,  200,  696,
      450,  201,  451,  447,  452,  201,  202,  696,  201,  696,

      201,  696,  696,  696,  204,  696,  205,  201,  206,  696,
      696,  336,   49,  696,  696,   50,  696,  696,  696,   50,
       51,  696,   50,  696,   50,  696,  696,  696,   54,  696,
       55,   50,   56,   49,  696,  696,   50,  696,  696,  696,
       50,   51,  696,   50,  696,   50,  337,   49,  696,   54,
       50,   55,   50,   56,   50,   51,  696,   50,  696,   50,
      696,   49,  696,   54,   50,   55,   50,   56,   50,   51,
      696,   50,  696,   50,  337,   49,  696,   54,   50,   55,
       50,   56,   50,   51,  696,   50,  696,   50,  696,   49,
      696,   54,   50,   55,   50,   56,   50,   51,  696,   50,

      696,   50,  696,  696,  696,   54,  696,   55,   50,   56,
      338,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  696,   49,  696,   54,   50,   55,
       50,   56,   50,   51,  696,   50,  696,   50,  338,   49,
      696,   54,   50,   55,   50,   56,   50,   51,  696,   50,
      696,   50,  696,  446,  696,   54,  447,   55,   50,   56,
      447,  448,  696,  447,  696,  447,  696,  696,  696,  450,
      696,  451,  447,  452,  446,  696,  696,  464,  696,  339,
      696,  464,  465,  696,  464,  696,  464,  696,  696,  696,
      466,  696,  467,  464,  468,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  339,   49,  696,  696,
       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      696,  446,  696,   54,  447,   55,   50,   56,  447,  448,
      696,  447,  696,  447,  696,  696,  696,  450,  696,  451,
      447,  452,  200,  696,  696,  201,  696,  340,  696,  201,
      202,  696,  201,  696,  201,  696,  696,  696,  204,  696,
      205,  201,  206,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  340,   49,  696,  696,   50,  696,
      696,  696,   50,   51,  696,   50,  696,   50,  696,   49,
      696,   54,   50,   55,   50,   56,   50,   51,  696,   50,

      696,   50,  696,   49,  341,   54,   50,   55,   50,   56,
       50,   51,  696,   50,  696,   50,  696,  696,  696,   54,
      342,   55,   50,   56,  696,  696,  446,  696,  696,  447,
      696,  696,  341,  447,  448,  696,  447,  696,  447,  696,
      696,  696,  450,  696,  451,  447,  452,  342,   49,  696,
      696,   50,  696,  696,  696,   50,   51,  696,   50,  696,
       50,  696,  200,  696,   54,  201,   55,   50,   56,  201,
      202,  696,  201,  696,  201,  696,  696,  696,  204,  696,
      205,  201,  206,   49,  696,  696,   50,  696,  373,  696,
       50,   51,  696,   50,  696,   50,  696,  696,  696,   54,

      696,   55,   50,   56,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  373,   49,  696,  696,   50,
      696,  696,  696,   50,   51,  696,   50,  696,   50,  696,
      696,  696,   54,  696,   55,   50,   56,   49,  696,  696,
       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      374,  446,  696,   54,  447,   55,   50,   56,  447,  448,
      696,  447,  696,  447,  696,  200,  696,  450,  201,  451,
      447,  452,  201,  202,  696,  201,  696,  201,  374,   49,
      696,  204,   50,  205,  201,  206,   50,   51,  696,   50,
      696,   50,  696,  696,  696,   54,  696,   55,   50,   56,

      375,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  696,   49,  696,   54,   50,   55,
       50,   56,   50,   51,  696,   50,  696,   50,  375,   49,
      696,   54,   50,   55,   50,   56,   50,   51,  696,   50,
      696,   50,  696,  446,  696,   54,  447,   55,   50,   56,
      447,  448,  376,  447,  696,  447,  696,  200,  696,  450,
      201,  451,  447,  452,  201,  202,  696,  201,  696,  201,
      696,  696,  696,  204,  696,  205,  201,  206,  696,  696,
      376,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  696,   49,  696,   54,   50,   55,

       50,   56,   50,   51,  696,   50,  696,   50,  696,  696,
      696,   54,  696,   55,   50,   56,   49,  696,  696,   50,
      696,  377,  696,   50,   51,  696,   50,  696,   50,  696,
      696,  696,   54,  696,   55,   50,   56,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  377,   49,
      696,  696,   50,  696,  696,  696,   50,   51,  696,   50,
      696,   50,  696,  446,  696,   54,  447,   55,   50,   56,
      447,  448,  696,  447,  696,  447,  696,  696,  696,  450,
      696,  451,  447,  452,  200,  696,  696,  201,  696,  378,
      696,  201,  202,  696,  201,  696,  201,  696,  696,  696,

      204,  696,  205,  201,  206,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  378,   49,  696,  696,
       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      696,   49,  696,   54,   50,   55,   50,   56,   50,   51,
      696,   50,  696,   50,  696,   49,  696,   54,   50,   55,
       50,   56,   50,   51,  696,   50,  379,   50,  696,   49,
      696,   54,   50,   55,   50,   56,   50,   51,  696,   50,
      696,   50,  696,  696,  696,   54,  696,   55,   50,   56,
      696,  696,  696,  379,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,   49,  696,

       54,   50,   55,   50,   56,   50,   51,  696,   50,  696,
       50,  696,  696,  696,   54,  696,   55,   50,   56,  446,
      696,  696,  447,  696,  696,  696,  447,  448,  696,  447,
      380,  447,  696,  200,  696,  450,  201,  451,  447,  452,
      201,  202,  696,  201,  696,  201,  696,  696,  696,  204,
      696,  205,  201,  206,  696,  696,  696,  380,   49,  696,
      696,   50,  696,  696,  696,   50,   51,  696,   50,  696,
       50,  696,   49,  696,   54,   50,   55,   50,   56,   50,
       51,  696,   50,  696,   50,  696,  696,  696,   54,  696,
       55,   50,   56,  381,  446,  696,  696,  447,  696,  696,

      696,  447,  448,  696,  447,  696,  447,  696,  200,  696,
      450,  201,  451,  447,  452,  201,  202,  696,  201,  696,
      201,  381,   49,  696,  204,   50,  205,  201,  206,   50,
       51,  696,   50,  696,   50,  696,   49,  696,   54,   50,
       55,   50,   56,   50,   51,  696,   50,  382,   50,  696,
      446,  696,   54,  447,   55,   50,   56,  447,  448,  696,
      447,  696,  447,  696,  696,  696,  450,  696,  451,  447,
      452,  696,  696,  696,  696,  382,   49,  696,  696,   50,
      696,  696,  696,   50,   51,  696,   50,  696,   50,  696,
      200,  696,   54,  201,   55,   50,   56,  201,  202,  696,

      201,  696,  201,  696,  696,  696,  204,  696,  205,  201,
      206,   49,  696,  696,   50,  696,  383,  696,   50,   51,
      696,   50,  696,   50,  696,  696,  696,   54,  696,   55,
       50,   56,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  383,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  446,  696,  696,  447,  696,
      696,  696,  447,  448,  696,  447,  384,  447,  696,  200,
      696,  450,  201,  451,  447,  452,  201,  202,  696,  201,
      696,  201,  696,  696,  696,  204,  696,  205,  201,  206,

      696,  696,  696,  696,  384,   49,  696,  696,   50,  696,
      696,  696,   50,   51,  696,   50,  696,   50,  696,   49,
      696,   54,   50,   55,   50,   56,   50,   51,  696,   50,
      696,   50,  696,  696,  696,   54,  696,   55,   50,   56,
      696,  446,  696,  385,  447,  696,  696,  696,  447,  448,
      696,  447,  696,  447,  696,  696,  696,  450,  696,  451,
      447,  452,  696,  696,  696,  696,  696,  696,  696,  696,
      385,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  696,  696,  696,   54,  696,   55,
       50,   56,  386,  200,  696,  696,  201,  696,  696,  696,

      201,  202,  696,  201,  696,  201,  696,   49,  696,  204,
       50,  205,  201,  206,   50,   51,  696,   50,  696,   50,
      386,   49,  696,   54,   50,   55,   50,   56,   50,   51,
      696,   50,  696,   50,  696,  446,  696,   54,  447,   55,
       50,   56,  447,  448,  696,  447,  696,  447,  696,  200,
      696,  450,  201,  451,  447,  452,  201,  202,  696,  201,
      696,  201,  696,  696,  696,  204,  387,  205,  201,  206,
       49,  696,  696,   50,  696,  696,  696,   50,   51,  696,
       50,  696,   50,  696,  696,  696,   54,  696,   55,   50,
       56,  696,  696,  387,   49,  696,  696,   50,  696,  696,

      696,   50,   51,  696,   50,  696,   50,  696,  446,  696,
       54,  447,   55,   50,   56,  447,  448,  696,  447,  696,
      447,  696,  696,  696,  450,  696,  451,  447,  452,  200,
      696,  696,  201,  696,  388,  696,  201,  202,  696,  201,
      696,  201,  696,  696,  696,  204,  696,  205,  201,  206,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  388,   49,  696,  696,   50,  696,  696,  696,   50,
       51,  696,   50,  696,   50,  696,   49,  696,   54,   50,
       55,   50,   56,   50,   51,  696,   50,  696,   50,  696,
      696,  696,   54,  696,   55,   50,   56,  696,  446,  696,

      389,  447,  696,  696,  696,  447,  448,  696,  447,  696,
      447,  696,  696,  696,  450,  696,  451,  447,  452,  696,
      696,  696,  696,  696,  696,  696,  696,  389,   49,  696,
      696,   50,  696,  696,  696,   50,   51,  696,   50,  696,
       50,  696,  200,  696,   54,  201,   55,   50,   56,  201,
      202,  696,  201,  696,  201,  696,  696,  696,  204,  696,
      205,  201,  206,  390,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  446,  696,
       54,  447,   55,   50,   56,  447,  448,  696,  447,  696,
      447,  390,   49,  696,  450,   50,  451,  447,  452,   50,

       51,  696,   50,  696,   50,  696,  200,  696,   54,  201,
       55,   50,   56,  201,  202,  696,  201,  696,  201,  696,
       49,  696,  204,   50,  205,  201,  206,   50,   51,  696,
       50,  696,   50,  391,  446,  696,   54,  447,   55,   50,
       56,  447,  448,  696,  447,  696,  447,  696,  696,  696,
      450,  696,  451,  447,  452,  696,  696,  696,  696,  696,
      391,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  696,  696,  696,   54,  696,   55,
       50,   56,  696,  200,  696,  696,  201,  696,  696,  696,
      201,  202,  696,  201,  392,  201,  696,   49,  696,  204,

       50,  205,  201,  206,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  696,  696,
      696,  696,  392,   49,  696,  696,   50,  696,  696,  696,
       50,   51,  696,   50,  696,   50,  696,  446,  696,   54,
      447,   55,   50,   56,  447,  448,  696,  447,  696,  447,
      696,  696,  696,  450,  696,  451,  447,  452,  200,  696,
      696,  201,  696,  393,  696,  201,  202,  696,  201,  696,
      201,  696,  696,  696,  204,  696,  205,  201,  206,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      393,   49,  696,  696,   50,  696,  696,  696,   50,   51,

      696,   50,  696,   50,  696,   49,  696,   54,   50,   55,
       50,   56,   50,   51,  696,   50,  696,   50,  696,  696,
      696,   54,  696,   55,   50,   56,  394,  446,  696,  696,
      447,  696,  696,  696,  447,  448,  696,  447,  696,  447,
      696,  200,  696,  450,  201,  451,  447,  452,  201,  202,
      696,  201,  696,  201,  394,   49,  696,  204,   50,  205,
      201,  206,   50,   51,  696,   50,  696,   50,  696,   49,
      696,   54,   50,   55,   50,   56,   50,   51,  395,   50,
      696,   50,  696,  446,  696,   54,  447,   55,   50,   56,
      447,  448,  696,  447,  696,  447,  696,  696,  696,  450,

      696,  451,  447,  452,  696,  696,  395,   49,  696,  696,
       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  200,  696,
      696,  201,  696,  696,  696,  201,  202,  696,  201,  696,
      201,  396,   49,  696,  204,   50,  205,  201,  206,   50,
       51,  696,   50,  696,   50,  696,  446,  696,   54,  447,
       55,   50,   56,  447,  448,  696,  447,  696,  447,  396,
       49,  696,  450,   50,  451,  447,  452,   50,   51,  696,
       50,  696,   50,  696,  696,  696,   54,  696,   55,   50,
       56,  200,  696,  696,  201,  696,  696,  696,  201,  202,

      696,  201,  696,  201,  397,   49,  696,  204,   50,  205,
      201,  206,   50,   51,  696,   50,  696,   50,  696,  446,
      696,   54,  447,   55,   50,   56,  447,  448,  696,  447,
      696,  447,  397,   49,  696,  450,   50,  451,  447,  452,
       50,   51,  696,   50,  696,   50,  696,  200,  696,   54,
      201,   55,   50,   56,  201,  202,  696,  201,  696,  201,
      696,   49,  696,  204,   50,  205,  201,  206,   50,   51,
      696,   50,  696,   50,  696,  398,  696,   54,  696,   55,
       50,   56,  696,  696,  696,  696,  696,  696,  696,  446,
      696,  696,  447,  696,  696,  696,  447,  448,  696,  447,

      696,  447,  398,   49,  696,  450,   50,  451,  447,  452,
       50,   51,  696,   50,  696,   50,  696,  200,  696,   54,
      201,   55,   50,   56,  201,  202,  696,  201,  403,  201,
      696,   49,  696,  204,   50,  205,  201,  206,   50,   51,
      696,   50,  696,   50,  696,  696,  696,   54,  696,   55,
       50,   56,  696,  696,  696,  696,  403,   49,  696,  696,
       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  446,  696,
      696,  447,  696,  696,  696,  447,  448,  696,  447,  404,
      447,  696,  200,  696,  450,  201,  451,  447,  452,  201,

      202,  696,  201,  696,  201,  696,  696,  696,  204,  696,
      205,  201,  206,  696,  696,  696,  696,  404,   49,  696,
      696,   50,  696,  696,  696,   50,   51,  696,   50,  696,
       50,  696,   49,  696,   54,   50,   55,   50,   56,   50,
       51,  696,   50,  696,   50,  696,  696,  696,   54,  696,
       55,   50,   56,  446,  696,  696,  447,  696,  405,  696,
      447,  448,  696,  447,  696,  447,  696,  696,  696,  450,
      696,  451,  447,  452,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  405,   49,  696,  696,   50,
      696,  696,  696,   50,   51,  696,   50,  696,   50,  696,

      200,  696,   54,  201,   55,   50,   56,  201,  202,  696,
      201,  696,  201,  696,  696,  696,  204,  696,  205,  201,
      206,  406,   49,  696,  696,   50,  696,  696,  696,   50,
       51,  696,   50,  696,   50,  696,  446,  696,   54,  447,
       55,   50,   56,  447,  448,  696,  447,  696,  447,  406,
       49,  696,  450,   50,  451,  447,  452,   50,   51,  696,
       50,  696,   50,  696,  200,  696,   54,  201,   55,   50,
       56,  201,  202,  696,  201,  407,  201,  696,   49,  696,
      204,   50,  205,  201,  206,   50,   51,  696,   50,  696,
       50,  696,  696,  696,   54,  696,   55,   50,   56,  696,

      696,  696,  696,  407,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  408,  446,  696,  696,  447,
      696,  696,  696,  447,  448,  696,  447,  696,  447,  696,
      200,  696,  450,  201,  451,  447,  452,  201,  202,  696,
      201,  696,  201,  408,   49,  696,  204,   50,  205,  201,
      206,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  446,  696,  696,  447,  696,
      696,  696,  447,  448,  696,  447,  696,  447,  409,  200,
      696,  450,  201,  451,  447,  452,  201,  202,  696,  201,

      696,  201,  696,  446,  696,  204,  447,  205,  201,  206,
      447,  448,  696,  447,  696,  447,  409,   49,  696,  450,
       50,  451,  447,  452,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  446,  696,
      696,  447,  696,  696,  696,  447,  448,  696,  447,  696,
      447,  410,  446,  696,  450,  447,  451,  447,  452,  447,
      448,  696,  447,  696,  447,  696,  446,  696,  450,  447,
      451,  447,  452,  447,  448,  696,  447,  696,  447,  410,
       49,  696,  450,   50,  451,  447,  452,   50,   51,  696,
       50,  696,   50,  696,  446,  696,   54,  447,   55,   50,

       56,  447,  448,  696,  447,  411,  447,  696,  446,  696,
      450,  447,  451,  447,  452,  447,  448,  696,  447,  696,
      447,  696,  696,  696,  450,  696,  451,  447,  452,  696,
      696,  696,  696,  411,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  696,  696,  696,  696,  696,
      696,  696,  696,  412,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  412,   49,  696,  696,   50,  696,  696,  696,   50,

       51,  696,   50,  696,   50,  696,  696,  696,   54,  696,
       55,   50,   56,  696,  696,  413,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  413,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  696,  696,  696,  414,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  414,   49,  696,  696,

       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  415,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  415,   49,  696,  696,   50,  696,  696,  696,
       50,   51,  696,   50,  696,   50,  696,  696,  696,   54,
      696,   55,   50,   56,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  416,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  416,   49,
      696,  696,   50,  696,  696,  696,   50,   51,  696,   50,
      696,   50,  696,  696,  696,   54,  696,   55,   50,   56,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  417,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  417,   49,  696,  696,   50,  696,  696,  696,   50,
       51,  696,   50,  696,   50,  696,  696,  696,   54,  696,
       55,   50,   56,  696,  696,  696,  418,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  418,   49,  696,  696,   50,  696,
      696,  696,   50,   51,  696,   50,  696,   50,  696,  696,
      696,   54,  696,   55,   50,   56,  696,  696,  696,  696,
      419,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  419,   49,
      696,  696,   50,  696,  696,  696,   50,   51,  696,   50,
      696,   50,  696,  696,  696,   54,  696,   55,   50,   56,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  420,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  420,   49,  696,  696,
       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  421,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  421,   49,  696,  696,   50,  696,
      696,  696,   50,   51,  696,   50,  696,   50,  696,  696,
      696,   54,  696,   55,   50,   56,  422,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  422,   49,  696,  696,   50,  696,

      696,  696,   50,   51,  696,   50,  696,   50,  696,  696,
      696,   54,  696,   55,   50,   56,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      431,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  431,   49,
      696,  696,   50,  696,  696,  696,   50,   51,  696,   50,
      696,   50,  696,  696,  696,   54,  696,   55,   50,   56,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  432,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  432,   49,  696,  696,   50,  696,
      696,  696,   50,   51,  696,   50,  696,   50,  696,  696,
      696,   54,  696,   55,   50,   56,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  433,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      433,   49,  696,  696,   50,  696,  696,  696,   50,   51,

      696,   50,  696,   50,  696,  696,  696,   54,  696,   55,
       50,   56,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  434,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  434,   49,
      696,  696,   50,  696,  696,  696,   50,   51,  696,   50,
      696,   50,  696,  696,  696,   54,  696,   55,   50,   56,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  435,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  435,   49,  696,  696,
       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  696,  696,
      696,  436,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  436,
       49,  696,  696,   50,  696,  696,  696,   50,   51,  696,
       50,  696,   50,  696,  696,  696,   54,  696,   55,   50,

       56,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  437,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  437,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  696,  696,  696,  696,  438,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  438,   49,  696,
      696,   50,  696,  696,  696,   50,   51,  696,   50,  696,
       50,  696,  696,  696,   54,  696,   55,   50,   56,  696,
      696,  696,  696,  439,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  439,   49,  696,  696,   50,  696,  696,  696,   50,
       51,  696,   50,  696,   50,  696,  696,  696,   54,  696,
       55,   50,   56,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  440,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      440,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  696,  696,  696,   54,  696,   55,
       50,   56,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      441,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  441,   49,  696,

      696,   50,  696,  696,  696,   50,   51,  696,   50,  696,
       50,  696,  696,  696,   54,  696,   55,   50,   56,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  442,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  442,  446,  696,  696,  447,  696,  696,
      696,  447,  448,  696,  447,  449,  447,  426,  426,  426,
      450,  696,  451,  447,  452,   49,  696,  696,   50,  696,
      696,  696,   50,   51,  696,   50,  696,   50,  696,  696,

      696,   54,  696,   55,   50,   56,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  457,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      457,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  696,  696,  696,   54,  696,   55,
       50,   56,  696,  696,  696,  696,  696,  458,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  458,   49,  696,  696,   50,
      696,  696,  696,   50,   51,  696,   50,  696,   50,  696,
      696,  696,   54,  696,   55,   50,   56,  696,  696,  696,
      696,  696,  696,  696,  696,  459,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  459,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  460,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  460,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  461,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  461,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  696,  696,  462,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  462,   49,  696,  696,   50,
      696,  696,  696,   50,   51,  696,   50,  696,   50,  696,
      696,  696,   54,  696,   55,   50,   56,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  463,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  463,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,

       54,  696,   55,   50,   56,  479,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  479,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  480,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  480,   49,  696,

      696,   50,  696,  696,  696,   50,   51,  696,   50,  696,
       50,  696,  696,  696,   54,  696,   55,   50,   56,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  481,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  481,   49,  696,  696,   50,
      696,  696,  696,   50,   51,  696,   50,  696,   50,  696,
      696,  696,   54,  696,   55,   50,   56,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  482,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  482,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  696,  696,  696,  696,  483,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  483,   49,  696,
      696,   50,  696,  696,  696,   50,   51,  696,   50,  696,

       50,  696,  696,  696,   54,  696,   55,   50,   56,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  484,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  484,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  696,  696,  497,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  497,   49,  696,  696,   50,
      696,  696,  696,   50,   51,  696,   50,  696,   50,  696,
      696,  696,   54,  696,   55,   50,   56,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      498,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  498,   49,
      696,  696,   50,  696,  696,  696,   50,   51,  696,   50,
      696,   50,  696,  696,  696,   54,  696,   55,   50,   56,
      696,  696,  696,  696,  696,  696,  696,  696,  499,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  499,   49,  696,  696,
       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  696,  696,
      696,  696,  696,  696,  696,  696,  500,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  500,   49,  696,  696,   50,  696,
      696,  696,   50,   51,  696,   50,  696,   50,  696,  696,

      696,   54,  696,   55,   50,   56,  696,  696,  696,  696,
      696,  696,  696,  696,  501,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  501,   49,  696,  696,   50,  696,  696,  696,
       50,   51,  696,   50,  696,   50,  696,  696,  696,   54,
      696,   55,   50,   56,  696,  696,  696,  696,  509,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  509,   49,  696,  696,

       50,  696,  696,  696,   50,   51,  696,   50,  696,   50,
      696,  696,  696,   54,  696,   55,   50,   56,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  510,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      510,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  696,  696,  696,   54,  696,   55,
       50,   56,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  511,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  511,   49,  696,  696,   50,  696,
      696,  696,   50,   51,  696,   50,  696,   50,  696,  696,
      696,   54,  696,   55,   50,   56,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  512,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  512,   49,  696,
      696,   50,  696,  696,  696,   50,   51,  696,   50,  696,

       50,  696,  696,  696,   54,  696,   55,   50,   56,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  520,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      520,   49,  696,  696,   50,  696,  696,  696,   50,   51,
      696,   50,  696,   50,  696,  696,  696,   54,  696,   55,
       50,   56,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  521,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  521,   49,  696,  696,   50,  696,  696,
      696,   50,   51,  696,   50,  696,   50,  696,  696,  696,
       54,  696,   55,   50,   56,  696,  696,  696,  696,  696,
      696,  522,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  522,
       45,   45,  696,   45,   45,   45,   45,   47,   47,  696,
       47,   47,   47,   47,   57,  696,  696,   57,  125,  696,
      125,  127,  696,  696,  127,  197,  197,  696,  197,  197,

      197,  197,  199,  199,  696,  199,  199,  199,  199,  207,
      696,  696,  207,  208,  696,  696,  208,  275,  696,  275,
      277,  696,  696,  277,  278,  696,  696,  278,  323,  323,
      696,  323,  323,  323,  323,  325,  325,  696,  325,  325,
      325,  325,  329,  696,  696,  696,  696,  329,  330,  696,
      696,  330,  331,  696,  696,  331,  370,  696,  696,  696,
      696,  370,  371,  696,  696,  371,  372,  696,  696,  372,
      400,  696,  696,  696,  696,  400,  401,  696,  696,  401,
      402,  696,  696,  402,  427,  696,  427,  428,  696,  696,
      696,  696,  428,  429,  696,  696,  429,  430,  696,  696,

      430,  443,  443,  696,  443,  443,  443,  443,  445,  445,
      696,  445,  445,  445,  445,  453,  696,  696,  453,  454,
      696,  696,  696,  696,  454,  455,  696,  696,  455,  456,
      696,  696,  456,  473,  696,  473,  475,  696,  696,  475,
      476,  696,  696,  696,  696,  476,  477,  696,  696,  477,
      478,  696,  696,  478,  486,  486,  696,  486,  486,  486,
      486,  488,  488,  696,  488,  488,  488,  488,  492,  696,
      696,  696,  492,  493,  696,  696,  493,  494,  696,  696,
      696,  696,  494,  495,  696,  696,  495,  496,  696,  696,
      496,  504,  696,  696,  696,  504,  505,  696,  696,  505,

      506,  696,  696,  696,  696,  506,  507,  696,  696,  507,
      508,  696,  696,  508,  515,  696,  696,  696,  515,  516,
      696,  696,  516,  517,  696,  696,  696,  696,  517,  518,
      696,  696,  518,  519,  696,  696,  519,  525,  696,  696,
      696,  525,  526,  696,  696,  526,  527,  696,  696,  696,
      696,  527,  528,  696,  696,  528,  529,  696,  696,  529,
      532,  696,  696,  696,  532,  533,  696,  696,  533,  534,
      696,  696,  696,  696,  534,  535,  696,  696,  535,  536,
      696,  696,  536,  539,  696,  696,  696,  539,  540,  696,
      696,  540,  541,  696,  696,  696,  696,  541,  542,  696,

      696,  542,  543,  696,  696,  543,  547,  696,  696,  696,
      547,  548,  696,  696,  548,  549,  696,  696,  696,  696,
      549,  550,  696,  696,  550,  551,  696,  696,  551,  557,
      696,  696,  696,  557,  558,  696,  696,  558,  559,  696,
      696,  696,  696,  559,  560,  696,  696,  560,  561,  696,
      696,  561,  568,  696,  696,  696,  568,  569,  696,  696,
      569,  570,  696,  696,  696,  696,  570,  571,  696,  696,
      571,  572,  696,  696,  572,  580,  696,  696,  696,  580,
      581,  696,  696,  581,  582,  696,  696,  696,  696,  582,
      583,  696,  696,  583,  584,  696,  696,  584,  592,  696,

      696,  696,  592,  593,  696,  696,  593,  594,  696,  696,
      696,  696,  594,  595,  696,  696,  595,  596,  696,  696,
      596,  604,  696,  696,  696,  604,  605,  696,  696,  605,
      606,  696,  696,  696,  696,  606,  607,  696,  696,  607,
      608,  696,  696,  608,  615,  696,  696,  696,  615,  616,
      696,  696,  616,  617,  696,  696,  696,  696,  617,  618,
      696,  696,  618,  619,  696,  696,  619,  624,  696,  696,
      696,  624,  625,  696,  696,  625,  626,  696,  696,  696,
      696,  626,  627,  696,  696,  627,  628,  696,  696,  628,
      631,  696,  696,  696,  631,  632,  696,  696,  632,  633,

      696,  696,  696,  696,  633,  634,  696,  696,  634,  635,
      696,  696,  635,  637,  696,  696,  696,  637,  638,  696,
      696,  638,  639,  696,  696,  696,  696,  639,  640,  696,
      696,  640,  641,  696,  696,  641,  642,  696,  696,  696,
      642,  643,  696,  696,  643,  644,  696,  696,  696,  696,
      644,  645,  696,  696,  645,  646,  696,  696,  646,  647,
      696,  696,  696,  647,  648,  696,  696,  648,  649,  696,
      696,  696,  696,  649,  650,  696,  696,  650,  651,  696,
      696,  651,  652,  696,  696,  696,  652,  653,  696,  696,
      653,  654,  696,  696,  696,  696,  654,  655,  696,  696,

      655,  656,  696,  696,  656,  657,  696,  696,  696,  657,
      658,  696,  696,  658,  659,  696,  696,  696,  696,  659,
      660,  696,  696,  660,  661,  696,  696,  661,  662,  696,
      696,  696,  662,  663,  696,  696,  663,  664,  696,  696,
      696,  696,  664,  665,  696,  696,  665,  666,  696,  696,
      666,  667,  696,  696,  696,  667,  668,  696,  696,  668,
      669,  696,  696,  696,  696,  669,  670,  696,  696,  670,
      671,  696,  696,  671,  672,  696,  696,  696,  672,  673,
      696,  696,  673,  674,  696,  696,  696,  696,  674,  675,
      696,  696,  675,  676,  696,  696,  696,  676,  677,  696,

      696,  677,  678,  696,  696,  696,  696,  678,  679,  696,
      696,  679,  680,  696,  696,  696,  680,  681,  696,  696,
      681,  682,  696,  696,  696,  696,  682,  683,  696,  696,
      696,  683,  684,  696,  696,  684,  685,  696,  696,  696,
      696,  685,  686,  696,  696,  696,  686,  687,  696,  696,
      687,  688,  696,  696,  696,  688,  689,  696,  696,  689,
      690,  696,  696,  696,  690,  691,  696,  696,  691,  692,
      696,  696,  696,  692,  693,  696,  696,  693,  694,  696,
      696,  696,  694,  695,  696,  696,  696,  695,    3,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696
    } ;

static const flex_int16_t yy_chk[9865] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,   17,   17,   22,   24,
       42,   25,   22,   24,   52,   52,   52,   43,   22,   24,
      473,   25,   26,   29,  487,   24,  473,  636,   22,   24,

      487,   25,   26,   29,   30,  115,   22,   24,   30,   25,
       22,   24,   26,   29,   30,   43,   22,   24,    5,   25,
       26,   29,   24,   42,   30,   22,   24,  195,   25,  368,
       26,   29,   30,  115,  368,  275,   30,  630,  489,   26,
       29,  492,   30,  265,  489,    5,   14,  492,  629,   14,
       42,   30,  275,   14,   14,  195,   14,   14,   14,   14,
       14,   14,   14,  238,   14,   14,   14,   19,   28,  238,
       19,  265,   28,  324,   19,   19,   28,   19,  326,   19,
      238,  623,   28,   19,  622,   19,   19,   19,  621,   19,
      324,  238,   28,   39,   32,  326,   28,  238,   32,  514,

       28,   19,  523,   39,   28,   19,   19,  238,   32,  502,
       28,   32,  126,   39,  126,  126,  126,   19,   32,   28,
      614,   39,   32,  203,  203,  203,   32,  514,  244,   19,
      523,   39,   19,   19,   20,  293,   32,   20,   32,  244,
       39,   20,   20,   33,   20,   32,   20,   33,  329,  502,
       20,  293,   20,   20,   20,  370,  244,   33,  276,   20,
      276,  276,  276,  293,  400,  329,  244,   33,  504,   20,
       35,   33,  370,   35,  504,   33,  502,  247,  293,   20,
       35,  400,  428,   35,  613,   33,  515,   20,  247,   50,
       35,   50,  515,   50,   33,  603,  524,   20,   35,  428,

      490,   35,   50,   50,   50,  247,   20,   21,   35,   37,
       35,   21,   36,   37,   21,  247,  488,   35,   21,   36,
       36,   21,  295,   37,  524,   36,   36,   69,   69,   69,
      525,   21,  486,   37,  471,   21,  525,   37,  295,   21,
       36,   37,   21,  470,   66,  466,   21,   36,   36,   21,
      295,   37,   36,   36,   69,   69,   69,  450,   21,   23,
       37,   66,   66,  454,  513,  295,   23,   67,   23,   23,
      298,   38,   66,  476,   38,   38,  494,  445,   23,   23,
      454,   38,  530,  506,   67,   67,  298,   23,   66,   66,
      476,   38,  443,  494,   23,   67,   23,   23,  298,   38,

      506,  425,   38,   38,  513,   23,   23,   27,   27,   38,
      530,   67,   67,  298,  424,   27,   27,   27,   38,   70,
       70,   27,   46,   70,  531,   46,  325,   27,  323,   46,
       46,  513,   46,  537,   46,   27,   27,  554,   46,  517,
       46,   46,   46,   27,   27,   27,   70,   70,   27,   51,
       70,   51,  531,   51,   27,   31,  517,   72,   72,   31,
      321,  537,   51,   51,   51,  554,   31,   31,   51,   31,
       49,   31,   31,   49,   31,  241,  273,   49,   49,  527,
       49,  241,   49,   31,   72,   72,   49,   31,   49,   49,
       49,  272,  241,  248,   31,   31,  527,   31,   31,   31,

      532,   31,   34,  241,  248,   34,  532,  268,   57,  241,
       34,   57,   34,  538,  538,   57,   57,   34,   57,  241,
       57,  248,   34,  539,   57,  534,   57,   57,   57,  539,
       34,  248,   55,   34,   55,  242,   55,  242,   34,  204,
       34,  541,  534,  301,   34,   55,   55,   55,  242,   34,
      199,   55,   55,   56,  556,   56,   68,   56,  541,  301,
       68,   68,  197,  242,  123,  242,   56,   56,   56,   71,
       71,  301,   56,   58,   71,  242,   58,  327,  327,  327,
       58,   58,  556,   58,   68,   58,  301,   68,   68,   58,
       73,   58,   58,   58,  122,   74,   71,   71,   76,   76,

      369,   71,   79,   79,   73,   73,  118,   73,   74,   54,
       74,   74,   58,  369,  369,  369,  237,  369,   73,  544,
      544,  237,  547,   74,   47,   76,   76,  237,  547,   79,
       79,   73,   73,   45,   73,   44,   74,   74,   74,   58,
       59,   77,   18,   59,  237,   77,   77,   59,   59,  237,
       59,  549,   59,  559,  237,   75,   59,   75,   59,   59,
       59,   75,   75,  116,   59,  116,  564,  116,  549,   77,
      559,   15,   77,   77,  565,   12,  116,  116,  116,   78,
       78,   78,  566,   75,    9,   75,  567,    7,   75,   75,
       82,   82,   59,   60,  564,   80,   60,   80,   80,   83,

       60,   60,  565,   60,   84,   60,   78,   78,   78,   60,
      566,   60,   60,   60,  567,   83,   83,   82,   82,    6,
       84,   84,   86,   80,   80,   80,  121,   83,  121,   85,
      121,   60,   84,   85,   85,    3,   86,   86,  274,  121,
      121,  121,   83,   83,    0,   90,   90,   84,   84,  274,
       86,  274,  274,  274,    0,  274,    0,   85,   60,   61,
       85,   85,   61,   86,   86,  574,   61,   61,    0,   61,
        0,   61,   90,   90,   87,   61,   92,   61,   61,   61,
       87,   87,   88,   88,   88,   91,   91,   89,  557,   92,
       92,  568,   61,  574,  557,   89,   89,  568,   93,   93,

      580,    0,   87,    0,   92,    0,  580,   87,   87,   88,
       88,   88,   91,   91,    0,   89,   92,   92,  102,  102,
       61,   62,   89,   89,   62,   93,   93,   95,   62,   62,
      570,   62,  575,   62,   94,   94,   94,   62,  103,   62,
       62,   62,   95,   95,    0,  102,  102,  570,   62,    0,
      582,  103,  103,  592,    0,   95,  449,  449,  449,  592,
      575,   94,   94,   94,  104,  104,  103,  582,    0,   95,
       95,   96,   97,  594,   96,   96,   62,   63,  103,  103,
       63,   97,   97,  252,   63,   63,  576,   63,    0,   63,
      594,  104,  104,   63,  252,   63,   63,   63,   99,   96,

       97,   96,   96,  606,   99,   99,   99,  311,   97,   97,
      101,  252,   63,  474,  576,  474,  474,  474,  105,  105,
      606,  252,    0,  311,    0,  105,   99,  101,  101,    0,
      577,   99,   99,   99,    0,  311,  100,    0,  101,  100,
       63,   64,  100,  100,   64,  105,  105,    0,   64,   64,
      311,   64,  105,   64,  101,  101,    0,   64,  577,   64,
       64,   64,  107,  106,  100,  106,  106,  100,  109,  100,
      100,  107,  107,  108,    0,  110,  110,  109,  109,  113,
      113,   64,  604,  114,  114,    0,  108,  108,  604,    0,
      107,  106,  106,  106,  615,  578,  109,    0,  107,  107,

      615,  108,  110,  110,  109,  109,  113,  113,   64,   65,
      114,  114,   65,  108,  108,    0,   65,   65,  579,   65,
      624,   65,  111,  578,  617,   65,  624,   65,   65,   65,
        0,  111,  111,  112,  112,  112,  142,  142,  117,    0,
      117,  617,  117,  140,  140,  140,  579,   65,   65,  631,
      111,  117,  117,  117,  144,  631,  555,  117,  111,  111,
      112,  112,  112,  142,  142,  491,  491,  491,  144,  144,
      140,  140,  140,  626,   65,   65,   81,   81,  555,  119,
       81,  119,  144,  119,    0,    0,   81,   81,   81,  585,
      626,  586,  119,  119,  119,  144,  144,  141,  119,  119,

      141,  141,  587,    0,   81,   81,  555,  120,   81,  120,
      243,  120,  243,   81,   81,   81,   98,  585,   98,  586,
      120,  120,  120,  243,   98,  141,  120,  141,  141,  125,
      587,   98,  125,   98,   98,  588,  125,  125,  243,  125,
      243,  125,  563,  296,   98,  125,   98,  125,  125,  125,
      243,  296,   98,    0,    0,    0,    0,  145,  145,   98,
       98,   98,  124,  588,  563,  124,    0,  296,  589,  124,
      124,  296,  124,  124,  124,  124,  124,  124,  124,  296,
      124,  124,  124,  127,  145,  145,  127,  150,    0,  256,
      127,  127,  563,  127,  296,  127,  589,    0,    0,  127,

      256,  127,  127,  127,  128,  150,  150,  128,    0,    0,
        0,  128,  128,  637,  128,  150,  128,  256,  129,  637,
      128,  129,  128,  128,  128,  129,  129,  256,  129,  642,
      129,    0,  150,  150,  129,  642,  129,  129,  129,  128,
      131,  148,  590,  131,  633,  148,  148,  131,  131,  143,
      131,  147,  131,    0,  143,  143,  131,  146,  131,  131,
      131,  633,    0,  146,  146,  147,  147,  128,  130,  148,
      590,  130,  148,  148,  591,  130,  130,  143,  130,  147,
      130,  143,  143,    0,  130,  146,  130,  130,  130,  130,
      146,  146,  147,  147,  472,  151,  151,  503,  647,  149,

      472,  597,  591,  503,  647,  472,    0,  472,  472,  472,
      503,  503,  503,  149,  149,  152,  598,  130,  132,    0,
      240,  132,  151,  151,  240,  132,  132,  149,  132,  597,
      132,  152,  152,    0,  132,  240,  132,  132,  132,  155,
      149,  149,    0,  152,  598,    0,  153,  132,  240,  639,
      153,  153,  240,  155,  155,    0,    0,  599,  152,  152,
      545,  545,  240,  154,    0,    0,  639,  155,    0,    0,
      154,  154,  156,  156,  153,  132,  133,  153,  153,  133,
      155,  155,  545,  133,  133,  599,  133,  159,  133,  162,
      162,  154,  133,  157,  133,  133,  133,  154,  154,  156,

      156,  159,  159,  157,  157,  160,  160,  160,  133,  644,
      545,    0,  652,  573,  158,  159,  162,  162,  652,  657,
        0,  157,    0,    0,  158,  657,  644,    0,  159,  159,
      157,  157,  160,  160,  160,  573,  133,  134,  158,  158,
      134,  163,  163,  254,  134,  134,  161,  134,  254,  134,
      164,  164,  158,  134,  254,  134,  134,  134,  161,  161,
      167,  167,  134,  573,  662,  158,  158,  667,  163,  163,
      662,  254,    0,  667,  161,    0,  254,  164,  164,    0,
        0,  254,    0,    0,  309,  161,  161,  167,  167,  249,
      134,  135,  309,  600,  135,  166,  166,  166,  135,  135,

      249,  135,  249,  135,  165,  168,  602,  135,  309,  135,
      135,  135,  309,  168,  168,  135,    0,  249,  165,  165,
      309,  600,  166,  166,  166,  609,    0,  249,    0,  249,
      170,  170,  165,  168,  602,  309,    0,    0,    0,  610,
      168,  168,  171,  135,  136,  165,  165,  136,    0,  171,
      171,  136,  136,  609,  136,  297,  136,  170,  170,  297,
      136,  172,  136,  136,  136,  172,  172,  610,  169,  136,
      171,  611,  169,  649,  672,  297,  171,  171,    0,  316,
      672,  169,  676,  297,  169,  169,  654,  297,  676,  172,
      649,  620,  172,  172,    0,  316,  169,  136,  137,  611,

      169,  137,  297,  654,    0,  137,  137,  316,  137,  169,
      137,  169,  169,  174,  137,  173,  137,  137,  137,  620,
      173,  173,  316,  659,  258,  175,    0,  174,  174,  175,
      175,  177,  177,  178,  178,  258,  137,  176,  680,  683,
      659,  174,    0,  173,  680,  683,    0,  173,  173,  664,
      176,  176,  258,  175,  174,  174,  175,  175,  177,  177,
      178,  178,  258,  137,  138,  176,  664,  138,  179,  179,
      179,  138,  138,  686,  138,  669,  138,  176,  176,  686,
      138,  181,  138,  138,  138,  180,  180,  674,  181,  181,
      182,  184,  669,  183,  317,  179,  179,  179,  183,  183,

      182,  182,  688,  138,  674,  184,  184,  678,  688,  181,
      317,  690,  180,  180,  692,  181,  181,  690,  182,  184,
      692,  183,  317,  694,  678,  183,  183,  182,  182,  694,
      138,  139,  184,  184,  139,  185,  185,  317,  139,  139,
      186,  139,  695,  139,  682,  187,  187,  139,  695,  139,
      139,  139,  188,  188,  186,  186,    0,  189,    0,  190,
      190,  682,  185,  185,  189,  189,  192,  191,  186,    0,
      139,  139,  187,  187,  191,  191,  685,  192,  192,  188,
      188,  186,  186,    0,  193,  189,  190,  190,  194,  194,
        0,  189,  189,  685,  192,  191,    0,  139,  139,  193,

      193,  191,  191,  299,  192,  192,  196,  299,  196,    0,
      196,    0,  193,    0,    0,  194,  194,    0,    0,  196,
      196,  196,  198,  299,  320,  198,  193,  193,    0,  198,
      198,  299,  198,    0,  198,  299,  200,    0,  198,  200,
      198,  198,  198,  200,  200,  201,  200,  201,  200,  201,
      299,    0,  200,  320,  200,  200,  200,    0,  201,  201,
      201,  202,    0,  202,  205,  202,  205,    0,  205,  320,
        0,    0,    0,    0,  202,  202,  202,  205,  205,  205,
      202,  320,    0,  205,  205,  206,    0,  206,    0,  206,
        0,  546,  546,  266,    0,  266,  320,  266,  206,  206,

      206,    0,  207,    0,  206,  207,  266,  266,  266,  207,
      207,  294,  207,  546,  207,  294,  208,    0,  207,  208,
      207,  207,  207,  208,  208,    0,  208,  294,  208,    0,
        0,    0,  208,    0,  208,  208,  208,  209,    0,  294,
      209,  546,    0,  294,  209,  209,    0,  209,    0,  209,
        0,    0,    0,  209,  294,  209,  209,  209,  213,    0,
        0,  213,    0,    0,    0,  213,  213,    0,  213,  209,
      213,    0,  215,    0,  213,  215,  213,  213,  213,  215,
      215,  245,  215,  245,  215,  259,    0,    0,  215,    0,
      215,  215,  215,    0,  245,    0,  259,  209,  210,    0,

        0,  210,    0,  552,  552,  210,  210,    0,  210,  245,
      210,  245,  216,  259,  210,  216,  210,  210,  210,  216,
      216,  245,  216,  259,  216,  552,  223,    0,  216,  223,
      216,  216,  216,  223,  223,    0,  223,    0,  223,    0,
        0,    0,  223,  210,  223,  223,  223,  224,    0,    0,
      224,  553,  553,  552,  224,  224,  246,  224,  246,  224,
        0,    0,    0,  224,    0,  224,  224,  224,    0,  246,
      210,  211,    0,  553,  211,    0,    0,    0,  211,  211,
        0,  211,    0,  211,  246,    0,  246,  211,    0,  211,
      211,  211,  227,  562,  562,  227,  246,    0,    0,  227,

      227,  553,  227,    0,  227,  211,  230,    0,  227,  230,
      227,  227,  227,  230,  230,  562,  230,    0,  230,  260,
        0,    0,  230,    0,  230,  230,  230,    0,    0,    0,
      260,    0,    0,  211,  212,    0,    0,  212,    0,    0,
        0,  212,  212,  562,  212,    0,  212,  260,  235,    0,
      212,  235,  212,  212,  212,  235,  235,  260,  235,  212,
      235,    0,  235,    0,  235,  250,  235,  235,  235,  302,
        0,  250,    0,  239,    0,  239,    0,    0,  302,    0,
        0,    0,  250,    0,  239,  302,    0,  212,  214,  239,
        0,  214,    0,  250,    0,  214,  214,  302,  214,  250,

      214,  239,  253,  239,  214,  302,  214,  214,  214,  250,
      251,  239,  302,  253,    0,  253,  239,  214,    0,    0,
        0,  251,  255,    0,  251,    0,    0,    0,    0,  255,
      253,    0,    0,  255,    0,  257,    0,    0,  251,    0,
      253,  257,  253,    0,  261,  214,  217,    0,  251,  217,
      255,  251,  257,  217,  217,  261,  217,  255,  217,    0,
      255,    0,  217,  257,  217,  217,  217,  263,  262,  257,
      262,  310,  261,  264,    0,    0,    0,    0,  263,  257,
      310,  262,  261,    0,  264,  217,    0,  310,    0,  271,
        0,  271,    0,  271,    0,  263,  262,    0,  262,  310,

        0,  264,  271,  271,  271,  263,    0,  310,  262,    0,
        0,  264,  217,  218,  310,    0,  218,    0,    0,    0,
      218,  218,  267,  218,  267,  218,  267,    0,    0,  218,
        0,  218,  218,  218,    0,  267,  267,  267,    0,    0,
        0,  267,  269,    0,  269,  270,  269,  270,    0,  270,
        0,    0,    0,  218,    0,  269,  269,  269,  270,  270,
      270,  269,  269,    0,  270,    0,    0,  277,    0,    0,
      277,    0,    0,    0,  277,  277,    0,  277,    0,  277,
      218,  219,    0,  277,  219,  277,  277,  277,  219,  219,
        0,  219,    0,  219,    0,  278,    0,  219,  278,  219,

      219,  219,  278,  278,    0,  278,  304,  278,    0,    0,
      305,  278,  304,  278,  278,  278,    0,  280,    0,  219,
      280,  305,  304,    0,  280,  280,  305,  280,  322,  280,
      322,    0,  322,  280,  304,  280,  280,  280,  305,    0,
      304,  322,  322,  322,    0,    0,  219,  220,  305,  304,
      220,    0,    0,  305,  220,  220,    0,  220,    0,  220,
        0,  281,    0,  220,  281,  220,  220,  220,  281,  281,
        0,  281,  318,  281,  318,  284,    0,  281,  284,  281,
      281,  281,  284,  284,    0,  284,    0,  284,  220,  285,
      318,  284,  285,  284,  284,  284,  285,  285,    0,  285,

      318,  285,  318,    0,    0,  285,    0,  285,  285,  285,
      300,  306,    0,  300,    0,  220,  221,  318,    0,  221,
        0,    0,  306,  221,  221,    0,  221,  306,  221,  300,
        0,    0,  221,    0,  221,  221,  221,  303,  300,  306,
        0,  300,  303,  307,    0,  221,    0,    0,  307,  306,
        0,    0,    0,  303,  306,    0,  300,    0,    0,    0,
        0,    0,    0,    0,  307,  303,    0,  308,    0,    0,
      303,  307,  308,  221,  222,    0,  307,  222,  312,    0,
      303,  222,  222,  312,  222,  314,  222,    0,  308,  313,
      222,  307,  222,  222,  222,  308,  314,    0,  313,  312,

      308,  314,    0,  315,    0,  313,  312,    0,    0,    0,
        0,  312,  315,  314,  222,  308,    0,  313,    0,  315,
        0,    0,    0,  314,    0,  313,  312,    0,  314,    0,
        0,  315,  313,    0,    0,  319,    0,    0,    0,  315,
      319,  222,  225,    0,    0,  225,  315,    0,    0,  225,
      225,  399,  225,  399,  225,  399,  319,    0,  225,    0,
      225,  225,  225,  319,  399,  399,  399,    0,  319,  330,
        0,    0,  330,    0,    0,    0,  330,  330,  225,  330,
        0,  330,    0,  319,    0,  330,    0,  330,  330,  330,
        0,    0,    0,  331,    0,    0,  331,    0,    0,    0,

      331,  331,    0,  331,    0,  331,  225,  226,    0,  331,
      226,  331,  331,  331,  226,  226,    0,  226,    0,  226,
        0,  338,    0,  226,  338,  226,  226,  226,  338,  338,
        0,  338,    0,  338,  423,    0,  423,  338,  423,  338,
      338,  338,    0,  339,    0,  226,  339,  423,  423,  423,
      339,  339,  447,  339,  447,  339,  447,    0,    0,  339,
        0,  339,  339,  339,    0,  447,  447,  447,    0,    0,
        0,    0,  226,  228,    0,    0,  228,    0,    0,    0,
      228,  228,    0,  228,    0,  228,    0,    0,    0,  228,
        0,  228,  228,  228,  342,    0,    0,  342,    0,    0,

        0,  342,  342,    0,  342,  228,  342,    0,  347,    0,
      342,  347,  342,  342,  342,  347,  347,  448,  347,  448,
      347,  448,    0,    0,  347,    0,  347,  347,  347,    0,
      448,  448,  448,  228,  229,    0,  448,  229,    0,    0,
        0,  229,  229,    0,  229,    0,  229,    0,  353,    0,
      229,  353,  229,  229,  229,  353,  353,    0,  353,    0,
      353,    0,    0,    0,  353,    0,  353,  353,  353,  355,
        0,    0,  355,    0,  229,    0,  355,  355,  451,  355,
      451,  355,  451,    0,    0,  355,    0,  355,  355,  355,
        0,  451,  451,  451,    0,    0,    0,  451,  451,    0,

        0,  229,  231,    0,    0,  231,    0,    0,    0,  231,
      231,    0,  231,    0,  231,    0,  359,    0,  231,  359,
      231,  231,  231,  359,  359,    0,  359,  231,  359,    0,
      361,    0,  359,  361,  359,  359,  359,  361,  361,  452,
      361,  452,  361,  452,    0,    0,  361,    0,  361,  361,
      361,    0,  452,  452,  452,  231,  232,    0,  452,  232,
        0,    0,    0,  232,  232,    0,  232,    0,  232,    0,
      365,    0,  232,  365,  232,  232,  232,  365,  365,    0,
      365,    0,  365,    0,    0,    0,  365,    0,  365,  365,
      365,    0,  367,    0,  232,  367,    0,  367,    0,  367,

      367,  464,  367,  464,  367,  464,    0,    0,  367,    0,
      367,  367,  367,    0,  464,  464,  464,    0,    0,    0,
        0,  232,  233,    0,    0,  233,    0,    0,    0,  233,
      233,    0,  233,    0,  233,    0,  371,    0,  233,  371,
      233,  233,  233,  371,  371,    0,  371,    0,  371,    0,
      372,  233,  371,  372,  371,  371,  371,  372,  372,  465,
      372,  465,  372,  465,    0,    0,  372,    0,  372,  372,
      372,    0,  465,  465,  465,    0,    0,    0,  465,  233,
      234,    0,    0,  234,    0,    0,    0,  234,  234,    0,
      234,    0,  234,    0,    0,    0,  234,    0,  234,  234,

      234,  374,    0,    0,  374,    0,    0,    0,  374,  374,
        0,  374,    0,  374,  234,  379,    0,  374,  379,  374,
      374,  374,  379,  379,    0,  379,    0,  379,    0,  385,
        0,  379,  385,  379,  379,  379,  385,  385,    0,  385,
        0,  385,  234,  236,    0,  385,  236,  385,  385,  385,
      236,  236,    0,  236,    0,  236,    0,  387,    0,  236,
      387,  236,  236,  236,  387,  387,    0,  387,    0,  387,
      236,    0,    0,  387,    0,  387,  387,  387,    0,    0,
        0,  236,    0,  388,    0,    0,  388,    0,    0,    0,
      388,  388,  468,  388,  468,  388,  468,    0,  236,  388,

        0,  388,  388,  388,    0,  468,  468,  468,  236,  279,
        0,  468,  279,    0,    0,    0,  279,  279,    0,  279,
        0,  279,    0,  392,    0,  279,  392,  279,  279,  279,
      392,  392,    0,  392,    0,  392,    0,  401,    0,  392,
      401,  392,  392,  392,  401,  401,    0,  401,    0,  401,
      279,  402,    0,  401,  402,  401,  401,  401,  402,  402,
      467,  402,  467,  402,  467,    0,    0,  402,    0,  402,
      402,  402,    0,  467,  467,  467,    0,  279,  282,  467,
      467,  282,    0,    0,    0,  282,  282,    0,  282,    0,
      282,  469,    0,  469,  282,  469,  282,  282,  282,  282,

      403,    0,    0,  403,  469,  469,  469,  403,  403,    0,
      403,    0,  403,    0,  404,    0,  403,  404,  403,  403,
      403,  404,  404,    0,  404,    0,  404,  282,  283,    0,
      404,  283,  404,  404,  404,  283,  283,    0,  283,    0,
      283,    0,    0,    0,  283,    0,  283,  283,  283,  409,
        0,    0,  409,    0,    0,    0,  409,  409,    0,  409,
        0,  409,  283,  414,    0,  409,  414,  409,  409,  409,
      414,  414,    0,  414,    0,  414,    0,  415,    0,  414,
      415,  414,  414,  414,  415,  415,    0,  415,    0,  415,
      283,  286,    0,  415,  286,  415,  415,  415,  286,  286,

        0,  286,    0,  286,    0,  417,    0,  286,  417,  286,
      286,  286,  417,  417,    0,  417,    0,  417,    0,  420,
        0,  417,  420,  417,  417,  417,  420,  420,    0,  420,
        0,  420,  286,  421,    0,  420,  421,  420,  420,  420,
      421,  421,  485,  421,  485,  421,  485,    0,    0,  421,
        0,  421,  421,  421,    0,  485,  485,  485,    0,  286,
      287,    0,    0,  287,    0,    0,    0,  287,  287,    0,
      287,    0,  287,    0,  427,    0,  287,  427,  287,  287,
      287,  427,  427,  287,  427,    0,  427,    0,  429,    0,
      427,  429,  427,  427,  427,  429,  429,    0,  429,    0,

      429,    0,    0,    0,  429,    0,  429,  429,  429,    0,
        0,  287,  288,    0,    0,  288,    0,    0,    0,  288,
      288,    0,  288,    0,  288,    0,    0,    0,  288,    0,
      288,  288,  288,  430,    0,    0,  430,    0,    0,    0,
      430,  430,    0,  430,    0,  430,  288,  432,    0,  430,
      432,  430,  430,  430,  432,  432,    0,  432,    0,  432,
        0,  436,    0,  432,  436,  432,  432,  432,  436,  436,
        0,  436,    0,  436,  288,  289,    0,  436,  289,  436,
      436,  436,  289,  289,    0,  289,    0,  289,    0,  438,
        0,  289,  438,  289,  289,  289,  438,  438,    0,  438,

        0,  438,    0,    0,    0,  438,    0,  438,  438,  438,
      289,  439,    0,    0,  439,    0,    0,    0,  439,  439,
        0,  439,    0,  439,    0,  442,    0,  439,  442,  439,
      439,  439,  442,  442,    0,  442,    0,  442,  289,  290,
        0,  442,  290,  442,  442,  442,  290,  290,    0,  290,
        0,  290,    0,  444,    0,  290,  444,  290,  290,  290,
      444,  444,    0,  444,    0,  444,    0,    0,    0,  444,
        0,  444,  444,  444,  446,    0,    0,  446,    0,  290,
        0,  446,  446,    0,  446,    0,  446,    0,    0,    0,
      446,    0,  446,  446,  446,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  290,  291,    0,    0,
      291,    0,    0,    0,  291,  291,    0,  291,    0,  291,
        0,  453,    0,  291,  453,  291,  291,  291,  453,  453,
        0,  453,    0,  453,    0,    0,    0,  453,    0,  453,
      453,  453,  455,    0,    0,  455,    0,  291,    0,  455,
      455,    0,  455,    0,  455,    0,    0,    0,  455,    0,
      455,  455,  455,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  291,  292,    0,    0,  292,    0,
        0,    0,  292,  292,    0,  292,    0,  292,    0,  456,
        0,  292,  456,  292,  292,  292,  456,  456,    0,  456,

        0,  456,    0,  457,  292,  456,  457,  456,  456,  456,
      457,  457,    0,  457,    0,  457,    0,    0,    0,  457,
      292,  457,  457,  457,    0,    0,  475,    0,    0,  475,
        0,    0,  292,  475,  475,    0,  475,    0,  475,    0,
        0,    0,  475,    0,  475,  475,  475,  292,  332,    0,
        0,  332,    0,    0,    0,  332,  332,    0,  332,    0,
      332,    0,  477,    0,  332,  477,  332,  332,  332,  477,
      477,    0,  477,    0,  477,    0,    0,    0,  477,    0,
      477,  477,  477,  478,    0,    0,  478,    0,  332,    0,
      478,  478,    0,  478,    0,  478,    0,    0,    0,  478,

        0,  478,  478,  478,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  332,  333,    0,    0,  333,
        0,    0,    0,  333,  333,    0,  333,    0,  333,    0,
        0,    0,  333,    0,  333,  333,  333,  483,    0,    0,
      483,    0,    0,    0,  483,  483,    0,  483,    0,  483,
      333,  493,    0,  483,  493,  483,  483,  483,  493,  493,
        0,  493,    0,  493,    0,  495,    0,  493,  495,  493,
      493,  493,  495,  495,    0,  495,    0,  495,  333,  334,
        0,  495,  334,  495,  495,  495,  334,  334,    0,  334,
        0,  334,    0,    0,    0,  334,    0,  334,  334,  334,

      334,  496,    0,    0,  496,    0,    0,    0,  496,  496,
        0,  496,    0,  496,    0,  498,    0,  496,  498,  496,
      496,  496,  498,  498,    0,  498,    0,  498,  334,  335,
        0,  498,  335,  498,  498,  498,  335,  335,    0,  335,
        0,  335,    0,  505,    0,  335,  505,  335,  335,  335,
      505,  505,  335,  505,    0,  505,    0,  507,    0,  505,
      507,  505,  505,  505,  507,  507,    0,  507,    0,  507,
        0,    0,    0,  507,    0,  507,  507,  507,    0,    0,
      335,  336,    0,    0,  336,    0,    0,    0,  336,  336,
        0,  336,    0,  336,    0,  508,    0,  336,  508,  336,

      336,  336,  508,  508,    0,  508,    0,  508,    0,    0,
        0,  508,    0,  508,  508,  508,  509,    0,    0,  509,
        0,  336,    0,  509,  509,    0,  509,    0,  509,    0,
        0,    0,  509,    0,  509,  509,  509,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  336,  337,
        0,    0,  337,    0,    0,    0,  337,  337,    0,  337,
        0,  337,    0,  516,    0,  337,  516,  337,  337,  337,
      516,  516,    0,  516,    0,  516,    0,    0,    0,  516,
        0,  516,  516,  516,  518,    0,    0,  518,    0,  337,
        0,  518,  518,    0,  518,    0,  518,    0,    0,    0,

      518,    0,  518,  518,  518,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  337,  340,    0,    0,
      340,    0,    0,    0,  340,  340,    0,  340,    0,  340,
        0,  519,    0,  340,  519,  340,  340,  340,  519,  519,
        0,  519,    0,  519,    0,  520,    0,  519,  520,  519,
      519,  519,  520,  520,    0,  520,  340,  520,    0,  521,
        0,  520,  521,  520,  520,  520,  521,  521,    0,  521,
        0,  521,    0,    0,    0,  521,    0,  521,  521,  521,
        0,    0,    0,  340,  341,    0,    0,  341,    0,    0,
        0,  341,  341,    0,  341,    0,  341,    0,  522,    0,

      341,  522,  341,  341,  341,  522,  522,    0,  522,    0,
      522,    0,    0,    0,  522,    0,  522,  522,  522,  526,
        0,    0,  526,    0,    0,    0,  526,  526,    0,  526,
      341,  526,    0,  528,    0,  526,  528,  526,  526,  526,
      528,  528,    0,  528,    0,  528,    0,    0,    0,  528,
        0,  528,  528,  528,    0,    0,    0,  341,  343,    0,
        0,  343,    0,    0,    0,  343,  343,    0,  343,    0,
      343,    0,  529,    0,  343,  529,  343,  343,  343,  529,
      529,    0,  529,    0,  529,    0,    0,    0,  529,    0,
      529,  529,  529,  343,  533,    0,    0,  533,    0,    0,

        0,  533,  533,    0,  533,    0,  533,    0,  535,    0,
      533,  535,  533,  533,  533,  535,  535,    0,  535,    0,
      535,  343,  344,    0,  535,  344,  535,  535,  535,  344,
      344,    0,  344,    0,  344,    0,  536,    0,  344,  536,
      344,  344,  344,  536,  536,    0,  536,  344,  536,    0,
      540,    0,  536,  540,  536,  536,  536,  540,  540,    0,
      540,    0,  540,    0,    0,    0,  540,    0,  540,  540,
      540,    0,    0,    0,    0,  344,  345,    0,    0,  345,
        0,    0,    0,  345,  345,    0,  345,    0,  345,    0,
      542,    0,  345,  542,  345,  345,  345,  542,  542,    0,

      542,    0,  542,    0,    0,    0,  542,    0,  542,  542,
      542,  543,    0,    0,  543,    0,  345,    0,  543,  543,
        0,  543,    0,  543,    0,    0,    0,  543,    0,  543,
      543,  543,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  345,  346,    0,    0,  346,    0,    0,
        0,  346,  346,    0,  346,    0,  346,    0,    0,    0,
      346,    0,  346,  346,  346,  548,    0,    0,  548,    0,
        0,    0,  548,  548,    0,  548,  346,  548,    0,  550,
        0,  548,  550,  548,  548,  548,  550,  550,    0,  550,
        0,  550,    0,    0,    0,  550,    0,  550,  550,  550,

        0,    0,    0,    0,  346,  348,    0,    0,  348,    0,
        0,    0,  348,  348,    0,  348,    0,  348,    0,  551,
        0,  348,  551,  348,  348,  348,  551,  551,    0,  551,
        0,  551,    0,    0,    0,  551,    0,  551,  551,  551,
        0,  558,    0,  348,  558,    0,    0,    0,  558,  558,
        0,  558,    0,  558,    0,    0,    0,  558,    0,  558,
      558,  558,    0,    0,    0,    0,    0,    0,    0,    0,
      348,  349,    0,    0,  349,    0,    0,    0,  349,  349,
        0,  349,    0,  349,    0,    0,    0,  349,    0,  349,
      349,  349,  349,  560,    0,    0,  560,    0,    0,    0,

      560,  560,    0,  560,    0,  560,    0,  561,    0,  560,
      561,  560,  560,  560,  561,  561,    0,  561,    0,  561,
      349,  350,    0,  561,  350,  561,  561,  561,  350,  350,
        0,  350,    0,  350,    0,  569,    0,  350,  569,  350,
      350,  350,  569,  569,    0,  569,    0,  569,    0,  571,
        0,  569,  571,  569,  569,  569,  571,  571,    0,  571,
        0,  571,    0,    0,    0,  571,  350,  571,  571,  571,
      572,    0,    0,  572,    0,    0,    0,  572,  572,    0,
      572,    0,  572,    0,    0,    0,  572,    0,  572,  572,
      572,    0,    0,  350,  351,    0,    0,  351,    0,    0,

        0,  351,  351,    0,  351,    0,  351,    0,  581,    0,
      351,  581,  351,  351,  351,  581,  581,    0,  581,    0,
      581,    0,    0,    0,  581,    0,  581,  581,  581,  583,
        0,    0,  583,    0,  351,    0,  583,  583,    0,  583,
        0,  583,    0,    0,    0,  583,    0,  583,  583,  583,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  351,  352,    0,    0,  352,    0,    0,    0,  352,
      352,    0,  352,    0,  352,    0,  584,    0,  352,  584,
      352,  352,  352,  584,  584,    0,  584,    0,  584,    0,
        0,    0,  584,    0,  584,  584,  584,    0,  593,    0,

      352,  593,    0,    0,    0,  593,  593,    0,  593,    0,
      593,    0,    0,    0,  593,    0,  593,  593,  593,    0,
        0,    0,    0,    0,    0,    0,    0,  352,  354,    0,
        0,  354,    0,    0,    0,  354,  354,    0,  354,    0,
      354,    0,  595,    0,  354,  595,  354,  354,  354,  595,
      595,    0,  595,    0,  595,    0,    0,    0,  595,    0,
      595,  595,  595,  354,  596,    0,    0,  596,    0,    0,
        0,  596,  596,    0,  596,    0,  596,    0,  605,    0,
      596,  605,  596,  596,  596,  605,  605,    0,  605,    0,
      605,  354,  356,    0,  605,  356,  605,  605,  605,  356,

      356,    0,  356,    0,  356,    0,  607,    0,  356,  607,
      356,  356,  356,  607,  607,    0,  607,    0,  607,    0,
      608,    0,  607,  608,  607,  607,  607,  608,  608,    0,
      608,    0,  608,  356,  616,    0,  608,  616,  608,  608,
      608,  616,  616,    0,  616,    0,  616,    0,    0,    0,
      616,    0,  616,  616,  616,    0,    0,    0,    0,    0,
      356,  357,    0,    0,  357,    0,    0,    0,  357,  357,
        0,  357,    0,  357,    0,    0,    0,  357,    0,  357,
      357,  357,    0,  618,    0,    0,  618,    0,    0,    0,
      618,  618,    0,  618,  357,  618,    0,  619,    0,  618,

      619,  618,  618,  618,  619,  619,    0,  619,    0,  619,
        0,    0,    0,  619,    0,  619,  619,  619,    0,    0,
        0,    0,  357,  358,    0,    0,  358,    0,    0,    0,
      358,  358,    0,  358,    0,  358,    0,  625,    0,  358,
      625,  358,  358,  358,  625,  625,    0,  625,    0,  625,
        0,    0,    0,  625,    0,  625,  625,  625,  627,    0,
        0,  627,    0,  358,    0,  627,  627,    0,  627,    0,
      627,    0,    0,    0,  627,    0,  627,  627,  627,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      358,  360,    0,    0,  360,    0,    0,    0,  360,  360,

        0,  360,    0,  360,    0,  628,    0,  360,  628,  360,
      360,  360,  628,  628,    0,  628,    0,  628,    0,    0,
        0,  628,    0,  628,  628,  628,  360,  632,    0,    0,
      632,    0,    0,    0,  632,  632,    0,  632,    0,  632,
        0,  634,    0,  632,  634,  632,  632,  632,  634,  634,
        0,  634,    0,  634,  360,  362,    0,  634,  362,  634,
      634,  634,  362,  362,    0,  362,    0,  362,    0,  635,
        0,  362,  635,  362,  362,  362,  635,  635,  362,  635,
        0,  635,    0,  638,    0,  635,  638,  635,  635,  635,
      638,  638,    0,  638,    0,  638,    0,    0,    0,  638,

        0,  638,  638,  638,    0,    0,  362,  363,    0,    0,
      363,    0,    0,    0,  363,  363,    0,  363,    0,  363,
        0,    0,    0,  363,    0,  363,  363,  363,  640,    0,
        0,  640,    0,    0,    0,  640,  640,    0,  640,    0,
      640,  363,  641,    0,  640,  641,  640,  640,  640,  641,
      641,    0,  641,    0,  641,    0,  643,    0,  641,  643,
      641,  641,  641,  643,  643,    0,  643,    0,  643,  363,
      364,    0,  643,  364,  643,  643,  643,  364,  364,    0,
      364,    0,  364,    0,    0,    0,  364,    0,  364,  364,
      364,  645,    0,    0,  645,    0,    0,    0,  645,  645,

        0,  645,    0,  645,  364,  646,    0,  645,  646,  645,
      645,  645,  646,  646,    0,  646,    0,  646,    0,  648,
        0,  646,  648,  646,  646,  646,  648,  648,    0,  648,
        0,  648,  364,  366,    0,  648,  366,  648,  648,  648,
      366,  366,    0,  366,    0,  366,    0,  650,    0,  366,
      650,  366,  366,  366,  650,  650,    0,  650,    0,  650,
        0,  651,    0,  650,  651,  650,  650,  650,  651,  651,
        0,  651,    0,  651,    0,  366,    0,  651,    0,  651,
      651,  651,    0,    0,    0,    0,    0,    0,    0,  653,
        0,    0,  653,    0,    0,    0,  653,  653,    0,  653,

        0,  653,  366,  373,    0,  653,  373,  653,  653,  653,
      373,  373,    0,  373,    0,  373,    0,  655,    0,  373,
      655,  373,  373,  373,  655,  655,    0,  655,  373,  655,
        0,  656,    0,  655,  656,  655,  655,  655,  656,  656,
        0,  656,    0,  656,    0,    0,    0,  656,    0,  656,
      656,  656,    0,    0,    0,    0,  373,  375,    0,    0,
      375,    0,    0,    0,  375,  375,    0,  375,    0,  375,
        0,    0,    0,  375,    0,  375,  375,  375,  658,    0,
        0,  658,    0,    0,    0,  658,  658,    0,  658,  375,
      658,    0,  660,    0,  658,  660,  658,  658,  658,  660,

      660,    0,  660,    0,  660,    0,    0,    0,  660,    0,
      660,  660,  660,    0,    0,    0,    0,  375,  376,    0,
        0,  376,    0,    0,    0,  376,  376,    0,  376,    0,
      376,    0,  661,    0,  376,  661,  376,  376,  376,  661,
      661,    0,  661,    0,  661,    0,    0,    0,  661,    0,
      661,  661,  661,  663,    0,    0,  663,    0,  376,    0,
      663,  663,    0,  663,    0,  663,    0,    0,    0,  663,
        0,  663,  663,  663,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  376,  377,    0,    0,  377,
        0,    0,    0,  377,  377,    0,  377,    0,  377,    0,

      665,    0,  377,  665,  377,  377,  377,  665,  665,    0,
      665,    0,  665,    0,    0,    0,  665,    0,  665,  665,
      665,  377,  666,    0,    0,  666,    0,    0,    0,  666,
      666,    0,  666,    0,  666,    0,  668,    0,  666,  668,
      666,  666,  666,  668,  668,    0,  668,    0,  668,  377,
      378,    0,  668,  378,  668,  668,  668,  378,  378,    0,
      378,    0,  378,    0,  670,    0,  378,  670,  378,  378,
      378,  670,  670,    0,  670,  378,  670,    0,  671,    0,
      670,  671,  670,  670,  670,  671,  671,    0,  671,    0,
      671,    0,    0,    0,  671,    0,  671,  671,  671,    0,

        0,    0,    0,  378,  380,    0,    0,  380,    0,    0,
        0,  380,  380,    0,  380,    0,  380,    0,    0,    0,
      380,    0,  380,  380,  380,  380,  673,    0,    0,  673,
        0,    0,    0,  673,  673,    0,  673,    0,  673,    0,
      675,    0,  673,  675,  673,  673,  673,  675,  675,    0,
      675,    0,  675,  380,  381,    0,  675,  381,  675,  675,
      675,  381,  381,    0,  381,    0,  381,    0,    0,    0,
      381,    0,  381,  381,  381,  677,    0,    0,  677,    0,
        0,    0,  677,  677,    0,  677,    0,  677,  381,  679,
        0,  677,  679,  677,  677,  677,  679,  679,    0,  679,

        0,  679,    0,  681,    0,  679,  681,  679,  679,  679,
      681,  681,    0,  681,    0,  681,  381,  382,    0,  681,
      382,  681,  681,  681,  382,  382,    0,  382,    0,  382,
        0,    0,    0,  382,    0,  382,  382,  382,  684,    0,
        0,  684,    0,    0,    0,  684,  684,    0,  684,    0,
      684,  382,  687,    0,  684,  687,  684,  684,  684,  687,
      687,    0,  687,    0,  687,    0,  689,    0,  687,  689,
      687,  687,  687,  689,  689,    0,  689,    0,  689,  382,
      383,    0,  689,  383,  689,  689,  689,  383,  383,    0,
      383,    0,  383,    0,  691,    0,  383,  691,  383,  383,

      383,  691,  691,    0,  691,  383,  691,    0,  693,    0,
      691,  693,  691,  691,  691,  693,  693,    0,  693,    0,
      693,    0,    0,    0,  693,    0,  693,  693,  693,    0,
        0,    0,    0,  383,  384,    0,    0,  384,    0,    0,
        0,  384,  384,    0,  384,    0,  384,    0,    0,    0,
      384,    0,  384,  384,  384,    0,    0,    0,    0,    0,
        0,    0,    0,  384,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  384,  386,    0,    0,  386,    0,    0,    0,  386,

      386,    0,  386,    0,  386,    0,    0,    0,  386,    0,
      386,  386,  386,    0,    0,  386,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  386,  389,    0,    0,  389,    0,    0,
        0,  389,  389,    0,  389,    0,  389,    0,    0,    0,
      389,    0,  389,  389,  389,    0,    0,    0,  389,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  389,  390,    0,    0,

      390,    0,    0,    0,  390,  390,    0,  390,    0,  390,
        0,    0,    0,  390,    0,  390,  390,  390,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  390,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  390,  391,    0,    0,  391,    0,    0,    0,
      391,  391,    0,  391,    0,  391,    0,    0,    0,  391,
        0,  391,  391,  391,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  391,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  391,  393,
        0,    0,  393,    0,    0,    0,  393,  393,    0,  393,
        0,  393,    0,    0,    0,  393,    0,  393,  393,  393,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  393,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  393,  394,    0,    0,  394,    0,    0,    0,  394,
      394,    0,  394,    0,  394,    0,    0,    0,  394,    0,
      394,  394,  394,    0,    0,    0,  394,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  394,  395,    0,    0,  395,    0,
        0,    0,  395,  395,    0,  395,    0,  395,    0,    0,
        0,  395,    0,  395,  395,  395,    0,    0,    0,    0,
      395,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  395,  396,
        0,    0,  396,    0,    0,    0,  396,  396,    0,  396,
        0,  396,    0,    0,    0,  396,    0,  396,  396,  396,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  396,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  396,  397,    0,    0,
      397,    0,    0,    0,  397,  397,    0,  397,    0,  397,
        0,    0,    0,  397,    0,  397,  397,  397,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  397,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  397,  398,    0,    0,  398,    0,
        0,    0,  398,  398,    0,  398,    0,  398,    0,    0,
        0,  398,    0,  398,  398,  398,  398,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  398,  405,    0,    0,  405,    0,

        0,    0,  405,  405,    0,  405,    0,  405,    0,    0,
        0,  405,    0,  405,  405,  405,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  405,  406,
        0,    0,  406,    0,    0,    0,  406,  406,    0,  406,
        0,  406,    0,    0,    0,  406,    0,  406,  406,  406,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  406,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  406,  407,    0,    0,  407,    0,
        0,    0,  407,  407,    0,  407,    0,  407,    0,    0,
        0,  407,    0,  407,  407,  407,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  407,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      407,  408,    0,    0,  408,    0,    0,    0,  408,  408,

        0,  408,    0,  408,    0,    0,    0,  408,    0,  408,
      408,  408,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  408,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  408,  410,
        0,    0,  410,    0,    0,    0,  410,  410,    0,  410,
        0,  410,    0,    0,    0,  410,    0,  410,  410,  410,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  410,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  410,  411,    0,    0,
      411,    0,    0,    0,  411,  411,    0,  411,    0,  411,
        0,    0,    0,  411,    0,  411,  411,  411,    0,    0,
        0,  411,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  411,
      412,    0,    0,  412,    0,    0,    0,  412,  412,    0,
      412,    0,  412,    0,    0,    0,  412,    0,  412,  412,

      412,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  412,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  412,  413,    0,    0,  413,    0,    0,
        0,  413,  413,    0,  413,    0,  413,    0,    0,    0,
      413,    0,  413,  413,  413,    0,    0,    0,    0,  413,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  413,  416,    0,
        0,  416,    0,    0,    0,  416,  416,    0,  416,    0,
      416,    0,    0,    0,  416,    0,  416,  416,  416,    0,
        0,    0,    0,  416,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  416,  418,    0,    0,  418,    0,    0,    0,  418,
      418,    0,  418,    0,  418,    0,    0,    0,  418,    0,
      418,  418,  418,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  418,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      418,  419,    0,    0,  419,    0,    0,    0,  419,  419,
        0,  419,    0,  419,    0,    0,    0,  419,    0,  419,
      419,  419,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      419,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  419,  422,    0,

        0,  422,    0,    0,    0,  422,  422,    0,  422,    0,
      422,    0,    0,    0,  422,    0,  422,  422,  422,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  422,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  422,  426,    0,    0,  426,    0,    0,
        0,  426,  426,    0,  426,  426,  426,  426,  426,  426,
      426,    0,  426,  426,  426,  431,    0,    0,  431,    0,
        0,    0,  431,  431,    0,  431,    0,  431,    0,    0,

        0,  431,    0,  431,  431,  431,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  431,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      431,  433,    0,    0,  433,    0,    0,    0,  433,  433,
        0,  433,    0,  433,    0,    0,    0,  433,    0,  433,
      433,  433,    0,    0,    0,    0,    0,  433,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  433,  434,    0,    0,  434,
        0,    0,    0,  434,  434,    0,  434,    0,  434,    0,
        0,    0,  434,    0,  434,  434,  434,    0,    0,    0,
        0,    0,    0,    0,    0,  434,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  434,  435,    0,    0,  435,    0,    0,
        0,  435,  435,    0,  435,    0,  435,    0,    0,    0,
      435,    0,  435,  435,  435,  435,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  435,  437,    0,    0,  437,    0,    0,
        0,  437,  437,    0,  437,    0,  437,    0,    0,    0,
      437,    0,  437,  437,  437,  437,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  437,  440,    0,    0,  440,    0,    0,
        0,  440,  440,    0,  440,    0,  440,    0,    0,    0,
      440,    0,  440,  440,  440,    0,    0,  440,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  440,  441,    0,    0,  441,
        0,    0,    0,  441,  441,    0,  441,    0,  441,    0,
        0,    0,  441,    0,  441,  441,  441,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  441,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  441,  458,    0,    0,  458,    0,    0,
        0,  458,  458,    0,  458,    0,  458,    0,    0,    0,

      458,    0,  458,  458,  458,  458,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  458,  459,    0,    0,  459,    0,    0,
        0,  459,  459,    0,  459,    0,  459,    0,    0,    0,
      459,    0,  459,  459,  459,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  459,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  459,  460,    0,

        0,  460,    0,    0,    0,  460,  460,    0,  460,    0,
      460,    0,    0,    0,  460,    0,  460,  460,  460,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  460,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  460,  461,    0,    0,  461,
        0,    0,    0,  461,  461,    0,  461,    0,  461,    0,
        0,    0,  461,    0,  461,  461,  461,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  461,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  461,  462,    0,    0,  462,    0,    0,
        0,  462,  462,    0,  462,    0,  462,    0,    0,    0,
      462,    0,  462,  462,  462,    0,    0,    0,    0,  462,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  462,  463,    0,
        0,  463,    0,    0,    0,  463,  463,    0,  463,    0,

      463,    0,    0,    0,  463,    0,  463,  463,  463,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  463,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  463,  479,    0,    0,  479,    0,    0,
        0,  479,  479,    0,  479,    0,  479,    0,    0,    0,
      479,    0,  479,  479,  479,    0,    0,  479,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  479,  480,    0,    0,  480,
        0,    0,    0,  480,  480,    0,  480,    0,  480,    0,
        0,    0,  480,    0,  480,  480,  480,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      480,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  480,  481,
        0,    0,  481,    0,    0,    0,  481,  481,    0,  481,
        0,  481,    0,    0,    0,  481,    0,  481,  481,  481,
        0,    0,    0,    0,    0,    0,    0,    0,  481,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  481,  482,    0,    0,
      482,    0,    0,    0,  482,  482,    0,  482,    0,  482,
        0,    0,    0,  482,    0,  482,  482,  482,    0,    0,
        0,    0,    0,    0,    0,    0,  482,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  482,  484,    0,    0,  484,    0,
        0,    0,  484,  484,    0,  484,    0,  484,    0,    0,

        0,  484,    0,  484,  484,  484,    0,    0,    0,    0,
        0,    0,    0,    0,  484,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  484,  497,    0,    0,  497,    0,    0,    0,
      497,  497,    0,  497,    0,  497,    0,    0,    0,  497,
        0,  497,  497,  497,    0,    0,    0,    0,  497,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  497,  499,    0,    0,

      499,    0,    0,    0,  499,  499,    0,  499,    0,  499,
        0,    0,    0,  499,    0,  499,  499,  499,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  499,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      499,  500,    0,    0,  500,    0,    0,    0,  500,  500,
        0,  500,    0,  500,    0,    0,    0,  500,    0,  500,
      500,  500,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  500,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  500,  501,    0,    0,  501,    0,
        0,    0,  501,  501,    0,  501,    0,  501,    0,    0,
        0,  501,    0,  501,  501,  501,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  501,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  501,  510,    0,
        0,  510,    0,    0,    0,  510,  510,    0,  510,    0,

      510,    0,    0,    0,  510,    0,  510,  510,  510,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  510,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      510,  511,    0,    0,  511,    0,    0,    0,  511,  511,
        0,  511,    0,  511,    0,    0,    0,  511,    0,  511,
      511,  511,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  511,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  511,  512,    0,    0,  512,    0,    0,
        0,  512,  512,    0,  512,    0,  512,    0,    0,    0,
      512,    0,  512,  512,  512,    0,    0,    0,    0,    0,
        0,  512,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  512,
      697,  697,    0,  697,  697,  697,  697,  698,  698,    0,
      698,  698,  698,  698,  699,    0,    0,  699,  700,    0,
      700,  701,    0,    0,  701,  702,  702,    0,  702,  702,

      702,  702,  703,  703,    0,  703,  703,  703,  703,  704,
        0,    0,  704,  705,    0,    0,  705,  706,    0,  706,
      707,    0,    0,  707,  708,    0,    0,  708,  709,  709,
        0,  709,  709,  709,  709,  710,  710,    0,  710,  710,
      710,  710,  711,    0,    0,    0,    0,  711,  712,    0,
        0,  712,  713,    0,    0,  713,  714,    0,    0,    0,
        0,  714,  715,    0,    0,  715,  716,    0,    0,  716,
      717,    0,    0,    0,    0,  717,  718,    0,    0,  718,
      719,    0,    0,  719,  720,    0,  720,  721,    0,    0,
        0,    0,  721,  722,    0,    0,  722,  723,    0,    0,

      723,  724,  724,    0,  724,  724,  724,  724,  725,  725,
        0,  725,  725,  725,  725,  726,    0,    0,  726,  727,
        0,    0,    0,    0,  727,  728,    0,    0,  728,  729,
        0,    0,  729,  730,    0,  730,  731,    0,    0,  731,
      732,    0,    0,    0,    0,  732,  733,    0,    0,  733,
      734,    0,    0,  734,  735,  735,    0,  735,  735,  735,
      735,  736,  736,    0,  736,  736,  736,  736,  737,    0,
        0,    0,  737,  738,    0,    0,  738,  739,    0,    0,
        0,    0,  739,  740,    0,    0,  740,  741,    0,    0,
      741,  742,    0,    0,    0,  742,  743,    0,    0,  743,

      744,    0,    0,    0,    0,  744,  745,    0,    0,  745,
      746,    0,    0,  746,  747,    0,    0,    0,  747,  748,
        0,    0,  748,  749,    0,    0,    0,    0,  749,  750,
        0,    0,  750,  751,    0,    0,  751,  752,    0,    0,
        0,  752,  753,    0,    0,  753,  754,    0,    0,    0,
        0,  754,  755,    0,    0,  755,  756,    0,    0,  756,
      757,    0,    0,    0,  757,  758,    0,    0,  758,  759,
        0,    0,    0,    0,  759,  760,    0,    0,  760,  761,
        0,    0,  761,  762,    0,    0,    0,  762,  763,    0,
        0,  763,  764,    0,    0,    0,    0,  764,  765,    0,

        0,  765,  766,    0,    0,  766,  767,    0,    0,    0,
      767,  768,    0,    0,  768,  769,    0,    0,    0,    0,
      769,  770,    0,    0,  770,  771,    0,    0,  771,  772,
        0,    0,    0,  772,  773,    0,    0,  773,  774,    0,
        0,    0,    0,  774,  775,    0,    0,  775,  776,    0,
        0,  776,  777,    0,    0,    0,  777,  778,    0,    0,
      778,  779,    0,    0,    0,    0,  779,  780,    0,    0,
      780,  781,    0,    0,  781,  782,    0,    0,    0,  782,
      783,    0,    0,  783,  784,    0,    0,    0,    0,  784,
      785,    0,    0,  785,  786,    0,    0,  786,  787,    0,

        0,    0,  787,  788,    0,    0,  788,  789,    0,    0,
        0,    0,  789,  790,    0,    0,  790,  791,    0,    0,
      791,  792,    0,    0,    0,  792,  793,    0,    0,  793,
      794,    0,    0,    0,    0,  794,  795,    0,    0,  795,
      796,    0,    0,  796,  797,    0,    0,    0,  797,  798,
        0,    0,  798,  799,    0,    0,    0,    0,  799,  800,
        0,    0,  800,  801,    0,    0,  801,  802,    0,    0,
        0,  802,  803,    0,    0,  803,  804,    0,    0,    0,
        0,  804,  805,    0,    0,  805,  806,    0,    0,  806,
      807,    0,    0,    0,  807,  808,    0,    0,  808,  809,

        0,    0,    0,    0,  809,  810,    0,    0,  810,  811,
        0,    0,  811,  812,    0,    0,    0,  812,  813,    0,
        0,  813,  814,    0,    0,    0,    0,  814,  815,    0,
        0,  815,  816,    0,    0,  816,  817,    0,    0,    0,
      817,  818,    0,    0,  818,  819,    0,    0,    0,    0,
      819,  820,    0,    0,  820,  821,    0,    0,  821,  822,
        0,    0,    0,  822,  823,    0,    0,  823,  824,    0,
        0,    0,    0,  824,  825,    0,    0,  825,  826,    0,
        0,  826,  827,    0,    0,    0,  827,  828,    0,    0,
      828,  829,    0,    0,    0,    0,  829,  830,    0,    0,

      830,  831,    0,    0,  831,  832,    0,    0,    0,  832,
      833,    0,    0,  833,  834,    0,    0,    0,    0,  834,
      835,    0,    0,  835,  836,    0,    0,  836,  837,    0,
        0,    0,  837,  838,    0,    0,  838,  839,    0,    0,
        0,    0,  839,  840,    0,    0,  840,  841,    0,    0,
      841,  842,    0,    0,    0,  842,  843,    0,    0,  843,
      844,    0,    0,    0,    0,  844,  845,    0,    0,  845,
      846,    0,    0,  846,  847,    0,    0,    0,  847,  848,
        0,    0,  848,  849,    0,    0,    0,    0,  849,  850,
        0,    0,  850,  851,    0,    0,    0,  851,  852,    0,

        0,  852,  853,    0,    0,    0,    0,  853,  854,    0,
        0,  854,  855,    0,    0,    0,  855,  856,    0,    0,
      856,  857,    0,    0,    0,    0,  857,  858,    0,    0,
        0,  858,  859,    0,    0,  859,  860,    0,    0,    0,
        0,  860,  861,    0,    0,    0,  861,  862,    0,    0,
      862,  863,    0,    0,    0,  863,  864,    0,    0,  864,
      865,    0,    0,    0,  865,  866,    0,    0,  866,  867,
        0,    0,    0,  867,  868,    0,    0,  868,  869,    0,
        0,    0,  869,  870,    0,    0,    0,  870,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[103] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexico.l"
#line 2 "lexico.l"
#include <stdio.h>
#include "Token.h"
#include <stdlib.h>

using namespace std;

extern string* pStr;
extern void GetToken(string lexema, Token_type tipo, int linea);
#line 2874 "Scanner.cpp"
/*PASCAL RESEVED WORDS*/
/*  -- Simplificador   -- */
/*Object Reserved Words*/
/*   -- END OF RSVW --    */
/*SINTAX SYMBOLS*/
/*  -- END OF SYNTX -- */
/* DATA TYPES  */
/* -- END OF DATA TYPES  --*/
/*All Arithmetic Operators*/
/*Arithmetic Operations*/
/* -- END OF OPRT --*/
#line 2886 "Scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 173 "lexico.l"


#line 3021 "Scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 697 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9789 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 175 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 176 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 178 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 179 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 180 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);     
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 181 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);      
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 182 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 183 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 184 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 185 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 186 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 187 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 188 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 191 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 192 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 193 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 194 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 195 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 196 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 197 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 198 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 199 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 200 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 201 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 202 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 203 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 205 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 206 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 207 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 208 "lexico.l"
GetToken(yytext,RSVWORD,yylineno); 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 209 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 210 "lexico.l"
GetToken(yytext,RSVWORD,yylineno); 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 211 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 213 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 214 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 215 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 217 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 218 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 221 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 222 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 223 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 224 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 225 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 226 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 227 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 228 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 229 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 230 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 233 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);  
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 234 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 235 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 236 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 237 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 239 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 240 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 241 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 242 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 244 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 245 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 246 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 247 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 249 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 250 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 251 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 252 "lexico.l"
GetToken(yytext,RSVWORD,yylineno);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 256 "lexico.l"
GetToken(yytext,OPERATOR,yylineno);         
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 257 "lexico.l"
GetToken(yytext,OPERATION,yylineno);  
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 261 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 262 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 263 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 264 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 265 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 266 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 267 "lexico.l"
GetToken(yytext,STXSymbl,yylineno);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 270 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);   
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 271 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 272 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 273 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 274 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 275 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 276 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 277 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 278 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 280 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 281 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 282 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 283 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 285 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 286 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 287 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 288 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 289 "lexico.l"
GetToken(yytext,DTTYPE,yylineno);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 291 "lexico.l"
GetToken(yytext,DIGIT,yylineno);                
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 292 "lexico.l"
GetToken(yytext,INTEGER,yylineno);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 293 "lexico.l"
GetToken(yytext,REAL,yylineno);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 294 "lexico.l"
GetToken(yytext,IDENTIFIER,yylineno);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 295 "lexico.l"
GetToken(yytext,EMPTYSPC,yylineno);
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 296 "lexico.l"
GetToken(yytext,LINEBRK,yylineno);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 297 "lexico.l"
GetToken(yytext,STRING,yylineno);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 300 "lexico.l"
GetToken(yytext,UsrOperations,yylineno);
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 301 "lexico.l"
GetToken(yytext,Usr_WHILE,yylineno);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 303 "lexico.l"
ECHO;
	YY_BREAK
#line 3600 "Scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 697 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 697 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 696);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 303 "lexico.l"



